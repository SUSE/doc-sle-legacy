<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="64bit_issues.xml" id="cha.64bit">
 <title>32-Bit- und 64-Bit-Anwendungen in einer 64-Bit-Systemumgebung</title><indexterm> <primary>64-Bit-Linux</primary> </indexterm>
 <para>
  <phrase role="productname"><phrase os="sled">SUSE® Linux Enterprise Desktop</phrase></phrase> ist für 64-Bit-Plattformen verfügbar. Das bedeutet jedoch nicht unbedingt, dass alle enthaltenen Anwendungen bereits auf 64-Bit-Plattformen portiert wurden. <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> unterstützt die Verwendung von 32-Bit-Anwendungen in einer 64-Bit-Systemumgebung. Dieses Kapitel bietet einen kurzen Überblick darüber, wie diese Unterstützung auf <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>-64-Bit-Plattformen implementiert ist. Es wird erläutert, wie 32-Bit-Anwendungen ausgeführt werden (Laufzeitunterstützung) und wie 32-Bit-Anwendungen kompiliert werden sollten, damit sie sowohl in 32-Bit- als auch in 64-Bit-Systemanwendungen ausgeführt werden können. Außerdem finden Sie Informationen zur Kernel-API und es wird erläutert, wie 32-Bit-Anwendungen unter einem 64-Bit-Kernel ausgeführt werden können.
 </para>
 <para>
  <phrase os="osuse;sled"><phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> für die 64-Bit-Plattformen AMD64 und Intel 64</phrase> ist so konzipiert, dass bestehende 32-Bit-Anwendungen sofort in der 64-Bit-Umgebung <quote>ausgeführt werden können.</quote> Diese Unterstützung bedeutet, dass Sie weiterhin Ihre bevorzugten 32-Bit-Anwendungen verwenden können und nicht warten müssen, bis ein entsprechender 64-Bit-Port verfügbar ist.
 </para>
 <sect1 id="sec.64bit.runt">
  <title>Laufzeitunterstützung</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Laufzeitunterstützung</secondary> </indexterm>

  <important>
   <title>Konflikte zwischen Anwendungsversionen</title>
   <para>
    Wenn eine Anwendung sowohl für 32-Bit- als auch für 64-Bit-Umgebungen verfügbar ist, führt die parallele Installation beider Versionen zwangsläufig zu Problemen. Entscheiden Sie sich in diesen Fällen für eine der beiden Versionen und installieren und verwenden Sie nur diese.
   </para>
   <para>
    Eine Ausnahme von dieser Regel ist PAM (Pluggable Authentication Modules). Während des Authentifizierungsprozesses verwendet <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> PAM (austauschbare Authentifizierungsmodule) als Schicht für die Vermittlung zwischen Benutzer und Anwendung. Auf einem 64-Bit-Betriebssystem, das auch 32-Bit-Anwendungen ausführt, ist es stets erforderlich, beide Versionen eines PAM-Moduls zu installieren.
   </para>
  </important>

  <para>
   Für eine korrekte Ausführung benötigt jede Anwendung eine Reihe von Bibliotheken. Leider sind die Namen für die 32-Bit- und 64-Bit-Versionen dieser Bibliotheken identisch. Sie müssen auf andere Weise voneinander unterschieden werden.
  </para>

  <para>
   Um die Kompatibilität mit der 32-Bit-Version aufrechtzuerhalten, werden die Bibliotheken am selben Ort im System gespeichert wie in der 32-Bit-Umgebung. Die 32-Bit-Version von <filename>libc.so.6</filename> befindet sich sowohl in der 32-Bit- als auch in der 64-Bit-Umgebung unter <filename>/lib/libc.so.6</filename>.
  </para>

  <para>
   Alle 64-Bit-Bibliotheken und Objektdateien befinden sich in Verzeichnissen mit dem Namen <filename>lib64</filename>. Die 64-Bit-Objektdateien, die sich normalerweise unter <filename>/lib</filename> und <filename>/usr/lib</filename> befinden, werden nun unter <filename>/lib64</filename> und <filename>/usr/lib64</filename> gespeichert. Unter <filename>/lib</filename> und <filename>/usr/lib</filename> ist also Platz für die 32-Bit-Bibliotheken, sodass der Dateiname für beide Versionen unverändert bleiben kann.
  </para>

  <para>
   Unterverzeichnisse von 32-Bit-Verzeichnissen namens <filename>/lib</filename>, deren Dateninhalt nicht von der Wortgröße abhängt, werden nicht verschoben. Das Schema entspricht LSB (Linux Standards Base) und FHS (File System Hierarchy Standard).
  </para>

  
 </sect1>
 <sect1 id="sec.64bit.devel">
  <title>Software-Entwicklung</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Software-Entwicklung</secondary> </indexterm>

  

  

  <para os="osuse;sled">
   Eine Doppelarchitektur-Entwicklungswerkzeugkette (Biarch Development Toolchain) ermöglicht die Erstellung von 32-Bit- und 64-Bit-Objekten. Standardmäßig werden 64-Bit-Objekte kompiliert. 32-Bit-Objekte können durch Verwendung spezieller Flaggen erstellt werden. Bei GCC lautet diese Flagge <option>-m32</option>.
  </para>

  <para>
   Alle Header-Dateien müssen in architekturunabhängiger Form geschrieben werden. Die installierten 32-Bit- und 64-Bit-Bibliotheken müssen eine API (Anwendungsprogrammschnittstelle) aufweisen, die zu den installierten Header-Dateien passt. Die normale <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>-Umgebung ist gemäß diesem Prinzip konzipiert. Bei manuell aktualisierten Bibliotheken müssen Sie diese Probleme selbst lösen.
  </para>
 </sect1>
 <sect1 id="sec.64bit.biarch">
  <title>Software-Kompilierung auf Doppelarchitektur-Plattformen</title>

  <para>
   Um bei einer Doppelarchitektur Binärdateien für die jeweils andere Architektur zu entwickeln, müssen die entsprechenden Bibliotheken für die zweite Architektur zusätzlich installiert werden. Diese Pakete heißen <systemitem class="resource">rpmname-32bit</systemitem>. Außerdem benötigen Sie die entsprechenden Header und Bibliotheken aus den <systemitem class="resource">rpmname-devel</systemitem>-Paketen und die Entwicklungsbibliotheken für die zweite Architektur aus <systemitem class="resource">rpmname-devel-32bit</systemitem>.
  </para>

  

  

  <para>
   Die meisten Open Source-Programme verwenden eine <command>autoconf</command>-basierte Programmkonfiguration. Um mit <command>autoconf</command> ein Programm für die zweite Architektur zu konfigurieren, überschreiben Sie die normalen Compiler- und Linker-Einstellungen von <command>autoconf</command>, indem Sie das Skript <command>configure</command> mit zusätzlichen Umgebungsvariablen ausführen.
  </para>

  <para>
   Das folgende Beispiel bezieht sich auf ein x86_64-System mit x86 als zweiter Architektur. 
  </para>

  <procedure>
   <step performance="required">
    <para>
     Verwenden Sie den 32-Bit-Compiler:
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Weisen Sie den Linker an, 32-Bit-Objekte zu verarbeiten (verwenden Sie stets <command>gcc</command> als Linker-Frontend):
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Legen Sie den Assembler für die Erstellung von 32-Bit-Objekten fest:
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step performance="required">
    <para>
     Geben Sie die Linker-Flags an, wie zum Beispiel den Standort von 32-Bit-Bibliotheken:
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step performance="required">
    <para>
     Geben Sie den Standort für die 32-Bit-Objektcode-Bibliotheken an:
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step performance="required">
    <para>
     Geben Sie den Standort für die 32-Bit-X-Bibliotheken an:
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   Nicht alle diese Variablen werden für jedes Programm benötigt. Passen Sie sie an das entsprechende Programm an.
  </para>

  

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 id="sec.64bit.kernel">
  <title>Kernel-Spezifikationen</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Kernel-Spezifikationen</secondary> </indexterm>

  <para>
   Die 64-Bit-Kernels für x86_64 bieten sowohl eine 64-Bit- als auch eine 32-Bit-Kernel-ABI (binäre Anwendungsschnittstelle). Letztere ist mit der ABI für den entsprechenden 32-Bit-Kernel identisch. Das bedeutet, dass die 32-Bit-Anwendung mit dem 64-Bit-Kernel auf die gleiche Weise kommunizieren kann wie mit dem 32-Bit-Kernel.
  </para>

  <para>
   Die 32-Bit-Emulation der Systemaufrufe für einen 64-Bit-Kernel unterstützt nicht alle APIs, die von Systemprogrammen verwendet werden. Dies hängt von der Plattform ab. Aus diesem Grund muss eine kleine Zahl von Anwendungen, wie beispielsweise <command>lspci</command>, kompiliert werden.
  </para>

  <para>
   Ein 64-Bit-Kernel kann nur 64-Bit-Kernel-Module laden, die speziell für diesen Kernel kompiliert wurden. 32-Bit-Kernel-Module können nicht verwendet werden.
  </para>

  <tip>
   <title>Kernel-ladbare Module</title>
   <para>
    Für einige Anwendungen sind separate, Kernel-ladbare Module erforderlich. Wenn Sie vorhaben, eine solche 32-Bit-Anwendung in einer 64-Bit-Systemumgebung zu verwenden, wenden Sie sich an den Anbieter dieser Anwendung und an SUSE, um sicherzustellen, dass die 64-Bit-Version des Kernel-ladbaren Moduls und die kompilierte 32-Bit-Version der Kernel-API für dieses Modul verfügbar sind.
   </para>
  </tip>
 </sect1>
</chapter>
