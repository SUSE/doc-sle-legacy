<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="64bit_issues.xml" id="cha.64bit">
 <title>64ビットシステム環境での32ビットと64ビットのアプリケーション</title><indexterm> <primary>64ビットLinux</primary> </indexterm>
 <para>
  <phrase role="productname"><phrase os="sled">SUSE® Linux Enterprise Desktop</phrase></phrase>は64ビットプラットフォームで利用できます。ただし、付属のすべてのアプリケーションが64ビットプラットフォームに移植されている訳ではありません。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>は、64ビットシステム環境での32ビットアプリケーションの使用をサポートしています。この章では、このサポートを64ビットの<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>プラットフォームで実装する方法について簡潔に説明します。また、32ビットアプリケーションの実行方法(ランタイムサポート)、および32ビットと64ビットのシステム環境の両方で実行できるように32ビットアプリケーションをコンパイルする方法について説明します。さらに、カーネルAPIに関する情報、および32ビットアプリケーションを64ビットカーネルで実行する方法についても説明します。
 </para>
 <para>
  <phrase os="osuse;sled"><phrase role="productname"><phrase os="sled">64ビットプラットフォームのamd64およびIntel 64に対応したSUSE Linux Enterprise Desktop</phrase></phrase></phrase>は、既存の32ビットアプリケーションが64ビット環境で「出荷してすぐに」動作するように設計されています。<quote/>このサポートにより、対応する 64ビット移植版が使用可能になるのを待たなくても、使用したい 32ビットアプリケーションを引き続き使用できます。
 </para>
 <sect1 id="sec.64bit.runt">
  <title>ランタイムサポート</title><indexterm> <primary>64ビットLinux</primary><secondary>ランタイムサポート</secondary> </indexterm>

  <important>
   <title>アプリケーションバージョン間の競合</title>
   <para>
    アプリケーションが32ビットと64ビットの両方の環境で使用可能な場合に、両方のバージョンを同時にインストールすると問題が生じます。そのような場合は、2つのバージョンのどちらかだけをインストールして使用してください。
   </para>
   <para>
    PAM(プラグ可能認証モジュール)は、このルールの例外です。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>は、ユーザとアプリケーションを仲介するレイヤとしての認証プロセスでPAMを使用します。また、 32ビットアプリケーションも実行する64ビットオペレーティングシステムでは、常に両バージョンのPAMモジュールをインストールする必要があります。
   </para>
  </important>

  <para>
   正しく実行するために、すべてのアプリケーションにはライブラリが必要です。しかし残念ながら、32ビットバージョンと64ビットバージョンのライブラリの名前は同じです。そのため、ライブラリを別の方法で区別する必要があります。
  </para>

  <para>
   32ビットバージョンとの互換性を維持するために、ライブラリは32ビット環境の場合と同じシステム内の場所に格納されます。libc.so.6<filename>の32ビットバージョンは、32ビットと64ビットのどちらの環境でも</filename>/lib/libc.so.6<filename>の下にあります。</filename>
  </para>

  <para>
   64ビットのすべてのライブラリとオブジェクトファイルは、<filename>lib64</filename>というディレクトリにあります。通常、<filename>/lib</filename>および<filename>/usr/lib</filename>の下にある64ビットのオブジェクトファイルは、<filename>/lib64</filename>および<filename>/usr/lib64</filename>の下にあります。つまり、両方のバージョンのファイル名を変更しなくても済むように、32ビットライブラリ用の領域は<filename>/lib</filename>および<filename>/usr/lib</filename>の下になっています。
  </para>

  <para>
   ワードサイズに依存しないデータコンテンツを持つ、32ビットの<filename>/lib</filename>ディレクトリ中のサブディレクトリは移動されません。このスキームは、LSB (Linux Standards Base)とFHS (File System Hierarchy Standard)に準拠しています。
  </para>

  
 </sect1>
 <sect1 id="sec.64bit.devel">
  <title>ソフトウェア開発</title><indexterm> <primary>64ビットlinux</primary><secondary>ソフトウェア開発</secondary> </indexterm>

  

  

  <para os="osuse;sled">
   biarch開発ツールチェーンを使用して、32ビットと64ビットのオブジェクトを生成できます。デフォルトでは、64ビットのオブジェクトをコンパイルします。特殊なフラグを使用すれば、32ビットのオブジェクトを生成することもできます。GCCの場合、特殊なフラグは <option>-m32</option>です。
  </para>

  <para>
   すべてのヘッダファイルは、アーキテクチャに依存しない形式で作成する必要があります。インストール済みの32ビットと64ビットのライブラリには、インストール済みのヘッダファイルに対応するAPI (アプリケーションプログラミングインタフェース)が必要です。標準の<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>環境は、この原則に従って設計されています。ライブラリを手動で更新した場合は、各自でAPIの問題を解決してください。
  </para>
 </sect1>
 <sect1 id="sec.64bit.biarch">
  <title>biarchプラットフォームでのソフトウェアのコンパイル</title>

  <para>
   biarchアーキテクチャで他のアーキテクチャ向けのバイナリを開発するには、対象のアーキテクチャのそれぞれのライブラリをさらにインストールする必要があります。これらのパッケージは、<systemitem class="resource">rpmname-32bit</systemitem>と呼ばれます。さらに、<systemitem class="resource">rpmname-devel</systemitem>パッケージからの各ヘッダとライブラリ、および<systemitem class="resource">rpmname-devel-32bit</systemitem>からの2番目のアーキテクチャ向けの開発ライブラリも必要です。
  </para>

  

  

  <para>
   ほとんどのオープンソースプログラムでは、<command>autoconf</command>ベースのプログラム設定が使用されています。対象のアーキテクチャ向けプログラムの設定に<command>autoconf</command>を使用するには、<command>autoconf</command>の標準のコンパイラとリンカーの設定に上書きするために、さらに環境変数を指定して<command>configure</command>スクリプトを実行します。
  </para>

  <para>
   次の例は、対象のアーキテクチャとしてx86を採用しているx86_64システムを示しています。 
  </para>

  <procedure>
   <step performance="required">
    <para>
     32ビットコンパイラを使用します。
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     リンカーに 32ビットオブジェクトの処理を指示します(リンカーのフロントエンドには常に<command>gcc</command>を使用)。
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step performance="required">
    <para>
     32ビットオブジェクトを生成するためにアセンブラを設定します。
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step performance="required">
    <para>
     次に示すような、32ビットライブラリの場所などのリンカフラグを指定します。
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step performance="required">
    <para>
     32ビットオブジェクトコードライブラリの場所を指定します。
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step performance="required">
    <para>
     32ビットXライブラリの場所を指定します。
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   こうした変数のすべてがどのプログラムにも必要なわけではありません。それぞれのプログラムに合わせて使用してください。
  </para>

  

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 id="sec.64bit.kernel">
  <title>カーネル仕様</title><indexterm> <primary>64ビットLinux</primary><secondary>カーネル仕様</secondary> </indexterm>

  <para>
   86_64向けの_64ビットカーネルには、64ビットと32ビットのカーネルABI(アプリケーションバイナリインタフェース)が用意されています。32ビットのカーネルABIは、該当する32ビットカーネルのABIと同じものです。つまり、32ビットアプリケーションが、32ビットカーネルの場合と同様に64ビットカーネルと通信できるということです。
  </para>

  <para>
   64ビットカーネルのシステムコールの32ビットエミュレーションでは、システムプログラムで使用されるすべてのAPIをサポートしていません。ただし、このサポートの有無はプラットフォームによって異なります。この理由から、<command>lspci</command>のような少数のアプリケーションをコンパイルする必要があります。
  </para>

  <para>
   64ビットカーネルでは、このカーネル用に特別にコンパイルされた64ビットカーネルモジュールしかロードできません。したがって、32ビットカーネルモジュールを使用することはできません。
  </para>

  <tip>
   <title>カーネルロード可能モジュール</title>
   <para>
    一部のアプリケーションには、カーネルでロード可能な個々のモジュールが必要です。64ビットシステム環境でそのような32ビットアプリケーションを使用する予定がある場合は、このアプリケーションおよびSUSEのプロバイダに問い合わせて、このモジュール向けのカーネルでロード可能な64ビットバージョンのモジュールと32ビットコンパイルバージョンのカーネルAPIを入手できるかを確認してください。
   </para>
  </tip>
 </sect1>
</chapter>
