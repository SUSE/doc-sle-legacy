<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="cha-xen-config"><title>Virtualization: Configuration Options and Settings</title><info/>
 
 <remark>mdejmek: maybe shorten these paras for 11.0??</remark>
<!-- TODO:
 - PVUSB
 - lock files
 - vhostmd
 - losetup -c
 - extra descriptions
 -->
 <para>
  The documentation in this section, describes advanced management tasks and
  configuration options that might help technology innovators implement
  leading-edge virtualization solutions. It is provided as a courtesy and
  does not imply that all documented options and tasks are supported by
  Novell, Inc.
 </para>
 <section xml:id="sec-xen-config-vcd">
  <title>Virtual CD Readers</title>

  <para>
   Virtual CD readers can be set up when a virtual machine is created or
   added to an existing virtual machine. A virtual CD reader can be based on
   a physical CD/DVD, or based on an ISO image. Virtual CD readers work
   differently depending on whether they are paravirtual or fully virtual.
  </para>

  <section xml:id="sec-xen-config-vcd-para">
<!-- TODO: maybe also the following works:
In domU: umount /dev/xvdb
In dom0: xm block-configure domUname file:/path/to/iso.iso xvdb:cdrom r
In domU: mount /dev/xvdb /mnt
- NO. xm block-configure just refuses to reconfigure.
-->
   <title>Virtual CD Readers on Paravirtual Machines</title>
   <para>
    A paravirtual machine can have up to 100 block devices comprised of
    virtual CD readers and virtual disks. On paravirtual machines, virtual
    CD readers present the CD as a virtual disk with read-only access.
    Virtual CD readers cannot be used to write data to a CD.
   </para>
   <para>
    After you have finished accessing a CD on a paravirtual machine, it is
    recommended that you remove the virtual CD reader from the virtual
    machine.
   </para>
   <para>
    Paravirtualized guests can use the device type
    <literal>tap:cdrom:</literal>. This partly emulates the behavior of the
    real CD reader, and allows CDs to be changed. It is even possible to use
    the eject command to open the tray of the CD reader.
   </para>
  </section>

  <section xml:id="sec-xen-config-vcd-full">
   <title>Virtual CD Readers on Fully Virtual Machines</title>
<!-- TODO: I have no idea, if that is still correct. -->
   <para>
    A fully virtual machine can have up to four block devices comprised of
    virtual CD readers and virtual disks. A virtual CD reader on a fully
    virtual machine interacts with the inserted CD in the way you expect a
    physical CD reader to interact. For example, in a Windows* XP* virtual
    machine, the inserted CD appears in the <literal>Devices with Removable
    Storage</literal> section of <literal>My Computer</literal>.
   </para>
   <para>
    When a CD is inserted in the physical CD reader on the host computer,
    all virtual machines with virtual CD readers based on the physical CD
    reader, such as <filename>/dev/cdrom/</filename>, are able to read the
    inserted CD. Assuming the operating system has automount functionality,
    the CD should automatically appear in the file system. Virtual CD
    readers cannot be used to write data to a CD. They are configured as
    read-only devices.
   </para>
  </section>

  <section xml:id="sec-xen-config-vcd-add">
   <title>Adding Virtual CD Readers</title>
   <para>
    Virtual CD readers can be based on a CD inserted into the CD reader or
    on an ISO image file.
   </para>
   <procedure>
    <step>
     <para>
      Make sure that the virtual machine is running and the operating system
      has finished booting.
     </para>
    </step>
    <step>
     <para>
      Insert the desired CD into the physical CD reader or copy the desired
      ISO image to a location available to &dom0;.
     </para>
    </step>
    <step>
     <para>
      Select a new, unused block device in your &vmguest;, such as
      <filename>/dev/xvdb</filename>.
     </para>
    </step>
    <step>
     <para>
      Choose the CD reader or ISO image that you want to assign to the
      guest.
     </para>
    </step>
    <step>
     <para>
      When using a real CD reader, use the following command to assign the
      CD reader to your &vmguest;. In this example, the name of the guest is
      &xenguest;:
     </para>
<screen>xm block-attach &xenguest; tap:cdrom:/dev/sr0 xvdb r</screen>
    </step>
    <step>
     <para>
      When assigning an image file, use the following command:
     </para>
<screen>xm block-attach &xenguest; file:/path/to/file.iso xvdb r</screen>
    </step>
    <step>
     <para>
      The image files may easily be removed by using
      <command>virt-manager</command>. However, note that when adding CD
      readers, virt-manager uses a different device back-end for the CD
      reader that is not capable of changing CDs.
     </para>
    </step>
    <step>
     <para>
      A new block device, such as <filename>/dev/xvdb</filename>, is added
      to the virtual machine.
     </para>
    </step>
    <step>
     <para>
      If the virtual machine is running Linux, complete the following:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Open a terminal in the virtual machine and enter <command>fdisk
        -l</command> to verify that the device was properly added. You can
        also enter <command>ls /sys/block</command> to see all disks
        available to the virtual machine.
       </para>
       <para>
        The CD is recognized by the virtual machine as a virtual disk with a
        drive designation, for example,
       </para>
<screen>/dev/xvdb</screen>
      </step>
      <step>
       <para>
        Enter the command to mount the CD or ISO image using its drive
        designation. For example,
       </para>
<screen>mount -o ro /dev/xvdb /mnt</screen>
       <para>
        mounts the CD to a mount point named <command>/mnt</command>.
       </para>
       <para>
        The CD or ISO image file should be available to the virtual machine
        at the specified mount point.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      If the virtual machine is running Windows, reboot the virtual machine.
     </para>
     <para>
      Verify that the virtual CD reader appears in its <literal>My
      Computer</literal> section
     </para>
    </step>
   </procedure>
  </section>

  <section xml:id="sec-xen-config-vcd-remove">
   <title>Removing Virtual CD Readers</title>
   <procedure>
    <step>
     <para>
      Make sure that the virtual machine is running and the operating system
      has finished booting.
     </para>
    </step>
    <step>
     <para>
      If the virtual CD reader is mounted, unmount it from within the
      virtual machine.
     </para>
     <tip>
      <para>
       Enter <command>cat /proc/partitions</command> in the virtual
       machine's terminal to view its block devices.
      </para>
     </tip>
    </step>
    <step>
     <para>
      Run Virtual Machine Manager.
     </para>
    </step>
    <step>
     <para>
      Select the virtual machine, click <guimenu>Open</guimenu>, and inside
      the VM's console window, choose
      <menuchoice><guimenu>View</guimenu><guimenu>Details</guimenu></menuchoice>.
     </para>
    </step>
    <step>
     <para>
      In the left pane, click the <guimenu>Xen Disk</guimenu> item and
      select the drive whose <guimenu>Source path</guimenu> matches the one
      you want to remove.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Remove</guimenu> to remove the virtual CD-ROM device.
     </para>
    </step>
    <step>
     <para>
      Press the hardware eject button to eject the CD.
     </para>
    </step>
   </procedure>
  </section>
 </section>
 <section xml:id="sec-xen-config-remote-access">
  <title>Remote Access Methods</title>

  <para>
   Some configurations, such as those that include rack-mounted servers,
   require a computer to run without a video monitor, keyboard, or mouse.
   This type of configuration is often referred to as
   <literal>headless</literal> and requires the use of remote administration
   technologies.
  </para>

  <para>
   Typical configuration scenarios and technologies include:
  </para>

  <variablelist>
   <varlistentry>
    <term>Graphical Desktop with X Window Server</term>
    <listitem>
     <para>
      If a graphical desktop, such as GNOME or KDE, is installed on the
      virtual machine host you can use a remote viewer, such as a VNC
      viewer. On a remote computer, log in and manage the host environment
      by using graphical tools, such as Virtual Machine Manager.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Text and Graphical Applications</term>
    <listitem>
     <para>
      If neither a graphical desktop nor the X Window Server, but the X
      Windows libraries are installed on the virtual machine host, you can
      use the <command>ssh -X</command> command from the remote computer to
      log in and manage the virtualization host environment. You can then
      use Virtual Machine Manager and the <command>xm</command> command to
      manage virtual machines and the <command>vm-install</command> command
      to create them.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Text Only</term>
    <listitem>
     <para>
      You can use the <command>ssh</command> command from a remote computer
      to log in to a virtual machine host and access its text-based console.
      You can then use the <command>xm</command> command to manage virtual
      machines and the <command>vm-install </command>command to create new
      virtual machines.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
 <section xml:id="sec-xen-config-vnc">
  <title>VNC Viewer</title>

  <para>
   By default, Virtual Machine Manager uses the VNC viewer to show the
   display of a virtual machine. You can also use VNC viewer from &dom0;
   (known as local access or on-box access) or from a remote computer.
  </para>

  <para>
   You can use the IP address of a &vmhost; and a VNC viewer to view the
   display of this &vmguest;. When a virtual machine is running, the VNC
   server on the host assigns the virtual machine a port number to be used
   for VNC viewer connections. The assigned port number is the lowest port
   number available when the virtual machine starts. The number is only
   available for the virtual machine while it is running. After shutting
   down, the port number might be assigned to other virtual machines.
  </para>

  <para>
   For example, if ports 1 and 2 and 4 and 5 are assigned to the running
   virtual machines, the VNC viewer assigns the lowest available port
   number, 3. If port number 3 is still in use the next time the virtual
   machine starts, the VNC server assigns a different port number to the
   virtual machine.
  </para>

  <para>
   To use the VNC viewer from a remote computer, the firewall must permit
   access to as many ports as &vmguest; systems run from. This means from
   port 5900 and up. For example, if you want to run 10 &vmguest; systems,
   you will have to open the tcp ports 5900:5910.
  </para>

  <para>
   In addition to this, change <literal>vnc-listen</literal> in
   <filename>/etc/xen/xend-config.sxp</filename> to open the access to the
   &vmguest;. For more information about modifying
   <filename>xend-config.sxp</filename> see
   <xref linkend="sec-xen-manage-xend"/>.
  </para>

  <para>
   To access the virtual machine from the local console running a VNC viewer
   client, enter one of the following commands:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <command>vncviewer ::590#</command>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>vncviewer :#</command>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   <replaceable>#</replaceable> is the VNC viewer port number assigned to
   the virtual machine.
  </para>

  <para>
   When accessing the &vmguest; from a machine other than &dom0;, use the
   following syntax:
  </para>

<screen>
vncviewer &xenhostip;::590#
</screen>

  <para>
   In this case, the IP address of &dom0; is &xenhostip;.
  </para>

<!-- Never seen that, never used that... lets just omit it.
  <para>
   If you are using the java VNC server, use <command>580#</command> as
   the port number, where <command>#</command> is the VNC viewer port number
   assigned to the virtual machine.
  </para>

  <figure>
   <title>Mozilla Firefox VNC Viewer</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="vnc_auth.png" width="56%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="vnc_auth.png" width="56%" format="png"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   When successfully connected, the VNC viewer shows the display of the
   running virtual machine.
  </para> -->

  <section xml:id="sec-xen-config-vnc-portnumbers">
   <title>Assigning VNC Viewer Port Numbers to Virtual Machines</title>
   <para>
    Although the default behavior of VNC viewer is to assign the first
    available port number, you might want to assign a specific VNC viewer
    port number to a specific virtual machine.
   </para>
   <para>
    To assign a specific port number on a &vmguest;, edit the Xend setting
    of the virtual machine and change the location to the desired value:
   </para>
<screen>
(device
    (vfb
        (type vnc)
        (location localhost:5902)
    )
)
   </screen>
   <para>
    For more information regarding editing the Xend settings of a machine,
    see <xref linkend="sec-xen-manage-vmm"/>.
   </para>
   <tip>
    <para>
     Assign higher port numbers to avoid conflict with port numbers assigned
     by the VNC viewer, which uses the lowest available port number.
    </para>
   </tip>
  </section>

  <section xml:id="sec-xen-config-vnc-sdl">
   <title>Using SDL instead of a VNC Viewer</title>
   <remark>TODO: I was not able to create a domain with SDL.The current
    documentation is also still file based, which we do not really support.</remark>
   <remark>The command vm-install --graphics-viewer=sdl did not bring up an
    installation screen. This section is about to be dropped from the manual.</remark>
   <para>
    If you access a virtual machine's display from the virtual machine host
    console (known as local or on-box access), you might want to use SDL
    instead of VNC viewer. VNC viewer is faster for viewing desktops over a
    network, but SDL is faster for viewing desktops from the same computer.
   </para>
   <para>
    To set the default to use SDL instead of VNC, change the virtual
    machine's configuration information to the following. For instructions,
    see
    <xref linkend="sec-xen-manage-vmachine" xrefstyle="SectTitleOnPage"/>.
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      If it is a fully virtual machine, use <command>vnc=0</command> and
      <command>sdl=1</command>.
     </para>
    </listitem>
    <listitem>
     <para>
      If it is a paravirtual virtual machine, use
      <command>vfb=["type=sdl"]</command>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Remember that, unlike a VNC viewer window, closing an SDL window
    terminates the virtual machine.
   </para>
  </section>
 </section>
 <section xml:id="sec-xen-config-keyboard">
  <title>Virtual Keyboards</title>

  <para>
   When a virtual machine is started, the host creates a virtual keyboard
   that matches the <command>keymap</command> entry according to the virtual
   machine's settings. If there is no <command>keymap</command> entry in the
   virtual machine's settings, the host uses the <command>keymap</command>
   entry specified in host's Xend file (
   <filename>xend-config.sxp</filename>). If there is no
   <command>keymap</command> entry in either the host's Xend file or the
   virtual machine's settings, the virtual machine's keyboard defaults to
   English (US).
  </para>

  <para>
   Unless you manually specify it, a <command>keymap</command> entry is not
   specified in the host's Xend file or for any virtual machine. Therefore,
   by default, all virtual machine settings use the English (US) virtual
   keyboard. It is recommended that you specify a <command>keymap</command>
   setting for Xend and for each virtual machine, especially, if you want to
   migrate virtual machines to different hosts
  </para>

  <para>
   To view a virtual machine's current <command>keymap</command> entry,
   enter the following command on the &dom0;:
  </para>

<screen>
xm list -l <replaceable>vm_name</replaceable> | grep keymap
</screen>

  <para>
   You can specify a keymap entry to be used for all virtual machines and
   keymap entries for specific machines.
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     To specify a global keymap entry for virtual machines on the host, edit
     the host's <filename>xend-config.sxp</filename> file.
    </para>
   </listitem>
   <listitem>
    <para>
     To specify a keymap entry for a specific virtual machine, edit the
     virtual machine's settings by following instructions in
     <xref linkend="sec-xen-manage-vmachine"/>.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   In the <command>device</command> &gt; <command>vfb</command> section, add
   the desired <command>keymap</command> entry to the file
   <filename>/etc/xen/xend-config.sxp</filename>. For example, you can
   specify a German keyboard. Make sure the virtual machine's operating
   system is set to use the specified keyboard. After you specify the host's
   <command>keymap</command> setting, all virtual machines created by using
   the Create Virtual Machine Wizard on the host add the host's
   <command>keymap</command> entry to their virtual machine settings.
  </para>

  <para>
   Virtual machines created before a host's <command>keymap</command> entry
   is specified are not automatically updated. These virtual machines start
   with the keyboard specified by the host, but the <command>
   keymap</command> entry is not a permanent part of the virtual machine's
   settings. For the entry to be permanent, it must be explicitly stated in
   the virtual machine's settings.
  </para>

  <table frame="topbot" rowsep="1" pgwide="0">
   <title>Language and Keymap Settings</title>
   <tgroup cols="2">
    <colspec colnum="1" colname="1" colwidth="50*"/>
    <colspec colnum="2" colname="2" colwidth="50*"/>
    <thead>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Language
       </para>
      </entry>
      <entry colname="2">
       <para>
        Keymap Setting
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Danish
       </para>
      </entry>
      <entry colname="2">
       <para>
        da
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        German
       </para>
      </entry>
      <entry colname="2">
       <para>
        de
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Swiss-German
       </para>
      </entry>
      <entry colname="2">
       <para>
        de-ch
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        English (UK)
       </para>
      </entry>
      <entry colname="2">
       <para>
        en-gb
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        English (US)
       </para>
      </entry>
      <entry colname="2">
       <para>
        en-us
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Spanish
       </para>
      </entry>
      <entry colname="2">
       <para>
        es
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Finnish
       </para>
      </entry>
      <entry colname="2">
       <para>
        fi
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        French
       </para>
      </entry>
      <entry colname="2">
       <para>
        fr
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        French-Belgium
       </para>
      </entry>
      <entry colname="2">
       <para>
        fr-be
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        French-Canada
       </para>
      </entry>
      <entry colname="2">
       <para>
        fr-ca
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        French-Switzerland
       </para>
      </entry>
      <entry colname="2">
       <para>
        fr-ch
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Hungarian
       </para>
      </entry>
      <entry colname="2">
       <para>
        hu
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Icelandic
       </para>
      </entry>
      <entry colname="2">
       <para>
        is
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Italian
       </para>
      </entry>
      <entry colname="2">
       <para>
        it
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Japanese
       </para>
      </entry>
      <entry colname="2">
       <para>
        ja
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Dutch
       </para>
      </entry>
      <entry colname="2">
       <para>
        nl
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Dutch-Belgium
       </para>
      </entry>
      <entry colname="2">
       <para>
        nl-be
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Norwegian
       </para>
      </entry>
      <entry colname="2">
       <para>
        no
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Polish
       </para>
      </entry>
      <entry colname="2">
       <para>
        pl
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Portuguese
       </para>
      </entry>
      <entry colname="2">
       <para>
        pt
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Portuguese-Brazil
       </para>
      </entry>
      <entry colname="2">
       <para>
        pt-br
       </para>
      </entry>
     </row>
     <row rowsep="1">
      <entry colname="1">
       <para>
        Russian
       </para>
      </entry>
      <entry colname="2">
       <para>
        ru
       </para>
      </entry>
     </row>
     <row rowsep="0">
      <entry colname="1">
       <para>
        Swedish
       </para>
      </entry>
      <entry colname="2">
       <para>
        sv
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </section>
 <section xml:id="sec-xen-config-pvusb">
  <title>&usbback;</title>

  <para>
   USB (Universal Serial Bus) is a common method to extend the capabilities
   of a workstation. It is possible to attach an arbitrary number of devices
   to the machine, providing for example extended storage, additional
   keyboard or mouse, Webcams and other devices.
  </para>

  <para>
   &xen; allows to dedicate USB devices that are attached to the physical
   machine to a &vmguest;. Note, that USB devices will not survive live
   migrations and it is recommended to remove any USB device before using
   the migration feature of &xen;. &xen; supports pass-through of USB
   devices from &vmhost; to &vmguest;s using two different methods:
  </para>

  <variablelist>
   <varlistentry>
    <term>qemu-dm USB pass-through using USB 1.1 emulation</term>
    <listitem>
     <para>
      This method only supports fully virtualized guests, but is available
      since &xen; 3.x. It is a low-performance method which does not require
      any special drivers neither in &dom0; or &vmguest;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>PVUSB support</term>
    <listitem>
     <para>
<!-- see bnc#767607 -->
      This method supports
<!-- both fully virtualized and-->
      paravirtualized guests, but is available in &xen; 4.0 and newer only.
      It requires special paravirtual Kernel drivers both in &dom0; or
      &vmguest;.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="usbback-qemudm">
   <title>Guest qemu-dm USB 1.1 emulation</title>
   <para>
    Qemu-dm used for &xen; fully virtualized guests supports pass-through of
    USB devices from &dom0; to the guest. Qemu-dm emulates USB 1.1 UHCI
    2-port controller, which is slow and limited in features and device
    support. The main advantage is that the emulation pass-through is
    supported in all &xen; 3.x and newer versions and does not require any
    additional back-end drivers in &dom0; or any additional front-end
    drivers in &vmguest;.
   </para>
   <para>
    There are several ways to assign a USB device to a &vmguest;. For all of
    them, you need to run <command>lsusb</command> on the host and read the
    device ID number. For example, if <command>lsusb</command> contains the
    following line
   </para>
<screen>Bus 001 Device 003: ID 054c:04be Any Corp.</screen>
   <para>
    then the device ID number is <literal>054c:04be</literal>. This ID will
    be the user in the following examples.
   </para>
   <section xml:id="usbback-qemudm-console">
    <title>Assigning USB Device with &qemu; Console</title>
    <para>
     This method lets you quickly assign host USB devices to a &vmguest;. No
     restart of &vmguest; is needed to access the connected USB device. This
     device assignment is temporary and will be forgotten after you shut the
     &vmguest; down.
    </para>
    <procedure>
     <step>
      <para>
       Insert the relevant USB device in the USB port of the host machine
       and identify its ID number with <command>lsusb</command>..
      </para>
     </step>
     <step>
      <para>
       Press
       <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>2</keycap></keycombo>
       to open &qemu; console and enter
       <command>usb_add&nbsp;host:054c:04be</command>.
      </para>
     </step>
     <step>
      <para>
       Verify if the assignment has been successful by checking the output
       of <command>lsusb</command> on the &vmguest;. The relevant line
       should contain the same device ID as the host.
      </para>
     </step>
    </procedure>
    <para>
     Note that <command>usb_del&nbsp;host:054c:04be</command> will
     disconnect the USB device from the &vmguest;.
    </para>
   </section>
   <section xml:id="usbback-qemudm-xm">
    <title>Assigning USB Devices with <command>xm</command> commands</title>
    <para>
     Another way to quickly assign (or disconnect) USB device to a &vmguest;
     is to use <command>xm usb-add</command> and <command>xm
     usb-del</command> commands:
    </para>
    <procedure>
     <step>
      <para>
       List all assignable USB devices in &dom0; with <command>xm
       usb-list-assignable-devices</command>. Note the device ID
       <literal>xxxx:yyyy</literal> for the device you want to connect to
       the &vmguest;.
      </para>
     </step>
     <step>
      <para>
       Check existing &vmguest;s (<command>xm list</command>) and pick the
       one you want to assign the USB device to.
      </para>
     </step>
     <step>
      <para>
       Connect the USB device to the selected &vmguest; with
      </para>
<screen>xm usb-add alice host:054c:04be</screen>
      <para>
       where <literal>alice</literal> is the &vmguest; name and
       <literal>054c:04be</literal> the ID of the USB device.
      </para>
     </step>
    </procedure>
   </section>
   <section xml:id="usbback-qemudm-cfg">
    <title>Assigning USB Devices in &vmguest; Configuration</title>
    <para>
     To permanently assign a USB device to a specified &vmguest;, you need
     to modify its configuration file in the
     <filename>/etc/xen/vm</filename> directory. Just add the following
     lines
    </para>
<screen>usb = 1
usbdevice = "host:xxxx:yyyy"</screen>
    <para>
     and restart the relevant &vmguest;. Please note that
     <literal>xxxx:yyyy</literal> stands for the USB device ID to assign.
    </para>
   </section>
  </section>

  <section xml:id="sec-xen-vhost-usbback-pv">
   <title>Assigning USB Devices with PVUSB</title>
   <para>
<!-- see bnc#767607 -->
    PVUSB is a new high performance method of doing USB pass-through from
    &dom0; to &vmguest;s. It supports both USB 2.0 and USB 1.1 devices and
    can be used with
<!-- both fully virtualized and -->
    paravirtualized guests. It requires special pvusb drivers in &dom0;'s
    Kernel (<literal>xen-usbback</literal>) and the front-end driver
    (<literal>xen-usbfront</literal>) in the &vmguest;.
   </para>
   <para>
    To assign a USB device with paravirtualized drivers, you first need to
    create a new virtual host controller (if there not already exists one)
    on the &vmguest;, and then attach the physical USB device to it. To
    assign a USB device as, for example, a USB keyboard device to a
    &vmguest;, proceed as follows:
   </para>
   <procedure>
    <title>Adding a USB Keyboard to a &vmguest;</title>
    <step>
     <para>
      Plug the USB keyboard device into the &vmhost;.
     </para>
    </step>
    <step>
     <para>
      Make sure that the Kernel module <literal>usbbk</literal> is loaded by
      the system with the command:
     </para>
<screen>lsmod | grep usbbk</screen>
     <para>
      If the module is not loaded, load the module with the command:
     </para>
<screen>modprobe usbbk</screen>
    </step>
    <step>
     <para>
      Create a virtual host controller for the &vmguest; with the command:
     </para>
<screen>xm usb-hc-create &xenguest; 2 8</screen>
     <para>
      This creates a virtual USB 2.0 host controller on the guest that has 8
      ports.
     </para>
    </step>
    <step>
     <para>
      On the &vmguest; system, load the front-end Kernel module of PVUSB
      with the command:
     </para>
<screen>modprobe xen-hcd</screen>
    </step>
    <step>
     <para>
      If the package <systemitem>usb-utils</systemitem> has been installed,
      you can now see the host controller in the USB device list with the
      command <command>lsusb</command>.
     </para>
    </step>
    <step>
     <para>
      Check if you can list the virtual host controller from the &vmhost;
      with the command <command>xm usb-list &xenguest;</command>
     </para>
    </step>
    <step>
     <para>
      On the &vmhost; system check which devices may be assigned to a guest
      with the command:
     </para>
<screen>xm usb-list-assignable-devices</screen>
     <para>
      The result should look similar to the following:
     </para>
<screen>4-2          : ID 047b:0002 SILITEK USB Keyboard and Mouse</screen>
    </step>
    <step>
     <para>
      The device that should be assigned to &xenguest; has the number
      <literal>4-2</literal>. To assign this device to the first virtual
      host controller with number 0 on its port 1, run the command:
     </para>
<screen>xm usb-attach &xenguest; 0 1 4-2</screen>
    </step>
   </procedure>
   <para>
    After completing this procedure, you may use the keyboard, for example,
    to type inside a VNC window.
   </para>
   <para>
    To detach the USB device, you need to know the number of the virtual
    host controller and the port number of the assigned device inside the
    &vmguest;. The port numbers of the host controllers start with the
    <literal>0</literal>, and the port numbers with <literal>1</literal>.
    List currently assigned devices with the command <command>xm usb-list
    &xenguest;</command>. The result should look similar to the following:
   </para>
<screen># xm usb-list &xenguest;
Idx BE  state usb-ver  BE-path
0   0   4     USB2.0  /local/domain/0/backend/vusb/2/0
port 1: 4-2 [ID 047b:0002 SILITEK USB Keyboard and Mouse]
port 2:
port 3:
port 4:
port 5:
port 6:
port 7:
port 8:</screen>
   <para>
    Remove this device with the command:
   </para>
<screen>xm usb-detach &xenguest; 0 1</screen>
   <tip>
    <title>Assigning the Whole Controller</title>
    <para>
     You can also use PCI pass-through to pass through the whole USB
     controller PCI device, with all USB devices connected to it. For more
     information see <xref linkend="sec-xen-vhost-pciback"/>.
    </para>
   </tip>
   <section xml:id="sec-xen-vhost-usbback-pv-vusb">
    <title>PVUSB Options in &vmguest;'s Configuration File</title>
    <para>
     While <command>xm usb-attach</command> is a <quote>hot-plugging</quote>
     way of connecting a USB device to a &vmguest; and the related device
     assignment will be forgotten after the guest system is switched off,
     you can add corresponding configuration options to the &vmguest;'s
     configuration file make the assignment permanent.
    </para>
    <para>
     The same effect that can be reached with
    </para>
<screen>xm usb-hc-create alice 2 4 &amp;&amp; xm usb-attach alice 0 1 1-8</screen>
    <para>
     can be accomplished by adding the following line
    </para>
<screen>vusb=['usbver=2, numports=4, port_1=1-8']</screen>
    <para>
     to the &vmguest;'s configuration file in the
     <filename>/etc/xen/vm</filename> directory and restarting it.
     <literal>usbver=</literal> specifies the USB version,
     <literal>numports=</literal> specifies the number of ports of the
     virtual controller, and <literal>port_1=</literal> specifies which
     physical USB device will be assigned to port 1 of the controller (can
     be up to <literal>port_16=</literal>).
    </para>
   </section>
  </section>
 </section>
 <section xml:id="xen-config-cpupinning">
  <title>Dedicating CPU Resources</title>

  <para>
   In &xen; it is possible to specify how many and which CPU cores the
   &dom0; or &vmguest; should use to retain its performance. The performance
   of &dom0; is important for the overall system as the disk and network
   drivers are running on it. Also I/O intensive guests' workloads may
   consume lots of &dom0;′s CPU cycles. On the other hand, the performance
   of &vmguest;s is also important to be able to accomplish the task they
   were set up for.
  </para>

  <section xml:id="config-cpupinning-dom0">
   <title>&dom0;</title>
   <para>
    Dedicating CPU resources to &dom0; results in a better overall
    performance of the virtualized environment because &dom0; has free CPU
    time to process I/O requests from &vmguest;s. Failing to dedicate
    exclusive CPU resources to &dom0; usually results in a poor performance
    and can cause the &vmguest;s to function incorrectly.
   </para>
   <para>
    Dedicating CPU resources involves three basic steps: modifying &xen;
    boot line, binding &dom0;'s VCPUs to a physical processor, and
    configuring CPU related options on &vmguest;s:
   </para>
   <para>
    First you need to append the <literal>dom0_max_vcpus=X</literal> to the
    &xen; boot line in <filename>/boot/grub/menu.lst</filename>, where
    <literal>X</literal> is the number of VCPUs dedicated to &dom0;. An
    example Kernel boot entry follows:
   </para>
<screen>title Xen -- SUSE Linux Enterprise Server 11 SP2 - 3.0.4-0.11
root (hd0,1)
kernel /boot/xen.gz dom0_max_vcpus=2
module /boot/vmlinuz-3.0.4-0.11-xen
module /boot/initrd-3.0.4-0.11-xen</screen>
   <para>
    Restart the &xen; Kernel for the change to take effect.
   </para>
   <para>
    The next step is to bind (or <quote>pin</quote>) each &dom0;'s VCPU to a
    physical processor.
   </para>
<screen>xm vcpu-pin Domain-0 0 0
xm vcpu-pin Domain-0 1 1</screen>
   <para>
    The first line binds &dom0;'s VCPU number 0 to the physical processor
    number 0, while the second line binds &dom0;'s VCPU number 1 to the
    physical processor number 1.
   </para>
   <para>
    Lastly, you need to make sure no &vmguest; uses the physical processors
    dedicated to VCPUs of &dom0;. Assuming you are running a 8-CPU system,
    you need to add
   </para>
<screen>cpus="2-8"</screen>
   <para>
    to the configuration file of the relevant &vmguest;.
   </para>
  </section>

  <section xml:id="config-cpupinning-domU">
   <title>&vmguest;s</title>
   <para>
    It is often needed to dedicate specific CPU resources to a virtual
    machine. By default, a virtual machine uses any available CPU core. Its
    performance can be improved by assigning a reasonable number of physical
    processors to it as other &vmguest;s are not allowed to make use of them
    after that. Assuming a machine with 8 CPU cores while a virtual machine
    needs to use 2 of them, change its configuration file as follows:
   </para>
<screen>vcpus=2
cpus="2,3"</screen>
   <para>
    The above example dedicates <literal>2</literal> processors to the
    &vmguest;, and it is exactly the 3rd and 4rd one (<literal>2</literal>
    and <literal>3</literal> counted from zero). If you need to assign more
    physical processors, use the <literal>cpus="2-8"</literal> syntax.
   </para>
   <para>
    If you need to change the CPU assignment for a guest named
    <quote>alice</quote> in a hotplug manner, do the following on the
    related &dom0;:
   </para>
<screen>xm vcpu-set alice 2
xm vcpu-pin alice 0 2
xm vcpu-pin alice 1 3</screen>
   <para>
    The example will dedicate 2 physical processors to the guest, and bind
    its VCPU 0 to physical processor 2 and VCPU 1 to physical processor 3.
    Now check the assignment:
    <remark>mdejmek: 0th, is this correct or a typo?
        tbazant: correct, i meant 'zeroth', i'll put it better </remark>
   </para>
<screen>xm vcpu-list alice
Name                              ID VCPUs   CPU State   Time(s) CPU Affinity
alice                             4     0     2   -b-       1.9 2-3
alice                             4     1     3   -b-       2.8 2-3</screen>
  </section>
 </section>
 <section xml:id="sec-xen-config-lock">
  <title>Using Lock Files</title>

  <para>
   When working with several &vmhost; systems that may run a pool of guests,
   a common task is to ensure that the guest systems are not started twice.
   Depending on the used block and network devices, this could lead to
   network problems as well as corrupted block devices.
  </para>

  <para>
   &xen; provides a mechanism that checks a lock file before a guest is
   started. In order to use this mechanism, a distributed file system like
   NFS or a cluster file system is needed. For example, a distributed file
   system mounted to <filename>/srv/xen</filename> may be used.
  </para>

  <para>
   The &xen; domain lock functionality is configured in the Xend
   configuration file <filename>/etc/xen/xend-config.sxp</filename>. At the
   end of this file, the two parameters
   <systemitem>xend-domain-lock</systemitem> and
   <systemitem>xend-domain-lock-path</systemitem> control the behavior. To
   use the directory <filename>/srv/xen</filename> as a locking directory,
   modify the settings as follows:
  </para>

<screen>(xend-domain-lock yes)
(xend-domain-lock-path /xen/lock)  
  </screen>

  <para>
   Activate the new settings either by rebooting the &vmhost; system, or by
   restarting <systemitem>xend</systemitem> with the command <command>rcxend
   restart</command>.
  </para>

  <para>
   When all &vmhost; systems use this locking directory, &xen; will refuse
   to start a &vmguest; twice.
  </para>
 </section>
 <section xml:id="sec-xen-config-xenpaging">
  <title>Xenpaging</title>

  <para>
   &xen; 4.1 introduced <emphasis>xenpaging</emphasis>&mdash;an advanced way
   of &vmguest;s' memory management. Xenpaging allows memory over-commit
   where the total memory used by all running guests exceeds the amount of
   memory available on the host. It writes memory pages of a given guest to
   a file and moves the pages back to the pool of available memory. Once the
   guest wants to access the paged-out memory, the page is read from the
   disk and placed into the guest's memory. This allows the sum of all
   running guests to use more memory than physically available on the host.
  </para>

  <para>
   To enable xenpaging for an already running &vmguest;, find the guest's ID
   with <command>xm list</command>. Change to a directory where you want to
   create the pagefile (<filename>/var/lib/xen/xenpaging/</filename>) and
   run the following command on &dom0;
  </para>

<screen>xenpaging 1 32768</screen>

  <para>
   where <literal>1</literal> is the ID of the guest you want to enable
   xenpaging for, and <literal>32768</literal> is the number of memory pages
   you want to save (32768 corresponds to 128&nbsp;MB pagefile).
  </para>

  <para>
   After rebooting the guest, its ID changes dynamically, and the current
   xenpaging binary has no target anymore. To automate restarting of
   xenpaging after a guest reboot, specify the number of pages in the guest
   configuration file in the <filename>/etc/xen/vm/</filename> directory:
  </para>

<screen>xenpaging=32768</screen>

  <para>
   Then redo the guest with <command>xm create
   /etc/xen/vm/&lt;vm_guest_name&gt;</command> to activate the changes.
  </para>
 </section>
 <section xml:id="sec-xen-config-hvm">
  <title>HVM Features</title>

  <para>
   In &xen; some features are only available for fully virtualized domains.
   They are not very often used, but still may be interesting in some
   environments.
  </para>

  <section xml:id="sec-xen-config-bootdevice">
   <title>Specify Boot Device on Boot</title>
   <para>
    Just as with physical hardware, it is sometimes desirable to boot a
    &vmguest; from a different device than its own boot device. For fully
    virtual machines, the managing program <command>virt-manager</command>
    provides a possibility to achieve this.
   </para>
   <procedure>
    <title>Select Boot Device in <command>virt-manager</command></title>
    <step>
     <para>
      Start <command>virt-manager</command> and connect to the needed &xen;
      host.
     </para>
    </step>
    <step>
     <para>
      Right-click the stopped machine, and select <guimenu>Open</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Choose
      <menuchoice><guimenu>View</guimenu><guimenu>Details</guimenu></menuchoice>
      to get an overview of the &vmguest;.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>Boot Options</guimenu>.
     </para>
    </step>
    <step>
     <para>
      A drop down box appears, that gives you a selection of bootable
      devices. Select the correct device and press <guimenu>Apply</guimenu>
     </para>
    </step>
    <step>
     <para>
      Then press <guimenu>Run</guimenu> to start the &vmguest;. The
      <guimenu>Console</guimenu> is also available from the screen.
     </para>
    </step>
    <step>
     <para>
      Depending on the desired tasks, it may be necessary to reset the boot
      device again.
     </para>
    </step>
   </procedure>
  </section>

  <section xml:id="sec-xen-config-cpuid">
   <title>Changing CPUIDs for Guests</title>
<!-- 
   another possibility is host side cpuid. This can be achieved by modifying
   the bootloader. -> unclear how.
  -->
   <para>
    To be able to migrate a &vmguest; from one &vmhost; to a different
    &vmhost;, it is mandatory, that the &vmguest; system only uses CPU
    features that are available on both &vmhost; systems. If the actual CPUs
    are different on both hosts, it may be necessary to hide some of the
    features before the &vmguest; is started in order to maintain the
    possibility to migrate the &vmguest; between both hosts. For fully
    virtualized guests, this can be achieved by configuring the
    <literal>cpuid</literal> that is available to the guest.
   </para>
   <para>
    To gain an overview of the current CPU, have a look at
    <filename>/proc/cpuinfo</filename>. This contains all the important
    information that defines the current CPU.
   </para>
   <para>
    To redefine a CPU, first have a look at the respective cpuid definitions
    of the CPU vendor. These are available from:
   </para>
   <variablelist>
    <varlistentry>
     <term>AMD</term>
     <listitem>
      <para>
       <link xlink:href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25481.pdf"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Intel</term>
     <listitem>
      <para>
       <link xlink:href="http://www.intel.com/Assets/PDF/appnote/241618.pdf"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The cpuid is organized in several 32-bit bitmasks. In an sxp
    configuration, a cpuid entry that just supplies values with the default
    policy would look like the following:
   </para>
<screen>(cpuid
  ( (0
       ( 
           (eax xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
           (edx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
           (ebx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
           (ecx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
       )
    )
  ) )</screen>
   <para>
    The respective bits may be changed by using the following values:
   </para>
   <variablelist>
    <varlistentry>
     <term>1</term>
     <listitem>
      <para>
       Force the corresponding bit to <literal>1</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>0</term>
     <listitem>
      <para>
       Force the corresponding bit to <literal>0</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>x</term>
     <listitem>
      <para>
       Use the values of the default policy
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>k</term>
     <listitem>
      <para>
       Use the values defined by the host
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>s</term>
     <listitem>
      <para>
       Like <literal>k</literal>, but preserve the value over migrations
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Note, that counting bits is done from right to the left, starting with
    bit <literal>0</literal>.
   </para>
   <para>
    For an example about how to use this feature with configuration scripts
    in <filename>/etc/xen/vm</filename>, see
    <filename>/etc/xen/examples/xmexample.hvm</filename>.
   </para>
  </section>

  <section xml:id="sec-xen-config-pirqs">
   <title>Increasing the Number of PCI-IRQs</title>
   <para>
    In case you need to increase the default number of PCI-IRQs available to
    &dom0; and/or &vmguest;, you can do so by modifying the &xen; kernel
    command line. Use the command
    <command>extra_guest_irqs=</command> <replaceable>domu_irgs,dom0_irgs</replaceable>.
    The optional first number <replaceable>domu_irgs</replaceable> is common
    for all &vmguest;s, while the optional second number
    <replaceable>dom0_irgs</replaceable> (preceded by a comma) is for
    &dom0;. Changing the setting for &vmguest; has no impact on &dom0; and
    vice versa. For example to change &dom0; without changing &vmguest;, use
   </para>
<screen>extra_guest_irqs=,512</screen>
  </section>
 </section>
</chapter>
