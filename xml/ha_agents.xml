<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<!-- 
 See advanced example in
 http://sapagents.svn.sourceforge.net/viewvc/sapagents/trunk/SAPInstance?revision=19&view=markup

-->
<chapter id="cha.ha.agents">
 <title>Adding or Modifying Resource Agents</title>
 <abstract>
  <para>
   All tasks that need to be managed by a cluster must be available as a
   resource. There are two major groups here to consider: resource agents
   and &stonith; agents. For both categories, you can add your own agents,
   extending the abilities of the cluster to your own needs.
  </para>
 </abstract>
 <sect1 id="sec.ha.stonithagents">
  <title>&stonith; Agents</title>

  <para>
   A cluster sometimes detects that one of the nodes is behaving strangely
   and needs to remove it. This is called <emphasis>fencing</emphasis> and
   is commonly done with a &stonith; resource. 
  </para>

  <warning>
   <title>External SSH/&stonith; Are Not Supported</title>
   <para>
    It is impossible to know how SSH might react to other system problems.
    For this reason, external SSH/&stonith; agents  (like 
    <literal>stonith:external/ssh</literal>) are not supported for
    production environments. If you still want to use such agents for testing,
    install the <systemitem class="resource">libglue-devel</systemitem> package.
   </para>
  </warning>

  <para>
   To get a list of all currently available &stonith; devices (from the
   software side), use the command <command>crm ra list stonith</command>.
   If you do not find your favorite agent, install the <systemitem 
     class="resource">-devel</systemitem> package.
  </para>

  <para>
   As of yet there is no documentation about writing &stonith; agents. If
   you want to write new &stonith; agents, consult the examples available in
   the source of the <systemitem class="resource">cluster-glue</systemitem>
   package.
  </para>
 </sect1>
 <sect1 id="sec.ha.writingresourceagents">
  <title>Writing OCF Resource Agents</title>

  <para>
   All OCF resource agents (RAs) are available in
   <filename>/usr/lib/ocf/resource.d/</filename>, see
   <xref linkend="sec.ha.config.basics.raclasses"/> for more
   information. Each resource agent must supported the following operations
   to control it:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>start</command>
    </term>
    <listitem>
     <para>
      start or enable the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>stop</command>
    </term>
    <listitem>
     <para>
      stop or disable the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>status</command>
    </term>
    <listitem>
     <para>
      returns the status of the resource
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>monitor</command>
    </term>
    <listitem>
     <para>
      similar to <command>status</command>, but checks also for unexpected
      states
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>validate</command>
    </term>
    <listitem>
     <para>
      validate the resource's configuration
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>meta-data</command>
    </term>
    <listitem>
     <para>
      returns information about the resource agent in XML
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The general procedure of how to create an OCF RA is like the following:
  </para>

  <procedure>
   <step>
    <para>
     Load the file
     <filename>/usr/lib/ocf/resource.d/pacemaker/Dummy</filename> as a
     template.
    </para>
   </step>
   <step>
    <para>
     Create a new subdirectory for each new resource agents to avoid naming
     contradictions. For example, if you have a resource group
     <literal>kitchen</literal> with the resource
     <literal>coffee_machine</literal>, add this resource to the directory
     <filename>/usr/lib/ocf/resource.d/kitchen/</filename>. To access this
     RA, execute the command <command>crm</command>:
    </para>
<screen><command>configure</command><command>primitive</command> coffee_1 <emphasis>ocf:coffee_machine:kitchen</emphasis> ...</screen>
   </step>
   <step>
    <para>
     Implement the different shell functions and save your file under a
     different name.
    </para>
   </step>
  </procedure>

  <para>
   More details about writing OCF resource agents can be found at
   <ulink url="http://linux-ha.org/wiki/Resource_Agents"/>. Find special
   information about several concepts at <xref linkend="cha.ha.concepts"/>.
  </para>
 </sect1>
 <xi:include href="ha_error_codes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
</chapter>
