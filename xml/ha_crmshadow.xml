<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<refentry id="man.crmshadow">
 <refmeta>
  <refentrytitle>crm_shadow</refentrytitle>
  <manvolnum>8</manvolnum>
 </refmeta>
 <refnamediv>
  <refname>crm_shadow</refname><refpurpose>Perform Configuration Changes in a Sandbox Before Updating The Live Cluster</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Synopsis</title>
<screen><command>crm_shadow</command> [-V] [-p|-e|-q]</screen>
 </refsect1>
 <refsect1>
  <title>Description</title>
  <para>
   Sets up an environment in which configuration tools
   (<command>cibadmin</command>, <command>crm_resource</command>, etc) work
   offline instead of against a live cluster, allowing changes to be
   previewed and tested for side-effects.
  </para>
 </refsect1>
 <refsect1 id="man.crmshadow.options">
  <title>Options</title>
<!-- 

usage: crm_shadow -[V?bfwc:dr:C:D:ps:E]
Options
        ++verbose (-V)  turn on debug info.  additional instance increase verbosity
        ++help    (-?)  this help message

Commands
        ++-which   (-w)  Indicate the active shadow copy
        ++display (-p)  Display the contents of the shadow copy
        ++diff    (-d)  Display the changes in the shadow copy
        ++create-empty  (-e) name       Create the named shadow copy with an empty cluster configuration
        ++create  (-c) name     Create the named shadow copy of the active cluster configuration
        ++reset   (-r) name     Recreate the named shadow copy from the active cluster configuration
        ++commit  (-C) name     Upload the contents of the named shadow copy to the cluster
        ++delete  (-D) name     Delete the contents of the named shadow copy
        ++edit    (-E) name     Edit the contents of the named shadow copy with your favorite $EDITOR

Advanced Options
        ++batch  (-b)   Don't spawn a new shell
        ++force  (-f)   Force the action to be performed
        ++switch (-s) name      Switch to the named shadow copy    
    
    -->
  <variablelist>
   <varlistentry>
    <term><option>--verbose</option>, <option>-V</option>
    </term>
    <listitem>
     <para>
      turn on debug info. additional instance increase verbosity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--which</option>, <option>-w</option>
    </term>
    <listitem>
     <para>
      indicate the active shadow copy
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--display</option>, <option>-p</option>
    </term>
    <listitem>
     <para>
      display the contents of the shadow copy
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--diff</option>, <option>-d</option>
    </term>
    <listitem>
     <para>
      display the changes in the shadow copy
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--create-empty</option>, <option>-e</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      create the named shadow copy with an empty cluster configuration
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--create</option>, <option>-c</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      create the named shadow copy of the active cluster configuration
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--reset</option>, <option>-r</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      recreate the named shadow copy from the active cluster configuration
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--commit</option>, <option>-c</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      upload the contents of the named shadow copy to the cluster
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--delete</option>, <option>-d</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      delete the contents of the named shadow copy
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--edit</option>, <option>-e</option><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      Edit the contents of the named shadow copy with your favorite editor
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--batch</option>, <option>-b</option>
    </term>
    <listitem>
     <para>
      do not spawn a new shell
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--force</option>, <option>-f</option>
    </term>
    <listitem>
     <para>
      do not spawn a new shell
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--switch</option>, <option>-s</option>
    </term>
    <listitem>
     <para>
      switch to the named shadow copy
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 id="man.crmshadow.internals">
  <title>Internal Commands</title>
<!-- 
A star (*) next to a name means that the command is disabled.

 JOB_SPEC [&]                       (( expression ))
 . filename [arguments]             :
 [ arg... ]                         [[ expression ]]
 alias [-p] [name[=value] ... ]     bg [job_spec ...]
 bind [-lpvsPVS] [-m keymap] [-f fi break [n]
 builtin [shell-builtin [arg ...]]  caller [EXPR]
 case WORD in [PATTERN [| PATTERN]. cd [-L|-P] [dir]
 command [-pVv] command [arg ...]   compgen [-abcdefgjksuv] [-o option
 complete [-abcdefgjksuv] [-pr] [-o continue [n]
 declare [-afFirtx] [-p] [name[=val dirs [-clpv] [+N] [-N]
 disown [-h] [-ar] [jobspec ...]    echo [-neE] [arg ...]
 enable [-pnds] [-a] [-f filename]  eval [arg ...]
 exec [-cl] [-a name] file [redirec exit [n]
 export [-nf] [name[=value] ...] or false
 fc [-e ename] [-nlr] [first] [last fg [job_spec]
 for NAME [in WORDS ... ;] do COMMA for (( exp1; exp2; exp3 )); do COM
 function NAME { COMMANDS ; } or NA getopts optstring name [arg]
 hash [-lr] [-p pathname] [-dt] [na help [-s] [pattern ...]
 history [-c] [-d offset] [n] or hi if COMMANDS; then COMMANDS; [ elif
 jobs [-lnprs] [jobspec ...] or job kill [-s sigspec | -n signum | -si
 let arg [arg ...]                  local name[=value] ...
 logout                             popd [+N | -N] [-n]
 printf [-v var] format [arguments] pushd [dir | +N | -N] [-n]
 pwd [-LP]                          read [-ers] [-u fd] [-t timeout] [
 readonly [-af] [name[=value] ...]  return [n]
 select NAME [in WORDS ... ;] do CO set [++abefhkmnptuvxBCHP] [-o opti
 shift [n]                          shopt [-pqsu] [-o long-option] opt
 source filename [arguments]        suspend [-f]
 test [expr]                        time [-p] PIPELINE
 times                              trap [-lp] [arg signal_spec ...]
 true                               type [-afptP] name [name ...]
 typeset [-afFirtx] [-p] name[=valu ulimit [-SHacdfilmnpqstuvx] [limit
 umask [-p] [-S] [mode]             unalias [-a] name [name ...]
 unset [-f] [-v] [name ...]         until COMMANDS; do COMMANDS; done
 variables - Some variable names an wait [n]
 while COMMANDS; do COMMANDS; done  { COMMANDS ; }
    -->
  <para>
   To work with a shadow configuration, you need to create one first:
  </para>
<screen>crm_shadow --create-empty <replaceable>YOUR_NAME</replaceable></screen>
  <para>
   It gives you an internal shell like the one from the
   <command>crm</command> tool. Use <command>help</command> to get an
   overview of all internal commands, or <command>help</command>
   <replaceable>subcommand</replaceable> for a specific command.
  </para>
  <table id="tab.crmshadow.internal">
   <title>Overview of Internal Commands</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
        Command
       </para>
      </entry>
      <entry>
       <para>
        Syntax/Description
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <command>alias</command>
       </para>
      </entry>
      <entry>
<screen>alias [-p] [name[=value] ... ]</screen>
       <para>
        <command>alias</command> with no arguments or with the -p option
        prints the list of aliases in the form alias
        <literal>NAME=VALUE</literal> on standard output. Otherwise, an
        alias is defined for each NAME whose VALUE is given. A trailing
        space in VALUE causes the next word to be checked for alias
        substitution when the alias is expanded. Alias returns true unless a
        NAME is given for which no alias has been defined.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>bg</command>
       </para>
      </entry>
      <entry>
<screen>bg [JOB_SPEC ...]</screen>
       <para>
        Place each JOB_SPEC in the background, as if it had been started
        with &amp;. If JOB_SPEC is not present, the shell's notion of the
        current job is used.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>bind</command>
       </para>
      </entry>
      <entry>
<screen>bind [-lpvsPVS] [-m keymap] [-f filename]
   [-q name] [-u name] [-r keyseq]
   [-x keyseq:shell-command] 
   [keyseq:readline-function or readline-command]</screen>
       <para>
        Bind a key sequence to a Readline function or a macro, or set a
        Readline variable. The non-option argument syntax is equivalent to
        that found in <filename>~/.inputrc</filename>, but must be passed as
        a single argument: bind <literal>"\C-x\C-r":
        re-read-init-file</literal>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>break</command>
       </para>
      </entry>
      <entry>
<screen>break [N]</screen>
       <para>
        Exit from within a <literal>for</literal>, <literal>while</literal>
        or <literal>until</literal> loop. If N is specified, break N levels.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>builtin</command>
       </para>
      </entry>
      <entry>
<screen>builtin [shell-builtin [arg ...]]</screen>
       <para>
        Run a shell builtin. This is useful when you wish to rename a shell
        builtin to be a function, but need the functionality of the builtin
        within the function itself.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>caller</command>
       </para>
      </entry>
      <entry>
<screen>caller [EXPR]</screen>
       <para>
        Returns the context of the current subroutine call. Without
        <replaceable>EXPR</replaceable>, returns <literal>$line
        $filename</literal>. With <replaceable>EXPR</replaceable>, returns
        <literal>$line $subroutine $filename</literal>; this extra
        information can be used to provide a stack trace.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>case</command>
       </para>
      </entry>
      <entry>
<screen>case WORD in [PATTERN [| PATTERN] [COMMANDS;;] ... esac</screen>
       <para>
        Selectively execute <replaceable>COMMANDS</replaceable> based upon
        <replaceable>WORD</replaceable> matching
        <replaceable>PATTERN</replaceable>. The `|' is used to separate
        multiple patterns.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>cd</command>
       </para>
      </entry>
      <entry>
<screen>cd [-L|-P] [dir]</screen>
       <para>
        Change the current directory to DIR.
<!--The variable
                  <envar>$HOME</envar> is the default DIR. The variable
                  <envar>CDPATH</envar> defines the search path for the
                directory containing DIR. Alternative directory names in
                CDPATH are separated by a colon (:). A null directory
                name is the same as the current directory, i.e. `.'. If
                DIR begins with a slash (/), then CDPATH is not used. If
                the directory is not found, and the shell option
                `cdable_vars' is set, then try the word as a variable
                name. If that variable has a value, then cd to the value
                of that variable. The -P option says to use the physical
                directory structure instead of following symbolic links;
                the -L option forces symbolic links to be
                followed.-->
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>command</command>
       </para>
      </entry>
      <entry>
<screen>command [-pVv]
command [arg ...]</screen>
       <para>
        Runs <replaceable>COMMAND</replaceable> with
        <replaceable>ARGS</replaceable> ignoring shell functions. If you
        have a shell function called `ls', and you wish to call the command
        `ls', you can say "command ls". If the -p option is given, a default
        value is used for PATH that is guaranteed to find all of the
        standard utilities. If the -V or -v option is given, a string is
        printed describing COMMAND. The -V option produces a more verbose
        description.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>compgen</command>
       </para>
      </entry>
      <entry>
<screen>compgen [-abcdefgjksuv] [-o option] [-A action]
  [-G globpat] [-W wordlist] [-P prefix]
  [-S suffix] [-X filterpat] [-F function]
  [-C command] [WORD]</screen>
       <para>
        Display the possible completions depending on the options. Intended
        to be used from within a shell function generating possible
        completions. If the optional <replaceable>WORD</replaceable>
        argument is supplied, matches against
        <replaceable>WORD</replaceable> are generated.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>complete</command>
       </para>
      </entry>
      <entry>
<screen>complete [-abcdefgjksuv] [-pr] [-o option]
   [-A action] [-G globpat] [-W wordlist] [-P prefix]
   [-S suffix] [-X filterpat] [-F function] [-C command]
   [name ...]</screen>
       <para>
        For each <replaceable>NAME</replaceable>, specify how arguments are
        to be completed. If the <option>-p</option> option is supplied, or
        if no options are supplied, existing completion specifications are
        printed in a way that allows them to be reused as input. The
        <option>-r</option> option removes a completion specification for
        each <replaceable>NAME</replaceable>, or, if no
        <replaceable>NAME</replaceable>s are supplied, all completion
        specifications.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>continue</command>
       </para>
      </entry>
      <entry>
<screen>continue [N]</screen>
       <para>
        Resume the next iteration of the enclosing FOR, WHILE or UNTIL loop.
        If <replaceable>N</replaceable> is specified, resume at the
        <replaceable>N</replaceable>-th enclosing loop.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>declare</command>
       </para>
      </entry>
      <entry>
<screen>declare [-afFirtx] [-p] [name[=value] ...]</screen>
       <para>
        Declare variables and/or give them attributes. If no
        <replaceable>NAME</replaceable>s are given, then display the values
        of variables instead. The <option>-p</option> option will display
        the attributes and values of each <replaceable>NAME</replaceable>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>dirs</command>
       </para>
      </entry>
      <entry>
<screen>dirs [-clpv] [+N] [-N]</screen>
       <para>
        Display the list of currently remembered directories. Directories
        find their way onto the list with the <command>pushd</command>
        command; you can get back up through the list with the
        <command>popd</command> command.
       </para>
       <para/>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>disown</command>
       </para>
      </entry>
      <entry>
<screen>disown [-h] [-ar] [JOBSPEC ...]</screen>
       <para>
        By default, removes each <replaceable>JOBSPEC</replaceable> argument
        from the table of active jobs. If the <option>-h</option> option is
        given, the job is not removed from the table, but is marked so that
        SIGHUP is not sent to the job if the shell receives a SIGHUP. The
        <option>-a</option> option, when <replaceable>JOBSPEC</replaceable>
        is not supplied, means to remove all jobs from the job table; the
        <option>-r</option> option means to remove only running jobs.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>echo</command>
       </para>
      </entry>
      <entry>
<screen>echo [-neE] [arg ...]</screen>
       <para>
        Output the ARGs. If -n is specified, the trailing newline is
        suppressed. If the -e option is given, interpretation of the
        following backslash-escaped characters is turned on:
       </para>
       <simplelist>
        <member><literal>\a</literal> (alert, bell)</member>
        <member><literal>\b</literal> (backspace)</member>
        <member><literal>\c</literal> (suppress trailing newline)</member>
        <member><literal>\E</literal> (escape character)</member>
        <member><literal>\f</literal> (form feed)</member>
        <member><literal>\n</literal> (new line)</member>
        <member><literal>\r</literal> (carriage return)</member>
        <member><literal>\t</literal> (horizontal tab)</member>
        <member><literal>\v</literal> (vertical tab)</member>
        <member><literal>\\</literal> (backslash)</member>
        <member><literal>\0nnn</literal> (the character whose ASCII code is NNN (octal).  NNN can be
                0 to 3 octal digits)</member>
       </simplelist>
       <para>
        You can turn off the interpretation of the above characters with the
        <option>-E</option> option.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>enable</command>
       </para>
      </entry>
      <entry>
<screen>enable [-pnds] [-a] [-f filename] [name...]</screen>
       <para>
        Enable and disable builtin shell commands. This allows you to use a
        disk command which has the same name as a shell builtin without
        specifying a full pathname. If <option>-n</option> is used, the
        <replaceable>NAME</replaceable>s become disabled; otherwise
        <replaceable>NAME</replaceable>s are enabled. For example, to use
        the <command>test</command> found in <envar>$PATH</envar> instead of
        the shell builtin version, type <command>enable</command> <option>-n
        test</option>. On systems supporting dynamic loading, the
        <option>-f</option> option may be used to load new builtins from the
        shared object <replaceable>FILENAME</replaceable>. The
        <option>-d</option> option will delete a builtin previously loaded
        with <option>-f</option>. If no non-option names are given, or the
        <option>-p</option> option is supplied, a list of builtins is
        printed. The <option>-a</option> option means to print every builtin
        with an indication of whether or not it is enabled. The
        <option>-s</option> option restricts the output to the POSIX.2
        `special' builtins. The <option>-n</option> option displays a list
        of all disabled builtins.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>eval</command>
       </para>
      </entry>
      <entry>
<screen>eval [ARG ...]</screen>
       <para>
        Read <replaceable>ARG</replaceable>s as input to the shell and
        execute the resulting command(s).
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>exec</command>
       </para>
      </entry>
      <entry>
<screen>exec [-cl] [-a name] file [redirection ...]</screen>
       <para>
        Exec <replaceable>FILE</replaceable>, replacing this shell with the
        specified program. If <replaceable>FILE</replaceable> is not
        specified, the redirections take effect in this shell. If the first
        argument is <option>-l</option>, then place a dash in the zeroth arg
        passed to <replaceable>FILE</replaceable>, as login does. If the
        <option>-c</option> option is supplied, FILE is executed with a null
        environment. The <option>-a</option> option means to make set
        argv[0] of the executed process to <replaceable>NAME</replaceable>.
        If the file cannot be executed and the shell is not interactive,
        then the shell exits, unless the shell option
        <option>execfail</option> is set.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>exit</command>
       </para>
      </entry>
      <entry>
<screen>exit [N]</screen>
       <para>
        Exit the shell with a status of <replaceable>N</replaceable>. If
        <replaceable>N</replaceable> is omitted, the exit status is that of
        the last command executed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>export</command>
       </para>
      </entry>
      <entry>
<screen>export [-nf] [NAME[=value] ...]
export -p</screen>
       <para>
        <replaceable>NAME</replaceable>s are marked for automatic export to
        the environment of subsequently executed commands. If the
        <option>-f</option> option is given, the
        <replaceable>NAME</replaceable>s refer to functions. If no
        <replaceable>NAME</replaceable>s are given, or if
        <option>-p</option> is given, a list of all names that are exported
        in this shell is printed. An argument of <option>-n</option> says to
        remove the export property from subsequent
        <replaceable>NAME</replaceable>s. An argument of <option>--</option>
        disables further option processing.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>false</command>
       </para>
      </entry>
      <entry>
<screen>false</screen>
       <para>
        Return an unsuccessful result.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>fc</command>
       </para>
      </entry>
      <entry>
<screen>fc [-e ename] [-nlr] [FIRST] [LAST]
fc -s [pat=rep] [cmd]</screen>
       <para>
        fc is used to list or edit and re-execute commands from the history
        list. <replaceable>FIRST</replaceable> and
        <replaceable>LAST</replaceable> can be numbers specifying the range,
        or <replaceable>FIRST</replaceable> can be a string, which means the
        most recent command beginning with that string.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>fg</command>
       </para>
      </entry>
      <entry>
<screen>fg [JOB_SPEC]</screen>
       <para>
        Place <replaceable>JOB_SPEC</replaceable> in the foreground, and
        make it the current job. If <replaceable>JOB_SPEC</replaceable> is
        not present, the shell's notion of the current job is used.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>for</command>
       </para>
      </entry>
      <entry>
<screen>for NAME [in WORDS ... ;] do COMMANDS; done</screen>
       <para>
        The <command>for</command> loop executes a sequence of commands for
        each member in a list of items. If <literal>in WORDS ...;</literal>
        is not present, then <literal>in "$@"</literal> is assumed. For each
        element in <replaceable>WORDS</replaceable>,
        <replaceable>NAME</replaceable> is set to that element, and the
        <replaceable>COMMANDS</replaceable> are executed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>function</command>
       </para>
      </entry>
      <entry>
<screen>function NAME { COMMANDS ; }
function NAME () { COMMANDS ; }</screen>
       <para>
        Create a simple command invoked by <replaceable>NAME</replaceable>
        which runs <replaceable>COMMANDS</replaceable>. Arguments on the
        command line along with <replaceable>NAME</replaceable> are passed
        to the function as <option>$0</option> .. <option>$n</option>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>getopts</command>
       </para>
      </entry>
      <entry>
<screen>getopts OPTSTRING NAME [arg]</screen>
       <para>
        Getopts is used by shell procedures to parse positional parameters.
       </para>
       <para/>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>hash</command>
       </para>
      </entry>
      <entry>
<screen>hash [-lr] [-p PATHNAME] [-dt] [NAME...]</screen>
       <para>
        For each <replaceable>NAME</replaceable>, the full pathname of the
        command is determined and remembered. If the <option>-p</option>
        option is supplied, <replaceable>PATHNAME</replaceable> is used as
        the full pathname of <replaceable>NAME</replaceable>, and no path
        search is performed. The <option>-r</option> option causes the shell
        to forget all remembered locations. The <option>-d</option> option
        causes the shell to forget the remembered location of each
        <replaceable>NAME</replaceable>. If the <option>-t</option> option
        is supplied the full pathname to which each
        <replaceable>NAME</replaceable> corresponds is printed. If multiple
        <replaceable>NAME</replaceable> arguments are supplied with
        <option>-t</option>, the <replaceable>NAME</replaceable> is printed
        before the hashed full pathname. The <option>-l</option> option
        causes output to be displayed in a format that may be reused as
        input. If no arguments are given, information about remembered
        commands is displayed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>history</command>
       </para>
      </entry>
      <entry>
<screen>history [-c] [-d OFFSET] [n]
history -ps arg [arg...]
history -awrm [filename]</screen>
       <para>
        Display the history list with line numbers. Lines listed with with a
        <literal>*</literal> have been modified. Argument of
        <replaceable>N</replaceable> says to list only the last
        <replaceable>N</replaceable> lines. The <option>-c</option> option
        causes the history list to be cleared by deleting all of the
        entries. The <option>-d</option> option deletes the history entry at
        offset <replaceable>OFFSET</replaceable>. The <option>-w</option>
        option writes out the current history to the history file;
        <option>-r</option> means to read the file and append the contents
        to the history list instead. <option>-a</option> means to append
        history lines from this session to the history file. Argument
        <option>-n</option> means to read all history lines not already read
        from the history file and append them to the history list.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>jobs</command>
       </para>
      </entry>
      <entry>
<screen>jobs [-lnprs] [JOBSPEC ...]
job -x COMMAND [ARGS]</screen>
       <para>
        Lists the active jobs. The <option>-l</option> option lists process
        id's in addition to the normal information; the <option>-p</option>
        option lists process id's only. If <option>-n</option> is given,
        only processes that have changed status since the last notification
        are printed. <replaceable>JOBSPEC</replaceable> restricts output to
        that job. The <option>-r</option> and <option>-s</option> options
        restrict output to running and stopped jobs only, respectively.
        Without options, the status of all active jobs is printed. If
        <option>-x</option> is given, <replaceable>COMMAND</replaceable> is
        run after all job specifications that appear in
        <replaceable>ARGS</replaceable> have been replaced with the process
        ID of that job's process group leader.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>kill</command>
       </para>
      </entry>
      <entry>
<screen>kill [-s sigspec | -n signum | -sigspec] pid | JOBSPEC ...
kill -l [sigspec]</screen>
       <para>
        Send the processes named by PID (or
        <replaceable>JOBSPEC</replaceable>) the signal SIGSPEC. If SIGSPEC
        is not present, then SIGTERM is assumed. An argument of
        <option>-l</option> lists the signal names; if arguments follow
        <option>-l</option> they are assumed to be signal numbers for which
        names should be listed. Kill is a shell builtin for two reasons: it
        allows job IDs to be used instead of process IDs, and, if you have
        reached the limit on processes that you can create, you don't have
        to start a process to kill another one.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>let</command>
       </para>
      </entry>
      <entry>
<screen>let ARG [ARG ...]</screen>
       <para>
        Each <replaceable>ARG</replaceable> is a mathematical expression to
        be evaluated. Evaluation is done in fixed-width integers with no
        check for overflow, though division by 0 is trapped and flagged as
        an error. The following list of operators is grouped into levels of
        equal-precedence operators. The levels are listed in order of
        decreasing precedence.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>local</command>
       </para>
      </entry>
      <entry>
<screen>local NAME[=VALUE] ...</screen>
       <para>
        Create a local variable called <replaceable>NAME</replaceable>, and
        give it <replaceable>VALUE</replaceable>. <command>local</command>
        can only be used within a function; it makes the variable
        <replaceable>NAME</replaceable> have a visible scope restricted to
        that function and its children.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>logout</command>
       </para>
      </entry>
      <entry>
<screen>logout</screen>
       <para>
        Logout of a login shell.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>popd</command>
       </para>
      </entry>
      <entry>
<screen>popd [+N | -N] [-n]</screen>
       <para>
        Removes entries from the directory stack. With no arguments, removes
        the top directory from the stack, and cd's to the new top directory.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>printf</command>
       </para>
      </entry>
      <entry>
<screen>printf [-v var] format [ARGUMENTS]</screen>
       <para>
        printf formats and prints <replaceable>ARGUMENTS</replaceable> under
        control of the <replaceable>FORMAT</replaceable>.
        <replaceable>FORMAT</replaceable> is a character string which
        contains three types of objects: plain characters, which are simply
        copied to standard output, character escape sequences which are
        converted and copied to the standard output, and format
        specifications, each of which causes printing of the next successive
        argument. In addition to the standard printf(1) formats,
        <literal>%b</literal> means to expand backslash escape sequences in
        the corresponding argument, and <literal>%q</literal> means to quote
        the argument in a way that can be reused as shell input. If the
        <option>-v</option> option is supplied, the output is placed into
        the value of the shell variable VAR rather than being sent to the
        standard output.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>pushd</command>
       </para>
      </entry>
      <entry>
<screen>pushd [dir | +N | -N] [-n]</screen>
       <para>
        Adds a directory to the top of the directory stack, or rotates the
        stack, making the new top of the stack the current working
        directory. With no arguments, exchanges the top two directories.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>pwd</command>
       </para>
      </entry>
      <entry>
<screen>pwd [-LP]</screen>
       <para>
        Print the current working directory. With the <option>-P</option>
        option, <command>pwd</command> prints the physical directory,
        without any symbolic links; the <option>-L</option> option makes
        <command>pwd</command> follow symbolic links.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>read</command>
       </para>
      </entry>
      <entry>
<screen>read [-ers] [-u fd] [-t timeout] [-p prompt] [-a array] [-n nchars] [-d delim] [NAME ...]</screen>
       <para>
        The given <replaceable>NAME</replaceable>s are marked readonly and
        the values of these <replaceable>NAME</replaceable>s may not be
        changed by subsequent assignment. If the <option>-f</option> option
        is given, then functions corresponding to the NAMEs are so marked.
        If no arguments are given, or if <option>-p</option> is given, a
        list of all readonly names is printed. The <option>-a</option>
        option means to treat each NAME as an array variable. An argument of
        <option>--</option> disables further option processing.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>readonly</command>
       </para>
      </entry>
      <entry>
<screen>readonly [-af] [NAME[=VALUE] ...]
readonly -p</screen>
       <para>
        The given <replaceable>NAME</replaceable>s are marked readonly and
        the values of these <replaceable>NAME</replaceable>s may not be
        changed by subsequent assignment. If the <option>-f</option> option
        is given, then functions corresponding to the
        <replaceable>NAME</replaceable>s are so marked. If no arguments are
        given, or if <option>-p</option> is given, a list of all readonly
        names is printed. The <option>-a</option> option means to treat each
        <replaceable>NAME</replaceable> as an array variable. An argument of
        <option>--</option> disables further option processing.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>return</command>
       </para>
      </entry>
      <entry>
<screen>return [N]</screen>
       <para>
        Causes a function to exit with the return value specified by
        <replaceable>N</replaceable>. If <replaceable>N</replaceable> is
        omitted, the return status is that of the last command.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>select</command>
       </para>
      </entry>
      <entry>
<screen>select NAME [in WORDS ... ;] do COMMANDS; done</screen>
       <para>
        The <replaceable>WORDS</replaceable> are expanded, generating a list
        of words. The set of expanded words is printed on the standard
        error, each preceded by a number. If <literal>in WORDS</literal> is
        not present, <literal>in "$@"</literal> is assumed. The
        <envar>PS3</envar> prompt is then displayed and a line read from the
        standard input. If the line consists of the number corresponding to
        one of the displayed words, then <replaceable>NAME</replaceable> is
        set to that word. If the line is empty,
        <replaceable>WORDS</replaceable> and the prompt are redisplayed. If
        EOF is read, the command completes. Any other value read causes
        <replaceable>NAME</replaceable> to be set to null. The line read is
        saved in the variable <replaceable>REPLY</replaceable>.
        <replaceable>COMMANDS</replaceable> are executed after each
        selection until a break command is executed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>set</command>
       </para>
      </entry>
      <entry>
<screen>set [--abefhkmnptuvxBCHP] [-o OPTION] [ARG...]</screen>
       <para>
        Sets internal shell options.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>shift</command>
       </para>
      </entry>
      <entry>
<screen>shift [n]</screen>
       <para>
        The positional parameters from <literal>$N+1 ...</literal> are
        renamed to <literal>$1 ...</literal> If <replaceable>N</replaceable>
        is not given, it is assumed to be 1.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>shopt</command>
       </para>
      </entry>
      <entry>
<screen>shopt [-pqsu] [-o long-option] OPTNAME [OPTNAME...]</screen>
       <para>
        Toggle the values of variables controlling optional behavior. The
        <option>-s</option> flag means to enable (set) each
        <replaceable>OPTNAME</replaceable>; the <option>-u</option> flag
        unsets each <replaceable>OPTNAME</replaceable>. The
        <option>-q</option> flag suppresses output; the exit status
        indicates whether each <replaceable>OPTNAME</replaceable> is set or
        unset. The <option>-o</option> option restricts the
        <replaceable>OPTNAME</replaceable>s to those defined for use with
        <literal>set -o</literal>. With no options, or with the
        <option>-p</option> option, a list of all settable options is
        displayed, with an indication of whether or not each is set.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>source</command>
       </para>
      </entry>
      <entry>
<screen>source FILENAME [ARGS]</screen>
       <para>
        Read and execute commands from <replaceable>FILENAME</replaceable>
        and return. The pathnames in <envar>$PATH</envar> are used to find
        the directory containing <replaceable>FILENAME</replaceable>. If any
        <replaceable>ARGS</replaceable> are supplied, they become the
        positional parameters when <replaceable>FILENAME</replaceable> is
        executed.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>suspend</command>
       </para>
      </entry>
      <entry>
<screen>suspend [-f]</screen>
       <para>
        Suspend the execution of this shell until it receives a SIGCONT
        signal. The <option>-f</option> if specified says not to complain
        about this being a login shell if it is; just suspend anyway.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>test</command>
       </para>
      </entry>
      <entry>
<screen>test [expr]</screen>
       <para>
        Exits with a status of 0 (true) or 1 (false) depending on the
        evaluation of <replaceable>EXPR</replaceable>. Expressions may be
        unary or binary. Unary expressions are often used to examine the
        status of a file. There are string operators as well, and numeric
        comparison operators.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>time</command>
       </para>
      </entry>
      <entry>
<screen>time [-p] PIPELINE</screen>
       <para>
        Execute <replaceable>PIPELINE</replaceable> and print a summary of
        the real time, user CPU time, and system CPU time spent executing
        <replaceable>PIPELINE</replaceable> when it terminates. The return
        status is the return status of PIPELINE. The <option>-p</option>
        option prints the timing summary in a slightly different format.
        This uses the value of the TIMEFORMAT variable as the output format.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>times</command>
       </para>
      </entry>
      <entry>
<screen>times</screen>
       <para>
        Print the accumulated user and system times for processes run from
        the shell.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>trap</command>
       </para>
      </entry>
      <entry>
<screen>trap [-lp] [ARG SIGNAL_SPEC ...]</screen>
       <para>
        The command <replaceable>ARG</replaceable> is to be read and
        executed when the shell receives signal(s)
        <replaceable>SIGNAL_SPEC</replaceable>. If
        <replaceable>ARG</replaceable> is absent (and a single
        <replaceable>SIGNAL_SPEC</replaceable> is supplied) or
        <option>-</option>, each specified signal is reset to its original
        value. If <replaceable>ARG</replaceable> is the null string each
        <replaceable>SIGNAL_SPEC</replaceable> is ignored by the shell and
        by the commands it invokes. If a
        <replaceable>SIGNAL_SPEC</replaceable> is EXIT (0) the command ARG
        is executed on exit from the shell. If a
        <replaceable>SIGNAL_SPEC</replaceable> is DEBUG,
        <replaceable>ARG</replaceable> is executed after every simple
        command. If the <option>-p</option> option is supplied then the trap
        commands associated with each <replaceable>SIGNAL_SPEC</replaceable>
        are displayed. If no arguments are supplied or if only
        <option>-p</option> is given, trap prints the list of commands
        associated with each signal. Each
        <replaceable>SIGNAL_SPEC</replaceable> is either a signal name in
        <filename>signal.h</filename> or a signal number. Signal names are
        case insensitive and the SIG prefix is optional. <literal>trap
        -l</literal> prints a list of signal names and their corresponding
        numbers. Note that a signal can be sent to the shell with
        <literal>kill -signal $$</literal>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>true</command>
       </para>
      </entry>
      <entry>
<screen>true</screen>
       <para>
        Return a successful result.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>type</command>
       </para>
      </entry>
      <entry>
<screen>type [-afptP] NAME [NAME ...]</screen>
<!--<para>For each <replaceable>NAME</replaceable>, indicate
                how it would be interpreted if used as a command
                name.</para>
              <para>If the <option>-t</option> option is used,
                  <command>type</command> outputs a single word which is
                one of <literal>alias</literal>,
                  <literal>keyword</literal>,
                  <literal>function</literal>, <literal>file</literal>
                or nothing, if <replaceable>NAME</replaceable> is an
                alias, shell reserved word, shell function, shell
                builtin, disk file, or unfound, respectively. </para>-->
       <para>
        Obsolete, see <command>declare</command>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>typeset</command>
       </para>
      </entry>
      <entry>
<screen>typeset [-afFirtx] [-p] name[=value]</screen>
       <para>
        Obsolete, see <command>declare</command>.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>ulimit</command>
       </para>
      </entry>
      <entry>
<screen>ulimit [-SHacdfilmnpqstuvx] [limit</screen>
       <para>
        Ulimit provides control over the resources available to processes
        started by the shell, on systems that allow such control.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>umask</command>
       </para>
      </entry>
      <entry>
<screen>umask [-p] [-S] [MODE]</screen>
       <para>
        The user file-creation mask is set to
        <replaceable>MODE</replaceable>. If <replaceable>MODE</replaceable>
        is omitted, or if <option>-S</option> is supplied, the current value
        of the mask is printed. The <option>-S</option> option makes the
        output symbolic; otherwise an octal number is output. If
        <option>-p</option> is supplied, and <replaceable>MODE</replaceable>
        is omitted, the output is in a form that may be used as input. If
        <replaceable>MODE</replaceable> begins with a digit, it is
        interpreted as an octal number, otherwise it is a symbolic mode
        string like that accepted by chmod(1).
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>unalias</command>
       </para>
      </entry>
      <entry>
<screen>unalias [-a] NAME [NAME ...]</screen>
       <para>
        Remove <replaceable>NAME</replaceable>s from the list of defined
        aliases. If the <option>-a</option> option is given, then remove all
        alias definitions.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>unset</command>
       </para>
      </entry>
      <entry>
<screen>unset [-f] [-v] [NAME ...]</screen>
       <para>
        For each <replaceable>NAME</replaceable>, remove the corresponding
        variable or function. Given the <option>-v</option>, unset will only
        act on variables. Given the <option>-f</option> flag, unset will
        only act on functions. With neither flag, unset first tries to unset
        a variable. If that fails, it then tries to unset a function. Some
        variables cannot be unset; also see readonly.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>until</command>
       </para>
      </entry>
      <entry>
<screen>until COMMANDS; do COMMANDS; done</screen>
       <para>
        Expand and execute <replaceable>COMMANDS</replaceable> as long as
        the final command in the <command>until</command>
        <replaceable>COMMANDS</replaceable> has an exit status which is not
        zero.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>wait</command>
       </para>
      </entry>
      <entry>
<screen>wait [N]</screen>
       <para>
        Wait for the specified process and report its termination status. If
        <replaceable>N</replaceable> is not given, all currently active
        child processes are waited for, and the return code is zero.
        <replaceable>N</replaceable> may be a process ID or a job
        specification; if a job spec is given, all processes in the job's
        pipeline are waited for.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <command>while</command>
       </para>
      </entry>
      <entry>
<screen>while COMMANDS; do COMMANDS; done</screen>
       <para>
        Expand and execute <replaceable>COMMANDS</replaceable> as long as
        the final command in the <command>while</command>
        <replaceable>COMMANDS</replaceable> has an exit status of zero.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
</refentry>
