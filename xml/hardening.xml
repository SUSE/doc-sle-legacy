<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE book
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>
<!--
FIXME: 

* new rationale/ABOUT:
  - encourage investigative hardening
  - more foxus on method and strategy - ask questions first, answer when question is sane.
  - add cyclic restart of procedure as a main argument: security as a process, not a state
* remove occurrences of EAL4+
* add chapter about reference to Common Criteria
  - evaluated configuration
  - value-add by evaluation
* fine-tuning, removal of some chapters
* sle11-sp2 specifics
  - pseudo file systems: debugfs, tmpfs, procfs, sysfs
  - AppArmor


-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:lang="en" xml:id="book-hardening">
 <title><emphasis>Security and Hardening Guide</emphasis></title>
 <titleabbrev>Security and Hardening</titleabbrev>
 <info><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber><date>
<?dbtimestamp format="B d, Y"?></date>
  <xi:include href="common_copyright_gfdl.xml" parse="xml"/>
 </info>
 <preface xml:id="pre-hardening-about">
  <title>About This Guide</title>
  <info/>
  <para>
   The &productname; Security and Hardening Guide deals with the particulars of
   installation and set up of a secure &productname; server and additional
   post-install processes required to further secure and harden that
   installation. Security and hardening elements and procedures are best
   applied to a server both during installation and post-installation and aim
   to improve the fitness of the system for the purposes demanded by its
   administrator. The understanding of this guide is to support the
   administrator with the security related choices and decisions that the
   administrator will have to make. The individual steps and procedures are to
   be seen as a proposal, not as something that ultimately needs to be done. In
   many cases, this guide will even force the reader to discuss the usefulness
   towards the objectives that the measures may provide - or not.
  </para>
  <para>
   Obviously, the objective is to improve the security value of the system.
   Definitions about the meaning of the term security vary, but we want to
   settle on one that is both simple, abstract and therefore possibly true for
   most IT solutions:
  </para>
  <para>
   <emphasis>A good system does what it is expected to do, and it does it
   well.</emphasis>
  </para>
  <para>
   <emphasis>A secure system is a good system that does nothing
   else.</emphasis>
  </para>
  <para>
   The part with <quote>nothing else</quote> is certainly within the focus of
   this guide. The Linux system is architected in such way that security
   policies are enforced. These policies are (fairly generic and incomplete
   list):
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     DAC - Discretionary Access Control: File and directory permissions as we
     know them: <command>chmod</command>, <command>chown</command>
    </para>
   </listitem>
   <listitem>
    <para>
     privileged ports: TCP and UDP ports 0-1023 as well as raw sockets are only
     to the super user
    </para>
   </listitem>
   <listitem>
    <para>
     other privileged operations: The loading of kernel modules, configuration
     of network interfaces, exclusively all security relevant settings of the
     Linux kernel, are operations that can only be done by the root user, eg.
     the user with the numeric userID 0.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Attacking a system means to attempt to overcome (eg. circumvent or break)
   these privilege boundaries in a way that the administrator of the system or
   the programmer of the corresponding subsystem has not taken into account.
  </para>
  <para>
   A <quote>hardened</quote> system raises the bar for the attacker to make the
   system do what <quote>he</quote> wants by reducing the area that the system
   exposes to the attacker (often called attack surface), and by mitigating the
   risk that exists for the system if a part of it fails to handle untrusted
   input safely, thereby allowing actions within the context of this part of
   the system that were not intended by the programmer.
  </para>
  <para>
   Security is about decisions, and whenever security is in (apparent)
   opposition to function, these decisions become trade-offs. While it can be
   argued that all systems should be set up to be as securely as possible, some
   levels of security and hardening may very well be overkill in some cases.
   Each system's operational environment has its own security requirements
   derived from business drivers or regulatory compliance mandates (e.g. SOX,
   HIPAA, PCIDSS, etc.) and an effective business requirements analysis should
   be performed in order to determine the right level of security and hardening
   to be applied to a server or defined as part of a baseline server build.
  </para>
  <para>
   As a final note before we begin: You may encounter individual requirements
   in regulatory compliance frameworks that may not make sense from a technical
   perspective, or they do not serve the purpose of improving security. It may
   be a productive attitude to simply implement what is required, but whenever
   there is a contradiction to security, an informed discussion in the
   documentation serves the overall purpose of your regulative compliance
   framework much more than blindly obeying the specifications. Please feel
   encouraged to dispute list items that you think are counterproductive.
  </para>
  <section xml:id="pre-hardening-about-assumptions">
   <title>Assumptions and Scope</title>
<!-- 
   <note>
    <para>
     As we go through this guide – we derive base assumptions from those
     provided from the EAL configuration. However, very few real-world
     environments provide for such a risk-less design constraint set. As
     such it can be considered that the EAL environment includes a generally
     'cooperative' usership with medium attack expertise and potential for
     individual users, and that the system runs physically protected in an
     untrusted network that can be considered hostile.
    </para>
   </note>
-->
   <para>
    While in most cases in this document reference will be made to a single
    server target or host, the scope can generally be applied to more than one
    machine. We generally assume that the security target can cover one or more
    systems running &productname;.
   </para>
   <para>
    We explicitly do <emphasis>not</emphasis> make any assumtions about the
    hostility of the network that the systems are connected to, or the
    cooperative nature of the users that leverage the services provided by the
    systems.
   </para>
   <para>
    In turn, this means that you partially define your context on your own when
    reading through this document. You will need to broaden the meaning of
    individual portions to adopt it to your environment. In some cases, such as
    the use case of a server that is exposed to the Internet, this document may
    even be insufficient or incomplete; however, it may still serve as a good
    starting point on your journey towards an increased level of confidence
    that your system will behave like you want it to.
   </para>
   <para>
    About trust: Trust relationships exist among all systems that participate
    in networked transactions. Basically, the trust relationship between the
    persons that use the systems is transported across these systems. The chain
    that is formed by your trust relationships is only as strong as the weakest
    link. If we further assume that not all your problems are between keyboards
    and chairs, then it is up to the designer of the network of systems to
    watchguard the trust relationships. It is good practice to graphically
    visualize the trust relationships with the services in a schematic overview
    or map of your network. Generally, it is up to the owner of a resource to
    enforce the policies imposed on that resource; this would usually be the
    server that provides the resource. The client that opens a connection to
    request the resource can only be made responsible for the actions that it
    performs. This refers to the action of opening the connection to start
    with, but to nothing else as such.
   </para>
   <para>
    The case of hostile users is special and unique: The Human Resources
    department may be able to solve some of your security problems in your
    computing environment at least as well as some technical measures can.
    Please make sure that the necessary regulations in your environment fit
    your needs, and that they back your intentions instead of obstructing them
    if you need to work around a missing support from your HR department (and
    your management).
   </para>
   <para>
    Persons that have administrative privileges on a system are automatically
    considered trusted.
   </para>
   <para>
    A Linux system - without any additional security frameworks such as SELinux
    - is a single level security system: From a security policy perspective
    there is only the superuser (root) and non-privileged users. System users
    are non-root userIDs that have access to files specific to their purpose.
    All system user identities are inaccessible for local or networked users!)
    The separation of (systems-) administrative duties is complicated by this
    simplicity. Some tools however help: Make use of sudo(8) for administrative
    tasks, but be aware that once the privilege boundary is crossed, a program
    running with root privileges does not enforce any file access policies for
    non-privileged users any more. vi(1) that runs as root can read and write
    to any file in the system.
   </para>
   <para>
    Another tool to mitigate the risk of the abuse or accidential misuse of
    administrative privileges is Novell's Privileged User Manager product. More
    information is available here:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="http://www.novell.com/products/privilegedusermanager/index.html"/>
     </para>
    </listitem>
   </itemizedlist>
<!-- 
    It is not intended to
    address the needs of an Internet-connected server, or the case where
    services are to be provided to potentially hostile users. Further
    network security design and requirements would be required in such an
    instance and cover multi-layered firewalls / DMZ setups / etc.
   </para>

   <para>
    It is also assumed that all network cabling <emphasis>must</emphasis> be
    secured and protected from tapping and any other modifications. A secure
    network is assumed for this configuration because detailed examination
    of cryptographic protocols is beyond the scope of this document.
   </para>

   <note>
    <para>
     Note: Again – these assumptions are a bit <quote>idilic</quote>.
     Evaluation of the threat environment would define the need for
     crypto-supported services. Also a tap-safe network infrastructure might
     be a requirement based on the type of threats defined.
    </para>
   </note>
-->
   <para>
    Physical security of the server is another assumption made here, where the
    server is protected from theft and manipulation by unauthorized persons. A
    common sobering thought amongst security professionals is the
    <quote>ten-second Denial of Service</quote> simply unplug the wires and
    reboot the server. Physical security must be insured and physical access
    must be controlled. Otherwise, all assumtions about at least the
    avaliability of these systems are void.
   </para>
   <note>
    <title>Cryptography</title>
    <para>
     The use of cryptography to protect the confidentiality of transactions
     with the services that your system provides is generally encouraged. The
     need to implement crypto-enhancements is strongly dependent on the
     operational environments of all participating systems. Please keep in mind
     that you need to verify all of the possible security benefits that
     cryptography can provide, for <quote>all</quote> of your services, and
     that these benefits are not delivered automatically just by turning on the
     <quote>encrypt</quote> option of your service (if you can enjoy the
     idyllic situation where encryption is available as a button to check):
    </para>
    <variablelist>
     <varlistentry>
      <term>Confidentiality</term>
      <listitem>
       <para>
        Protection against reading the <quote>content</quote>of a transaction
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Privacy</term>
      <listitem>
       <para>
        Protection against knowing that a transaction exists, and some
        properties that it may have, such as size, identities of involved
        parties, their presence, ...
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Integrity</term>
      <listitem>
       <para>
        Protection against alteration of content. Be aware that cryptography
        does not automatically provide this kind of protection.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Authenticity</term>
      <listitem>
       <para>
        Protection against identity fraud. Cryptogrphy that does not know about
        identities of participating entities cannot deliver this value. If an
        ecrypted data connection to your server can articulate integrity, then
        the server <quote>may</quote> provide authenticity of the content, but
        the cryptographical part cannot.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Keep in mind that encryption of data for confidentiality purposes can
     merely reduce the size of the data to protect from the actual size to the
     size of the key that is used to encrypt the data. This results in a key
     exchange problem for encrypted transactions, and in a key management
     problem for encrypted data storage. Since data is (typically, there are
     exceptions!) processed in clear, you need your vault unlocked while data
     within is being worked with. The encryption of such data on the file
     system or block device layer helps against the theft of the system, but it
     doesn't help the confidentiality of the data while the system is running.
    </para>
   </note>
<!-- 
    Also, all components in the network such as routers,
    switches and hubs that are used for communication are assumed to pass
    the user data reliably and without modification. Translations on
    protocol elements (e.g. NAT) are allowed just as long as those
    modifications don't lead to situations where data or information is
    routed to something other than the intended recipient system. Also, be
    aware that data passed to another system leaves the control of the
    sending system; therefore the protection of that data against
    unauthorized access needs to be enforced by the receiving system.
    
    *DUH* This is no statement about the obligation of the server to guard the data and the policy! 
    -->
   <para>
    If you want to implement a consistent security policy covering multiple
    hosts on a network then organizational procedures <emphasis>must</emphasis>
    ensure that all those hosts can be trusted and are configured with
    compatible security configurations enforcing an organization wide security
    policy. Isolation of groups of systems that maintain data of the same trust
    domain can provide an adequate means of control; ultimately, the access
    controls to these systems, both for end users and for other systems, need
    to be carefully designed, configured, inspected and monitored.
   </para>
<!-- 
   <important>
    <para>
     If any connection is established with a system that is outsideof the
     customer's control, enforcement of security policies for information
     passed to that system is not possible. Systems outside of the customer
     realm of control should also be considered beyond the scope of this
     document – or at least the configuration prescribed.
    </para>
   </important>
-->
   <important>
    <para>
     Data can only be trusted to the degree that is assiciated with the domain
     where it comes from. If data leaves the domain in which security policies
     can be enforced, then this data should consequently be associated with the
     trust of the target domain. (This is the first facepalm paragraph of this
     guide. Do not stop fixing occurrences of failure and misconfiguration in
     your network - it pays off.)
    </para>
   </important>
   <para>
    For a review of industry best practices on security, the development of
    sound security processes, controls, development, reviews and audit
    practices and incident management, you can review a public RFC (request for
    comments). RFC2196 is the ongoing work of the world-wide community and
    individual security and process experts. You can review it online here:
    <link xlink:href="http://www.faqs.org/rfcs/rfc2196.html"/>. An RFC is an
    open and living document that invites "comments" and review". Enhancements
    and improvements are welcomed; you will find instructions on where to send
    those suggestions within the document itself.
   </para>
   <para>
    This guide provides initial guidance on how to set up and secure a
    &productname; installation but it is not intended to be the only
    information required for a system administrator to learn how to operate
    Linux securely. Assumptions are made within this guide that the reader has
    knowledge and understanding of operating security principles in general,
    and of Linux administrative commands and configuration options in
    particular. Upon reaching this section of the document, we believe that the
    willingness of the reader to learn can be safely assumed.
   </para>
<!-- It is strongly advised that a
    customer organization that wants to operate their systems in the
    resultant secure configurations have their administrators trained in
    operating system security principles, &sle; security functions,
    properties and configuration. SUSE has developed ATT (Advanced
    Technical Training) courses for &productname; security and advanced
    administration. Courses range from introductory to advanced and are the
    basis for two of the leading SUSE and industry Linux certifications,
    the Certified Linux Professional and the Certified Linux Engineer.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <ulink
       url="http://www.novell.com/training/certinfo/clp/roadmap_10.html"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <ulink
       url="http://www.novell.com/training/certinfo/cle/roadmap_10.html"/>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    A common security axiom is <quote>Trust ... No One!</quote> or
    <quote>trust only those who have something considerable to
    lose...</quote>. While it is important that every organization can trust
    their system administrators not to deliberately undermine the security
    of the system, we will cover system configuration, including audit
    functions, which can be used to make users accountable for their
    actions. However, it is necessary to point out that an administrator may
    be able to stop the audit subsystem and reconfigure it such that his
    actions no longer get audited. Well trained and trustworthy
    administrators are therefore a key element for the secure operation of
    the system.
   </para>

   <para>
    Much of the configuration information outlined in this guide is provided
    in compliance with the requirements defined for &suse; to acquire the
    EAL Common Criteria certifications and is information a system
    administrator should use when installing, configuring, and operating the
    system to meet certified levels of security. To get an understanding of
    the differing levels you can visit the Common Criteria website or for
    more succinct reference – wikipedia.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <ulink url="http://www.commoncriteriaportal.org/"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.commoncriteriaportal.org/"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://en.wikipedia.org/wiki/Common_Criteria"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <ulink url="http://www.commoncriteriaportal.org/"/>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    As a major portion of the hardened setup guidance has been placed here,
    and some has been modified, access to the original <quote>Common
    Criteria EAL4+ Evaluated Configuration Guide for &sls; on IBM
    Hardware</quote>” by Klaus Weidner can be found on the &productname;
    shipping DVD. You can find the package that contains the unedited
    version on the DVD in the /suse/noarch/ directory. The package name
    (which needs to be installed as part of the EAL criteria hardening) is
    <systemitem
     class="resource">certification-sles-ibm-eal4.rpm</systemitem>.
    Once installed, a pdf and other forms of the configuration guide can be
    found on the system in
    <filename>/usr/share/doc/packages/certification-sles-ibm-eal4/</filename>.
   </para>

   <para>
    You can also find a copy of this documentation in a variety of formats
    on the SUSE ftp site. You can also find different CAPP certification
    efforts (with different sponsors HP and IBM) from various &productname;
    versions 8, 9 and 10:
   </para>

   <para>
    <ulink
     url="ftp://anonymous@ftp.suse.com/pub/projects/security/CommonCriteria/"/>
   </para>

   <para>
    A final note of merit, the EAL 4+ (augmented) certification explicitly
    defines the hardware platform used to achieve the certification, and as
    such it could be argued that any variation on the hardware platform
    could ostensibly invalidate the certification itself. While this could
    be argued to the <quote>letter-of-the-law</quote>, the practical and
    pragmatic reality is that a CC EAL certification is referenced in the
    industry to provide a level of intrinsic <quote>trust</quote> for
    companies wishing to implement an operating system or technology. Minor
    modifications to the hardware reference platform should not be
    considered a risk.
   </para>

   <note>
    <para>
     Note: The specific hardware configuration constraint is merely due to
     the way the EAL certification process is run – sponsored by a 3rd
     party, as is the hardware.
    </para>
   </note>

   <para>
    As the EAL levels go up so do the intrinsic costs associated with
    garnering a particular level of certification for the vendor who makes
    the product. Upper level EAL certifications have real monetary costs in
    addition to considerable labor and research/design efforts. While it may
    be considered that an EAL 6 or 7 certification on an operating system
    would garner more revenue due to its demonstrated security capabilities,
    it isn't guaranteed nor even something most consumers would require.
    Most commercially available operating systems are rated at EAL 4 today,
    and very specialized OSes garner an EAL 5 or higher typically by
    extensive planning (from the start) and use security kernels
    designed for a specific purpose. Another commonly heard description of a
    <quote>secure system</quote> is one that is disconnected, powered-off,
    buried 10 feet underground and covered with cement... and of course, if
    followed, that system would be of very little value to anyone. System
    security and the <quote>usefulness</quote> of a particular system is a
    constant balancing act. Using sound and pragmatic logic to determine the
    value of the system and/or the data it protects or serves can help
    determine the level of system protections one should or even should
    <emphasis>not</emphasis> apply to it.
   </para>

-->
   <para>
    The guide contains <quote>Parts</quote>, <quote>Chapters</quote>,
    <quote>Sections</quote> and many examples. The <quote>Parts</quote> are a
    complete set of guidance and recommendations that can be used as a
    stand-alone reference within a specific context. For example, Part 1
    contains a reference to Common Criteria and &productname;. Part 2 contains
    more general system security and service protection schemes.
   </para>
   <para>
    The <quote>Chapters</quote> will divide the books into logical parent
    topics within the <quote>parts</quote> and likewise the
    <quote>sections</quote> sub-divide even further.
   </para>
   <para>
    Examples will exist throughout the whole guide, and many more can be found
    in referenced man pages or documentation.
   </para>
<!-- 
   <note>
    <para>
     Please keep in mind that we use the EAL/CC evaluation guide as a means
     to describe a variety of services that can be hardened, processes that
     can or should be followed, operational functionality of &productname;,
     components, pieces and parts. Together, the eal script that can be run
     should never be considered the be-all-end-all method to harden or
     secure a &productname; system... it is merely a tool used here to
     facilitate discussion and learning. A beginning, perhaps – but not an
     end.
    </para>
   </note>
-->
  </section>
  <xi:include href="common_intro_available_doc_i.xml" parse="xml"/>
  <xi:include href="common_intro_feedback_i.xml" parse="xml"/>
  <xi:include href="common_intro_typografie_i.xml" parse="xml"/>
 </preface>
 <part xml:id="part-setup-for-eal">
  <title>&productname; and Common Criteria</title>
  <info/>
  <chapter xml:id="cha-setup-for-eal-intro">
   <title>Overview and Rationale</title>
   <info>
    <abstract>
     <para>
      Common Criteria certificates have been published for every major release
      of the &productname; since version 8. &productname; 11 Service Pack 2 a
      Common Criteria v3.1 OSPP EAL4+ certificate in May 2013.
     </para>
    </abstract>
   </info>
   <section xml:id="sec-setup-for-eal-intro-generic">
    <title>Common Criteria and this document</title>
    <para>
     Common Criteria is the most known and most widely used methodology to
     evaluate and measure the security value of an IT product. The methodology
     aims to be independent, as an independent laboratory conducts the
     evaluation, which a certification body will certify afterwards. Security
     Functional Requirements (SFR) are summarized in so-called Protection
     Profiles (PP), which allows the comparison of security functions of
     different products if the definition of the Security Target (ST) (which
     typically makes use of a reference to the PP if one exists that fits the
     purpose of the product) and the Evaluation Assurance Levels are
     comparable.
    </para>
    <para>
     As noted earlier, a clear definition of security in IT products is
     challenging. Security is to be considered a process that never ends, not a
     static condition that can be met or not. A Common Criteria certificate
     (below EA7) does not make a clear statement about error proneness of the
     system (while many of the flaws that exist specifically in operating
     systems are security-relevant), but it adds an important value to the
     product that cannot be described with the presence of technology alone:
     That someone has independently inspected the design of the system in such
     way that is corresponds to the claims that are made, and that explicit
     care has been taken in producing and maintaining the product. In an
     environment where the product is reliably shielded from any kind of
     attacker, the only remaining attack vector is the vendor of the system.
    </para>
    <para>
     The certificate states a degree of maturity of both the product with its
     security functions and the processes of the company that has designed,
     built and engineered the product, and that will maintain the product
     across its life cycle. As such, Common Criteria aims to be fairly holistic
     with its approach to take everything into account that is relevant for the
     security of an IT product.
    </para>
    <para>
     The Evaluation Assurance Level (EAL) shall denote the degree of confidence
     that the product fulfills the described claims. The levels are from 1
     through 7:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       EAL1: Functionally tested
      </para>
     </listitem>
     <listitem>
      <para>
       EAL2: Structurally tested
      </para>
     </listitem>
     <listitem>
      <para>
       EAL3: Methodically tested and checked
      </para>
     </listitem>
     <listitem>
      <para>
       EAL4: Methodically designed, tested and reviewed
      </para>
     </listitem>
     <listitem>
      <para>
       EAL5: Semiformally designed and tested
      </para>
     </listitem>
     <listitem>
      <para>
       EAL6: Semiformally verified design and tested
      </para>
     </listitem>
     <listitem>
      <para>
       EAL7: Formally verified design and tested
      </para>
     </listitem>
    </itemizedlist>
    <para>
     While EAL1 only provides basic assurance for products to meet security
     requirements, EAL2 to 4 are medium assurance levels. EAL5-EAL7 describe
     medium-to-high and high assurance; EAL4 is expected to be the highest
     level of assurance that a product can have if it has not been designed
     from the start to achieve a higher level of assurance.
    </para>
    <para>
     Basically all commonly known General Purpose/Utility Computing operating
     systems have been awarded a Common Criteria certificate at EAL4. A "+"
     after the assurance level denotes an augmentation to the EAL, an addition
     that is useful for the articulation of security value, but formally not
     needed at the corresponding EAL.
    </para>
    <para>
     The &productname; version 8 was the first Linux system to achieve EAL3+
     (Augmentation: Basic Flaw Remidiation) in 2003; Version 9 of SLES was the
     first Linux based operating system to reach EAL4+ in 2004. More
     certifications and re-certifications have followed targeting SLES9 and
     SLES10-SP1, until the &productname; version 11 Service Pack 2 was
     evaluated in 2011/2012.
    </para>
    <para>
     The Common Criteria evaluations inspect a specific configuration of the
     product in a so-called <quote>evaluated configuration</quote>. The
     <quote>Administrator's Guide</quote> is a document that comes with a
     Common Criteria certified product and describes the individual steps that
     need to be taken to install and configure the product to a state like it
     was evaluated.
    </para>
    <para>
     Very often, the evaluated configuration is used as a reference for the
     secure installation of the &productname;. It is however incorrect to
     understand the evaluated configuration as a hardened configuration: the
     removal of setuid-bits and the prescription of administrative procedures
     after installation is there to reach a specific configuration that is
     sane, but this process is clearly insufficient for a hardening claim.
    </para>
    <para>
     Earlier versions of this document have contained a substantial part that
     links to Common Criteria evaluated configurations. For the purpose of
     clarity and to avoid confusion, this version drafted for the &productname;
     version 11 Service Pack 2 has these chapters removed.
    </para>
    <para>
     Instead, this guide recommends the lecture the documentation that comes
     with the Common Criteria certificate to understand the Common Critiera
     evaluation of &productname; in general, the security functions that are in
     place within the operating system and how these security functions are
     relevant for the mitigation of threats. The High Level Design
     documentation encompasses the design specifics of the &productname;:
     Authentication mechanisms, access controls, audit subsystem and system
     logs, just to name a few of them. The accumulated knowledge contained in
     the documentation allows decision making for hardening purposes at an
     informed level - find it at
    </para>
    <para>
     <link xlink:href="http://www.suse.com/security/"> </link>
    </para>
    <para>
     Apart from the valuable documentation that comes with the Common Criteria
     effort, the following manual pages may be of greater interest to the
     inclined reader:
    </para>
    <para>
     <quote>pam(8), pam(5)</quote>
    </para>
    <para>
     <quote>apparmor(7)</quote> and referred man pages
    </para>
    <para>
     <quote>syslog(8), syslogd(8), rsyslogd(8)</quote> (if rsyslogd is
     installed)
    </para>
    <para>
     <quote>fstab(5), mount(8), losetup(8), cryptsetup(8)</quote>
    </para>
    <para>
     <quote>haveged(8), random(4)</quote>
    </para>
    <para>
     <quote>ssh(1), sshd(8), ssh_config(5), sshd_config(5), ssh-agent(1),
     ssh-add(1), ssh-keygen(1)</quote>
    </para>
    <para>
     <quote>cron(1), crontab(5), at(1), atd(8)</quote>
    </para>
    <para>
     <quote>mkinitrd(8), mkinitrd(5), init(8), inittab(5), init.d(7),
     runlevel(8)</quote>
    </para>
<!--     
    <para>
     The purpose of this part is to provide security configuration and
     hardening recommendations for the &sle; operating system. The guidance
     provided here should be applicable to all versions of the product from
     9 on, however many of the components are available (generally) in
     version 10 and later. Much of the content in this guide has been
     presented elsewhere as part of the base configuration details used to
     achieve the Common Criteria EAL 4+ certification. Where it will differ
     is in describing the addition of services and applications outside of
     the EAL 4+ scope. These descriptions will still focus on the security
     and hardening of these additions. However, due to the strict nature of
     the Common Criteria certification some services, and certainly 3rd
     party applications, could not be included.
    </para>

    <para>
     Attempts will be made to point out any differences applicable between
     &productname; version variants. Recommended settings for the basic
     operating system are provided, as well as for many commonly used
     services that the system can host in a network environment. Also, as
     there are security measures that can only be applied (easily) during a
     fresh installation, this document will begin with guidance as if the
     system is a new install of &productname; 10 SP2 version. As of
     publication, &productname; 11 has just shipped. As Linux itself
     continues to grow, change, improve exponentially as a secure operating
     system, this guide attempts to cover many different versions of
     &productname;. You may note some differences depending on the version
     you are using. If known, any thing presented here that is subject to
     change based on &productname; versioning will be noted. Any
     enhancements (pertaining to security) with the newest &productname; 11
     releases will also be called out.
    </para>

    <para>
     Audience: The guide is intended for partners, consultants and technical
     specialists with some decent Linux background and basic system
     administration experience. Readers are assumed to possess basic system
     administration skills for Unix-like systems, as well as some
     familiarity with SUSE documentation and administration
     conventions.
    </para>

    <para>
     Some instructions within this guide may be complex. Directions should
     be followed completely and with understanding of their effects in order
     to avoid serious adverse implications to the system and its security.
    </para>

    <para>
     Additional discussion, information and examples will be included at
     various points to help further the understanding of a given topic. For
     example, due to the complex nature of the Pluggable Authentication
     Modules and architecture, extra attention will be placed on its
     discussion so that the native flexibility can be understood. For a more
     exhaustive understanding of all of the security components it is highly
     recommended to read the individual man pages (even the <quote>see
     also</quote> page references at the bottom of an individual man page)
     and to seek other on-line resources or documentation. The next section
     describes guiding principles and assumptions used in the document. It
     will also describe some of the base services for an EAL 4+ build.
    </para>

    <para>
     Later sections will augment the security and hardening processes for
     other services and more generalized procedures, but these will be
     separated from the EAL 4+ content as they may not be qualified as part
     of the certified configuration. This does NOT mean that they are not
     <quote>secure</quote>, only that they were not part of the defined
     target of evaluation that garnered the Common Criteria certification.
    </para>
-->
   </section>
   <section xml:id="sec-setup-for-eal-intro-principals">
    <title>Generic Guiding Principles</title>
    <para>
     The following guiding principles motivate much of the advice in this
     guide, and security processes in general, and should also influence any
     configuration decisions that are not explicitly covered.
    </para>
    <variablelist>
     <varlistentry>
      <term>Use Data Encryption Whenever Possible</term>
      <listitem>
       <para>
        Please refer to the "About... " section of this guide. In
        "Assumptions", the limitations of cryptography are briefly outlined.
       </para>
       <para>
        Please be aware that cryptography is certainly useful, but only for the
        specific purposes that it is good for. It is not a generic recipe for
        better security in a system, its use may even impose additional risk on
        the system. Make informed decisions about the use of cryptography, and
        feel obliged to have a reason for your decisions, no matter if they are
        for or against cryptography. A false sense of security is normally more
        harmful than the weakness itself.
<!-- 
        Data transmissions over wired or wireless networks are susceptible
        to passive monitoring. If it is possible to encrypt these
        transmissions, and practical, it should be done. Even if the realm
        of control is exclusively on a local network, encryption should
        still be considered and implemented, especially authentication data
        like ID and passwords. Networks of SUSE Linux Enterprise Server
        (&productname;) machines can and should be configured so that no
        unencrypted authentication data is ever transmitted between
        machines.
    -->
        &productname; supports encryption for generic network connections (the
        openssl command, stunnel), for remote login (openssh, man ssh(1)), for
        generic file encryption (gpg), for entire file systems at block layer
        (dm_crypt, cryptsetup) and for VPN (IPsec, openvpn).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Minimal Package Installation</term>
      <listitem>
<!--
       <para>
        The easiest way to avoid vulnerabilities in software is NOT to
        install it! &productname; allows for careful management of the set
        of software packages installed on a system via the &yast; Software
        Management interface and the RPM package manager. 
       </para>
   -->
       <para>
        Generally, an RPM software package consists of the package's metadata
        that is written to the RPM database upon installation, the package's
        files and directories and scripts that are being executed before and
        after installation and uninstallation.
       </para>
       <para>
        If the package does NOT contain
       </para>
       <orderedlist spacing="normal">
        <listitem>
         <para>
          setuid- or setgid bits on any of the installed files
         </para>
        </listitem>
        <listitem>
         <para>
          group- or world-writeable files or directories
         </para>
        </listitem>
        <listitem>
         <para>
          a service that is activated upon installation/activated by default.
         </para>
        </listitem>
       </orderedlist>
       <para>
        then the said package generally does not impose any security risk to
        the system. Under the above condition, the package is merely a
        collection of files, and their use shall not be automatically assumed
        if you do not have any local users on your system. Since the
        installation of such packages does not have any influence on the
        security value of the system, the uninstallation of them shouldn't
        either.
       </para>
       <para>
        However, a fairly simple reason to keep to a minimal set of packages in
        your installation is that something that is not present cannot get
        used. Binaries not installed cannot be executed.
       </para>
       <para>
        A straight forward way of keeping to a minimal set of packages begins
        with the installation of the system. You can start the installation of
        your system by deselecting all packages and then select only those that
        you wish to use. As an example, the selection of the apache2-mod_perl
        package in yast2 would automatically cause all packages to be selected
        for installation that are needed for the apache package to operate. In
        many cases, dependencies have been artificially cut down to be able to
        handle the system's dependency tree more flexibly. You should be safe
        if you chose the minimal system, and build the dependency tree from
        there with your (leaf) package selection.
       </para>
<!--       
       <orderedlist>
        <listitem>
         <para>
          A setuid program is a binary that runs with the privileges of the
          binary file owner and not the privileges of the user who executes
          the program.
          Packages that include setuid programs may provide local attackers
          a potential path to privilege escalation. For this reason, setuid
          bits should be avoided, or the setuid bits should be removed unless
          explicitly required (example: passwd(1)).
         </para>
        </listitem>
        <listitem>
         <para>
          Packages that include network services may give this opportunity
          to network-based attackers. There are only two packages in &productname;
          that contain or provide network services and that are active by
          default after the installation: the openssh package (sshd secure shell daemon)
          and the rpcbind package (rpcbind, RPC portmapper, needed for NFS client
          mounts).
         </para>
        </listitem>
        <listitem>
         <para>
          Packages that include programs which are predictably executed by
          local users (e.g. after graphical login) may provide opportunities
          for Trojan horses or other attack code to be run undetected.
         </para>
        </listitem>
        <listitem>
         <para>
          The number of software packages installed on a system can almost
          always be significantly pruned to include only the software for
          which there is an environmental or operational need.
         </para>
        </listitem>
       </orderedlist>
 -->
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Service Isolation - Run Different Services on Separate Systems</term>
      <listitem>
       <para>
        Whenever possible, a server should be dedicated to serving exactly one
        service or application. This limits the number of other services that
        could be compromised in the event an attacker is able to successfully
        exploit a software flaw in one service (assuming that flaw allows
        access to others).
       </para>
       <para>
        This point can lead to healthy and robust <quote>dialog</quote> on
        system sizing and even further to consolidation or virtualization. The
        intent with this guidance is to reduce the fault domain and risk where
        possible.
       </para>
       <para>
        The use of AppArmor for services that are provided on a system is an
        effective means of containment. Please refer to the AppArmor
        documentation on your system to learn more. <quote>man apparmor</quote>
        is a good starting point.
       </para>
       <para>
        The use of virtualization technology with kvm or with xen is supported
        with the &productname; version 11. While virtualization is generally
        designed for server consolidation purposes, its usefulness for service
        isolation is another good argument. Please be aware that the capability
        of the hypervisor to seperate virtual machines is not higher or
        stronger than the Linux kernel's capability to seperate processes and
        their address spaces. The granularity at which virtualization
        technology tackles separation may however come with its benefits, being
        resource-hungry and somewhat clumsy on the other hand.
       </para>
       <note>
        <para>
         Virtualization technology cannot match or subsitute the separation
         strength that is given by running services on different physical
         machines!
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>System fingerprinting and backups</term>
      <listitem>
       <para>
        In the case of the suspicion of an attack against the system, nothing
        can provide more comfort than
       </para>
       <orderedlist spacing="normal">
        <listitem>
         <para>
          a backup
         </para>
        </listitem>
        <listitem>
         <para>
          a fingerprint of your system to detect modifications
         </para>
        </listitem>
        <listitem>
         <para>
          having done your homework.
         </para>
        </listitem>
       </orderedlist>
       <para>
        Several tools exist on &productname; 11 which can be effectively used
        for the detection of unknown, but yet successful attacks. These tools
        come at the cost of relatively little configuration effort, but with
        the benefit of being able to actually <quote>know</quote> what has been
        changed in your system.
       </para>
       <para>
        In particular, the use of
        <systemitem class="resource">AIDE</systemitem> is strongly encouraged.
        <systemitem class="resource">AIDE</systemitem>, when run for
        initialization, creates a hash database of all files in the system that
        are configured. This allows to verify the integrity of all catalogued
        files at a later time.
       </para>
       <note>
        <para>
         You need to copy the hash database that AIDE creates to a place that
         is unaccessible for potential attackers. Otherwise, the attacker may
         modify the integrity database after planting a backdoor, thereby
         defeating the purpose of the integrity measurement.
        </para>
       </note>
       <note>
        <para>
         An attacker may have planted a backdoor in the kernel. This has an
         entire variety of consequences: Apart from being very hard to detect,
         the kernel based backdoor can effectively remove all traces of the
         system compromise to the degree that system alterations are basically
         invisible. By consequence, an integrity check needs to be done from a
         rescue system (or any other system where an independent system runs,
         and the target system's file systems are mounted manually).
        </para>
       </note>
       <note>
        <para>
         Security is a lively process. Essentially, in this context, this means
         that the application of security updates invalidates the integrity
         database. <quote>rpm -qlv packagename</quote> lists the files that are
         contained in a package. Generally spoken, the RPM subsystem is very
         powerful with the data that it maintains, and that is accessible with
         the <quote>--queryformat</quote> commandline option. A differential
         update of integrity database with the changed files becomes more
         manageable with some fine-grained utilisation of RPM.
        </para>
       </note>
       <para>
        A fast and directly accessible backup adds distinct confidence about
        the integrity of your system and can substitute an integrity check such
        as described above with AIDE. It is important, though, that the backup
        mechanism/solution has adequate versioning support so that you can
        trace changes in the system. As an example: The installation times of
        packages (<quote>rpm -q --queryformat='%{INSTALLTIME} %{NAME}\n'
        packagename</quote> must correspond to the changed files in the
        backup's logs.
       </para>
       <note>
        <para>
         Needless to say, you would need to verify every now and then that your
         backup actually works as intended. Make this an integral part of your
         security routine!
        </para>
       </note>
<!-- 
       
       <para>
        and the <systemitem class="resource">seccheck</systemitem> cron script
        this guide recommends and discusses the use of
        iptables for host-based firewalling (although, in general, usage of
        the &susefirewall; and configuring it with &yast; is easier and
        actually uses iptables), &aa; or SELinux (preview in &productname;
        11) for protection against vulnerable services, and a logging and
        auditing (<systemitem class="daemon">syslog-ng</systemitem> and
        <systemitem
         class="daemon">auditd</systemitem>)
        infrastructure for detection of problems. Also included in
        &productname; are some security specific tools that improve the
        general security, monitoring and reporting capabilities. Tools such
        as ,
         and
        <systemitem class="resource">nessus</systemitem>.
       </para>
-->
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
<!-- 
   <sect1 id="sec-setup-for-eal-intro-usage">
    <title>Guide Usage</title>

    <para>
     In using this guide you should keep the following points in mind:
    </para>

    <variablelist>
     <varlistentry>
      <term>Sectioning Order and Section Cohesion</term>
      <listitem>
       <para>
        Just a general caution, each section might build on information and
        recommendations discussed in prior sections. It is wise to read each
        section to gain complete understanding (if possible) as the
        instructions/recommendations should never be applied to a system
        blindly. Relevant examples and descriptions may occur after the
        instructions for a particular action.
       </para>
       <para>
        There are two distinct sections for the system set up, system-level
        installation/configuration and service-level
        installation/configuration. The system-level recommendations should
        be applied to all hosts; however service-level guidance may or may
        not be applicable. In the case of services, you will apply the
        guidance if the machine is either a server or a client for that
        service, and ensure that the service is disabled (or as previously
        mentioned, the package removed from the system) according to the
        instructions provided if the machine is neither a server nor a
        client.
       </para>
       <para>
        Also, as mentioned previously, the first sections describe an EAL 4+
        installation and setup. As additional services are added, they may
        be outside of the EAL 4+ base installation and configuration
        (<quote>certified target of evaluation</quote>) yet should not be
        considered 'non-secure'. Additional content depth, recommendations
        and examples will be included to provide for increased flexibility
        in securing and hardening system implementations.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Testing and Fingerprinting</term>
      <listitem>
       <para>
        Each component and recommendation should be tested. In the Delivery
        Guide, guidance was described for a prototype and lab environment.
        This is where testing should occur. Overall, any recommendations
        made here should always be tested in a non-production environment
        before deployment. This test environment should simulate the setup
        in which the system will be deployed as closely as possible.
       </para>
       <para>
        Fingerprinting is the process of storing a 'picture' of a system so
        it can be referenced and compared later to prove its integrity has
        not been compromised. Details will be given in this guide for the
        use of <systemitem class="resource">AIDE</systemitem> (the Advanced
        Intrusion Detection Environment). It is used as an example, but the
        fingerprinting guidance is sound. There are several 3rd party
        providers of system integrity and audit solutions. However,
        <systemitem class="resource">AIDE</systemitem> is included with
        &productname;, is OpenSource, and fairly easy to implement. In the
        event of a system breach, having a system fingerprint can prove
        invaluable when it comes to forensic analysis.
       </para>
       <note>
        <para>
         NOTE: Earlier versions of &productname;
         included<systemitem class="resource"> TripWire</systemitem>.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Root Shell Environment Assumed</term>
      <listitem>
       <para>
        Most of the actions listed in this document are written with the
        assumption that they will be executed by the &rootuser; user running
        the /bin/bash shell. Any commands preceded with a hash mark (#)
        assume that the administrator will execute the commands as
        &rootuser;, in other words, they will be applied via the usage of
        sudo whenever possible (or use su to gain root privileges if sudo
        cannot be used).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Reboots / Restarts</term>
      <listitem>
       <para>
        A system restart or reboot might be required after some actions in
        order to complete the reconfiguration of the system. Attempts will
        be made to mention when a reboot is explicitly required. However, in
        some cases, changes will not take effect until a reboot is
        performed. In order to ensure that changes are applied properly and
        to test functionality, it is always a good practice to reboot the
        system after applying a set of recommendations from this guide if a
        reboot is specified. There are many cases where a reboot is not
        necessary, and by no means should a <quote>just-in-case</quote>
        reboot be a matter of practice. The amount of system changes that
        require a reboot are <quote>less than a handful</quote>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Hardware Preparation</term>
      <listitem>
       <para>
        If possible, BIOS passwords should be enabled. They are no
        guarantee, but are decent protection from low-level hardware
        configuration changes. Physical access must be controlled to ensure
        that the BIOS 'clear' hardware-jumpers could not be manipulated on
        the motherboard to bypass this protection.
       </para>
       <note>
        <para>
         The caveat to this is that a BIOS passwords can also be problematic
         or detrimental. If physical access/safety can be assured – you
         may opt to refrain from their usage. Booting from a forensics or
         rescue image may not be possible – in the event of a system
         failure or break in – if a BIOS password preempts a boot.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>System User Requirements</term>
      <listitem>
       <para>
        The assumption is made that the hardened host will reside in a
        <quote>friendly</quote> environment, one with cooperative and
        security-minded users. Users who will use the system responsibly to
        fulfill their tasks.
       </para>
       <para>
        Note that system availability is not addressed in this guide, and a
        malicious user could disable a server through resource exhaustion,
        denial-of-service attacks or like methods. High availability is
        addressed in other playbooks and can be at the server or service
        level. Of particular interest to many &productname; customers is the
        fact that high-availability tools are included and supported with
        the &productname; distributions (&productname; 10 and higher) either
        in the base distro or included as add-ons.
       </para>
       <para>
        A set of baseline user account requirements are prescribed here in
        accordance with the EAL 4+ evaluation. These requirements are not
        exhaustive, yet provide a minimum level of trusted security for a
        user environment. Other requirements may be necessary depending on
        other policy constraints like SOX, auditing, etc.
       </para>
       <para>
        The requirements for users specifically include:
       </para>
       <variablelist>
        <varlistentry>
         <term>Prescribed Usage / Access Control</term>
         <listitem>
          <para>
           User accounts <emphasis>must</emphasis> be assigned only to those
           users with a <quote>need</quote> to access the data protected by
           the system. These users <emphasis>must</emphasis> be sufficiently
           trustworthy not to abuse those privileges. Again, the concept of
           <quote>domain</quote> control needs to be considered. Once data
           leaves a system the system has no control and cannot prevent that
           data from being intentionally redistributed to unauthorized third
           parties by an authorized user.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>Granted Trust</term>
         <listitem>
          <para>
           All users of the system <emphasis>must</emphasis> be sufficiently
           skilled to understand the security implications of their actions,
           and <emphasis>must</emphasis> understand and follow a base set of
           security guidelines. There is a baseline set of these
           requirements in a later section. Appropriate training
           <emphasis>must</emphasis> be available to ensure this. Further,
           best practices suggest some sort of User/Acceptable Use policy be
           maintained and logged. As part of many auditing standards, these
           types of policies are required to be signed and stored before
           access is granted to systems including host access, remote
           access, Internet access, etc.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       <para>
        Normally it is part the responsibility of system administrators to
        verify that these requirements are met, and to be available to users
        if they need help in maintaining the security of their data.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect1>
   <sect1 id="sec-setup-for-eal-intro-host-security">
    <title>Host Security Functions</title>

    <para>
     This section summarizes the security functions that were covered by the
     EAL 4+ certified evaluation. Refer to the appropriate sections for
     information on configuring, using, and managing any of these functions.
     Further examples and details may be provided in later sections if that
     detail is granular and out-of-scope of the base evaluation. All section
     numbers referenced in this guide will correspond directly with those in
     the native <quote>Common Criteria EAL4+ Evaluated Configuration Guide
     for SUSE LINUX Enterprise Server on IBM Hardware</quote> for clarity,
     however this synchronization will not begin until section 2.2 (EAL 4+
     Installation). Also note that more detail (for clarity-sake) will be
     provided in this guide. When in doubt, refer to man pages, the Internet
     or check other references. There is a wealth of information available
     in the topic of *nix system security or computer
     <quote>security</quote> in general. A list of sources will be included
     in an appendix of this guide.
    </para>

    <sect2 id="sec-setup-for-eal-intro-host-security-auth">
     <title>Identification and Authentication</title>
     <variablelist>
      <varlistentry>
       <term>Pluggable Authentication Module (PAM)</term>
       <listitem>
        <para>
         <xref linkend="cha-setup-for-eal-securing-background-pam"/> will
         describe PAM and its usage. Extra details will be provided on PAM
         'stacks' and how to extend PAM to meet your usage requirements. PAM
         documentation is located on the system in
         <filename>/usr/share/doc/packages/pam/</filename> and you can check
         the pam man page with <command>man 8 pam</command>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>loginRequired</term>
       <listitem>
        <para>
         The setup and configuration of system logins will be covered in
         <xref linkend="cha-setup-for-eal-securing-background-login-defs"/>.
         Also refer to the <literal>login</literal> and
         <literal>login.defs</literal> man pages for additional information.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>OpenSSH</term>
       <listitem>
        <para>
         OpenSSH is used by default in &productname; and its usage and setup
         are described in
         <xref
          linkend="cha-setup-for-eal-securing-background-ssh"/>
         and the <systemitem class="daemon">sshd</systemitem>,
         <command>ssh</command>, <literal>sshd_config</literal> man pages.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem class="daemon">vsftpd</systemitem>
       </term>
       <listitem>
        <para>
         The Very Secure FTP daemon is discussed in
         <xref
          linkend="cha-setup-for-eal-securing-background-ftp"/>
         and the <systemitem class="daemon">vsftpd</systemitem> and
         <literal>vsftpd.conf</literal> man pages. Usage of FTP may not be a
         service that is required in all host configurations, but it was
         part of the EAL 4+ configuration test.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><command>su</command>
       </term>
       <listitem>
        <para>
         The usage of the <command>su</command> command is prescribed
         <xref
          linkend="sec-setup-for-eal-operating-root"/> in.
         Further details can be found in the <command>su</command> man page.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="sec-setup-for-eal-intro-host-security-audit">
     <title>Audit</title>
     <para>
      The audit subsystem has changed considerably from version to version
      of &productname; with updates being made at both the kernel and
      user-space. In recent updates to &productname; 10 SP2, more features
      and functionality has been introduced furthering the capabilities and
      configuration possibilities. The audit subsystem has distinct
      components for event detection and configuration, proxy handling, and
      reporting. Details will be covered in
      <xref
       linkend="sec-setup-for-eal-monitoring-audit"/>. You
      should also refer to the
      <systemitem class="daemon">auditd</systemitem> man page, whose
      <quote>SEE ALSO</quote> section points to the remaining audit
      subsystem man pages (e.g. <literal>auditd.conf</literal>,
      <systemitem class="daemon">audispd</systemitem>,
      <command>ausearch</command>, <command>aureport</command> and
      <command>auditctl</command>).
     </para>
     <para>
      Additional information will be covered in later chapters. The audit
      subsystem is very powerful and flexible. Many customers choose to
      purchase 3rd party products for audit event tracking and reporting
      when a detailed knowledge of the Linux Auditing System might have
      satisfied their needs with no additional costs.
     </para>
    </sect2>

    <sect2 id="sec-setup-for-eal-intro-host-security-access">
     <title>Discretionary Access Control</title>
     <para>
      Discretionary access control will be covered in
      <xref
       linkend="sec-setup-for-eal-user-acl"/>. Further, System V
      interprocesses communication objects (e.g. message queues, semaphore
      sets and shared memory segments) and security permissions and
      processes will be covered in
      <xref
       linkend="sec-setup-for-eal-operating-sysv-memory"/>.
     </para>
    </sect2>

    <sect2 id="sec-setup-for-eal-intro-host-security-object-reuse">
     <title>Object Reuse</title>
     <para>
      According to the &productname; High Level Design document, the kernel
      automatically ensures that new objects (disk files, memory, IPC) do
      not contain any traces of previous contents. The design has even been
      enhanced in the latest editions of &productname; to include further
      security enhancements in the kernel and user-space.
     </para>
     <para>
      Some examples include:
     </para>
     <variablelist>
      <varlistentry>
       <term>Randomization:</term>
       <listitem>
        <para>
         Better address space randomization is available for binaries
         compiled with PIE support (-fPIE). Randomizations include the
         address where the binary is mapped and the head start address.
         Stack and mmap areas are already randomized for all other binaries.
         Randomization is typically an anti-worm measure, not typically an
         anti-overflow solution.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Fstack-protection</term>
       <listitem>
        <para>
         fstack-protector runtime stack overrun heuristics are now enabled
         for all packages in the SLE11 code base.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>

    <sect2 id="sec-setup-for-eal-intro-host-security-manage">
     <title>Security Management and System Protection</title>
     <para>
      These topics will be covered as complete chapters. General operation
      and system management will be covered in
      <xref
       linkend="cha-setup-for-eal-operating"/> and system
      monitoring, logging and audit will be handled in
      <xref
       linkend="cha-setup-for-eal-monitoring"/>.
     </para>
    </sect2>

    <sect2 id="sec-setup-for-eal-intro-host-security-communication">
     <title>Secure Communication</title>
     <variablelist>
      <varlistentry>
       <term>stunnel</term>
       <listitem>
        <para>
         Encryption methods and secure communications are expansive topics.
         The EAL 4+ evaluation guide, the usage of stunnel was described to
         provide a universal SSL tunnel for applications or services. In
         <xref
          linkend="sec-setup-for-eal-operating-stunnel"/> the
         specifics will be covered. See also the <literal>stunnel</literal>
         man page.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SSH System Operation Procedures for Secure Systems</term>
       <listitem>
        <para>
         <xref
          linkend="cha-setup-for-eal-securing-background-ssh"/>
         will cover the configuration and usage of SSH with further details
         available within the <systemitem class="daemon">sshd</systemitem>,
         <command>ssh</command>, <literal>sshd_config</literal> man pages.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>
   </sect1>
   <sect1 id="sec-setup-for-eal-intro-events">
    <title>Overview of Security Relevant Events</title>

    <para>
     The audit subsystem is intended to be the central interface for
     collecting and viewing the record of security relevant events. Formerly
     called the Linux Audit Subsystem (LauS). It was developed by &suse; for
     &productname; 9 (Open Sourced and released under GPL) to attain a CC
     EAL 4 certificate. Since then it has been reworked, renamed simply
     audit, and adopted upstream into the kernel and is now common to the
     2.6 kernel.
    </para>

    <para>
     The events being monitored by default in the evaluated configuration
     include:
    </para>

    <itemizedlist>
     <listitem>
      <para>
       All authentication done through the PAM library, including the
       identity and location (where available) of the user and the success
       or failure result.
      </para>
     </listitem>
     <listitem>
      <para>
       Any use of <command>su</command> to change identity. All actions done
       as part of a su session are marked in the audit record along with the
       original user's login user ID.
      </para>
     </listitem>
     <listitem>
      <para>
       The addition, change or deletion of any users or groups.
      </para>
     </listitem>
     <listitem>
      <para>
       Any changes and/or change attempts to the contents of any security
       critical files.
      </para>
     </listitem>
     <listitem>
      <para>
       Any changes to the access permissions or ownership of any files or
       IPC (interprocess communication) objects.
      </para>
     </listitem>
     <listitem>
      <para>
       Changes to or new binding network ports and accepting connections.
      </para>
     </listitem>
    </itemizedlist>

    <para>
     Details will be covered in
     <xref linkend="cha-setup-for-eal-monitoring"/>.
    </para>
   </sect1>
   <sect1 id="sec-setup-for-eal-intro-events-sle11">
    
    <title>&productname; 11 Enhancements</title>

    <para>
     As previously mentioned in the section above, there have been some
     variations in capabilities as the &productname; operating system has
     matured from version to version, service pack to service pack in some
     instances. Even the included binaries themselves in &productname; 11
     have included security enhancements during compilation as improvements
     have been developed. Here are some examples:
    </para>

    <orderedlist>
     <listitem>
      <para>
       Randomization and Enhanced fstack-protection&mdash;see
       <xref
        linkend="sec-setup-for-eal-intro-host-security-object-reuse"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>D_FORTIFY_SOURCE</literal> flag enabled at compilation time
       – provides compile-time and runtime based overflow protection and
       format string checking. This was included in SLE 10 as well.
      </para>
     </listitem>
     <listitem>
      <para>
       A new &yast; module for Audit. This will ease the setup and
       configuration of the audit modules as part of the Linux Audit
       Framework (CAPP/EAL capable in SLE10SP2 and certified as of
       SLE10SP1).
      </para>
     </listitem>
     <listitem>
      <para>
       Several &aa; enhancements.
      </para>
     </listitem>
     <listitem>
      <para>
       PolicyKit – this allows for more fine-grained access controls for
       administration access. Enables limited/reduced root access for some
       configuration tasks.
      </para>
     </listitem>
     <listitem>
      <para>
       Additional code and design reviews/improvements by the &suse;
       Security Team – securing new features.
      </para>
     </listitem>
    </orderedlist>
   </sect1>
 
-->
  </chapter>
 </part>
 <part xml:id="part-sec-prot">
  <title>General System Security and Service Protection Methods</title>
  <info/>
  <chapter xml:id="cha-sec-prot-intro">
   <title>Introduction</title>
   <info/>
   <para>
    In <xref linkend="part-setup-for-eal"/> we covered the Common Criteria EAL
    4+ certified installation and setup that was sponsored by IBM for a select
    subset of hardware. This <quote>certified</quote> build is a great
    first-stop for customers wishing to build a secure and hardened base
    system, yet might not address all of the services and software specifics
    that many customers would be interested in.
   </para>
   <para>
    This next part will present more of a <quote>generalist</quote> view and
    give general recommendations and guidance for &productname; system
    security. Some topics may seem repeated here (from the previous part) yet
    the context is very different. More detail will be provided in some
    sections and certainly some more general examples for a greater number of
    services.
   </para>
  </chapter>
  <chapter xml:id="cha-sec-prot-general">
   <title>Linux Security in <quote>General</quote></title>
   <info/>
   <para>
    In this portion of the guide, instead of taking a
    <emphasis>must</emphasis>, <emphasis>recommended</emphasis> or
    <emphasis>may</emphasis> approach to the setup of a secured host, we will
    address security topics in a more <quote>general</quote> fashion. This is
    where you will get a rule-of-thumb or best-practice even a basic
    recommendation. The procedures and examples here should give you the
    ability to apply security enhancement techniques to a wider variety of
    server-based services and programs.
   </para>
   <para>
    Even if some of these topics might have been covered in
    <quote>explicit</quote> terms earlier with no leniency towards
    implementation variation (in accordance with the EAL target evaluation) you
    may find the examples that follow to contain more detail or explanation.
    Some of the general topics will include:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Physical Security – Protection of the server from environmental threats
      (people, places, things).
     </para>
    </listitem>
    <listitem>
     <para>
      Security Policies and Procedures – Server lifecycle management,
      disk/media reclamation, backup and archive security.
     </para>
    </listitem>
    <listitem>
     <para>
      Systems Monitoring – Procedures around event notification/management.
     </para>
    </listitem>
    <listitem>
     <para>
      Systems Automation – Mechanisms and/or procedures for automatic
      security measures. Heuristics, account control, security reporting and
      remediation, automated shutdown, etc.
     </para>
    </listitem>
    <listitem>
     <para>
      Systems Management – Methods to obtaining packages, verification and
      signing keys, patching procedures and recommendations.
     </para>
    </listitem>
    <listitem>
     <para>
      Securing Network – Addition programs, ports and service wrappers –
      iptables, tcpwrappers, services.
     </para>
    </listitem>
    <listitem>
     <para>
      Remote Access – extra SSH information and key federation. CA
      integration.
     </para>
    </listitem>
    <listitem>
     <para>
      Common Services – mail, nfs and automount.
     </para>
    </listitem>
    <listitem>
     <para>
      Securing the Kernel and Init Process – parameters, inittab, runlevels
      and boot scripts.
     </para>
    </listitem>
    <listitem>
     <para>
      Access Control – user/groups/permissions.
     </para>
    </listitem>
    <listitem>
     <para>
      Password Security and Warnings – Proper setup of passwords, banners and
      <systemitem class="daemon">xinetd</systemitem>.
     </para>
    </listitem>
    <listitem>
     <para>
      Miscellaneous Security – Assorted security settings and miscellaneous
      stuff.
     </para>
    </listitem>
    <listitem>
     <para>
      Resources – Web links, documentation and example references, HOWTOs and
      general information, product links.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The sections will again be organized by a topical hierarchy for
    continuity-sake. Refer to the main table of contents for easy reference.
   </para>
   <note>
    <title>Typography</title>
    <para>
     The following examples will show the <literal>&gt;</literal> symbol to
     denote a <quote>normal</quote> user (without &rootuser; privileges) and
     also the <literal>#</literal> will denote commands run as the
     <quote>&rootuser;</quote> user.
    </para>
   </note>
   <section xml:id="sec-sec-prot-general-physical">
    <title>Physical Security</title>
    <para>
     Physical security should be one of the utmost concerns if not the one of
     the primary ones. Linux production servers should be in locked datacenters
     where only people with passed security checks have access. Depending on
     the environment and circumstances, you also may want to consider boot
     loader passwords. Some questions to consider: Who has direct physical
     access to the host? Of those that do, should they? Can the host be
     protected from tampering? Should it be? Etc.
    </para>
    <para>
     The amount of physical security needed on a particular system depends on
     the situation, and can also vary widely by available funds.
    </para>
    <section xml:id="sec-sec-prot-general-physical-locks">
     <title>System locks</title>
     <para>
      Most data center server racks include a <quote>locking</quote> feature.
      Usually this will be a hasp/cylinder lock on the front of the rack that
      allows you to turn an included key to a locked or unlocked position –
      granting or denying entry. Cage locks can help prevent someone from
      tampering or stealing devices/media from the servers, or opening up the
      cases and directly manipulating/sabotaging the hardware. Preventing
      system reboots or the booting from alternate devices is also important
      (e.g. floppys, CD/DVDs/USB drives/etc.).
     </para>
     <para>
      Some servers also have case locks. These locks can do different things
      according to the designs of the system vendor and construction. Many
      systems are designed to self-disable if attempts are made to open the
      system without unlocking. Others have device covers that will not let you
      plug in or unplug new keyboards or mice. While locks are sometimes a
      useful feature, they are usually lower quality and easily defeated by
      attackers with ill intent.
     </para>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-bios">
    <title>Locking down the BIOS</title>
    <para>
     The BIOS (Basic Input/Output System) is the lowest level of
     software/firmware that dictates system configuration and low-level
     hardware. &grub;, &lilo; and other Linux boot loaders access the BIOS to
     determine how to boot the host. Other hardware types
     (&ipseries;/&zseries;) that run Linux also have low-level
     software/firmware. Typically the BIOS can be configured to help prevent
     attackers from being able to reboot the host and manipulate the system.
    </para>
    <para>
     Most BIOS varieties allow the setting of a boot password. While this does
     not provide a high level of security (a BIOS can be reset, removed or
     modified – assuming case access), but it can be another deterrent.
    </para>
    <para>
     Many BIOS capabilities have other various security settings – checking
     with the system vendor, the system documentation or examine the BIOS
     during a system boot.
    </para>
    <important>
     <title>Booting when a BIOS Password is Set</title>
     <para>
      If a system host has been set up with a boot password, the host will not
      boot up unattended (e.g. a system reboot, power failure, etc.). This is
      the trade-off/risk.
     </para>
    </important>
   </section>
   <section xml:id="sec-sec-prot-general-bootloader">
    <title>Security via the Boot Loaders</title>
    <para>
     Linux boot loaders, like &grub; (used by default in &productname;) and
     &lilo; (optional), can also have a boot passwords set. &lilo; has the
     password and restricted settings. The password setting requires a password
     at boot time, and the restricted setting requires a boot-time password
     only if you specify different boot options (such as single ) at the &lilo;
     prompt.
    </para>
    <para>
     &grub; also provides a <quote>password</quote> feature, so that only
     administrators can start the interactive operations (i.e. editing menu
     entries and entering the command-line interface). If a password is
     specified, GRUB will disallow any interactive control until you press the
     key <keycap>P</keycap> or <keycap>E</keycap> and enter a correct password.
    </para>
    <para>
     You can refer to the &grub; and &lilo; man pages for examples.
    </para>
    <para>
     It is very important to keep in mind that when setting these passwords
     they will obviously need to be remembered! Also, enabling these passwords
     might merely slow an intrusion, not necessarily prevent it. Again, someone
     could boot from a floppy, and mount your root partition. If you are using
     BIOS-level security as well as a boot loader, it is a good practice to
     disable the ability to boot from floppy or other devices in your
     computer's BIOS, and then also password-protecting the BIOS itself.
    </para>
    <para>
     Also keep in mind that the boot loader config files will need to be
     protected by changing their mode to <literal>600</literal> (read/write for
     &rootuser; only), or others will be able to read your passwords or hashes!
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-seccheck">
    <title>Verifying Security Action with seccheck</title>
    <para>
     Verifying Security Action ItemsIt is highly recommended to have scripts in
     place which can verify that security actions or procedures have been run.
     Even the best systems administrators can make errors or forget something.
     If you have a small or large Linux installation or environment, you should
     consider the use of the seccheck scripts.
    </para>
    <para>
     Seccheck is the SUSE Security Checker. It is a set of several shellscripts
     designed to check the local security of the system on a regular basis.
     There are three main scripts that are executed at different time
     intervals. They are <literal>security-daily,</literal>
     <literal>security-weekly</literal> and
     <literal>security-monthly</literal>. At installation these scripts all
     have schedule entries that get placed in cron that determine when they
     run. Although cron scheduling is the default behavior, this can be
     controlled via configuration settings (see next section). The daily script
     runs at midnight, and if changes are detected since the last run (the
     night before), an e-mail noting the differences will be sent. The weekly
     script runs every Monday at 1:00am, and only if changes to the last run
     (the week before) are found, a mail with the differences will be sent. The
     monthly script runs every on every 1st of the month and sends the full
     last daily and weekly report via e-mail.
    </para>
    <section xml:id="sec-sec-prot-general-seccheck-config">
     <title>Seccheck Configuration</title>
     <para>
      Please note that you can change the receiver of the seccheck mails from
      root to anyone else if you add an entry like this one to
      <filename>/etc/sysconfig/seccheck</filename>:
     </para>
<screen>SECCHK_USER="firewall" # exchange firewall is an admin user's account name</screen>
     <para>
      Please also note that the <envar>START_SECCHK</envar> variable from
      <filename>/etc/sysconfig/seccheck</filename> controls whether the
      security check will be run from cron. (It's ignored, if you call
      <command>security-control</command> manually.)
     </para>
     <para>
      The following daily checks are done:
     </para>
     <informaltable>
      <tgroup cols="2">
       <colspec colname="c1"/>
       <colspec colname="c2"/>
       <tbody>
        <row>
         <entry>
          <para>
           <filename>/etc/passwd</filename> check
          </para>
         </entry>
         <entry>
          <para>
           length/number/contents of fields, accounts with same uid accounts
           with uid/gid of 0 or 1 beside root and bin
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <filename>/etc/shadow</filename> check
          </para>
         </entry>
         <entry>
          <para>
           length/number/contents of fields, accounts with no password
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <filename>/etc/group</filename> check
          </para>
         </entry>
         <entry>
          <para>
           length/number/contents of fields
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           user root checks
          </para>
         </entry>
         <entry>
          <para>
           secure umask and <envar>PATH</envar>
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <filename>/etc/ftpusers</filename>
          </para>
         </entry>
         <entry>
          <para>
           checks if important system users are put there
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <filename>/etc/aliases</filename>
          </para>
         </entry>
         <entry>
          <para>
           checks for mail aliases which execute programs
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <filename>.rhosts</filename> check
          </para>
         </entry>
         <entry>
          <para>
           checks if users' <filename>.rhosts</filename> file contain + signs
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           homedirectory
          </para>
         </entry>
         <entry>
          <para>
           checks if homedirectories are writable or owned by someone else
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           dot-files check
          </para>
         </entry>
         <entry>
          <para>
           checks many dot-files in the homedirectories if they are writable or
           owned by someone else
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           mailbox check
          </para>
         </entry>
         <entry>
          <para>
           checks if user mailboxes are owned by user and unreadable
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           NFS export check
          </para>
         </entry>
         <entry>
          <para>
           exports should not be exported globaly
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           NFS import check
          </para>
         </entry>
         <entry>
          <para>
           NFS mounts should have the <option>nosuid</option> option set
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           promisc check
          </para>
         </entry>
         <entry>
          <para>
           checks if network cards are in promiscious mode
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           list modules
          </para>
         </entry>
         <entry>
          <para>
           just lists loaded modules
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           list sockets
          </para>
         </entry>
         <entry>
          <para>
           just lists open ports
          </para>
         </entry>
        </row>
        <row>
         <entry namest="c1" nameend="c2">
          <para>
           Weekly Checks are as follows:
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           password check
          </para>
         </entry>
         <entry>
          <para>
           runs john to crack the password file, user will get an e-mail notice
           to change his password asap
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           RPM md5 check
          </para>
         </entry>
         <entry>
          <para>
           checks for changed files via RPM's md5 checksum feature
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           suid/sgid check
          </para>
         </entry>
         <entry>
          <para>
           lists all suid and sgid files
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           exec group write
          </para>
         </entry>
         <entry>
          <para>
           lists all executables which are group/world writeable
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           writable check
          </para>
         </entry>
         <entry>
          <para>
           lists all files which are world writable (incl. Above)
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           device check
          </para>
         </entry>
         <entry>
          <para>
           lists all devices
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
     <important>
      <para>
       For the weekly seccheck password check to work the <quote>john the
       ripper</quote> package needs to be installed yet could be considered a
       security risk in itself. It's important to understand the operation of
       john. Normally it will be used only to send notice of weak passwords to
       users as an e-mail as part of the weekly seccheck cron job. Since
       <quote>john</quote> would need to be installed separately, it is
       recommended to weigh the benefits and risks before doing so.
      </para>
     </important>
     <para>
      Additional monthly checks are also run, however the key difference is
      mainly that the monthly file is not a <quote>diff</quote> like the
      daily/weekly ones but the full reports in one file.
     </para>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-retiring">
    <title>Retiring Linux Servers with Sensitive Data</title>
    <para>
<!-- As mentioned in <xref linkend="sec-setup-for-eal-operating-mount"/> -->
     Security policies usually contain some procedures for the treatment of
     storage media that is going to be retired or disposed of. Disk and media
     <quote>wipe</quote> procedures are frequently prescribed as is complete
     destruction of the media. You can find several free tools on the Internet.
     A search of <quote>dod disk wipe utility</quote> - will yield several
     variants. To retire servers with sensitive data, it is important to ensure
     that data cannot be recovered from the hard disks. To ensure that all
     traces of data are removed, a wipe utility can be used. Some of these
     tools can even be operated from a floppy disk (bootable) and remove data
     according to the U.S. Department of Defense (DoD) standards. Note that
     many government agencies specify their own standards for data security.
     Some standards are stronger than others, yet may require more time to
     implement. <quote>DiskSanitizer</quote> is just one of many that you can
     find. This utility is shareware and available to download at
     <link xlink:href="http://freshmeat.net/projects/disksanitizer"/>.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-backups">
    <title>Backups</title>
    <para>
     If your system gets compromised, your backups become invaluable. But also
     in cases like bugs, accidents etc. backups can be used to compare you
     current system against your backed-up system. For production systems it is
     very important to take some Backups offsite for cases like disasters (e.g.
     offsite storage of tapes/recordable media, or offsite initiated).
    </para>
    <para>
     For legal reasons, some firms and organizations must be careful about
     backing up too much information and holding it too long. If your
     environment has a policy regarding the destruction of old paper files, you
     might have to extend this policy to Linux backup tapes as well.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-partitions">
    <title>Disk Partitions</title>
    <para>
     Servers should have separate partitions for at least
     <filename>/</filename>, <filename>/boot</filename>,
     <filename>/usr</filename>, <filename>/var</filename>,
     <filename>/tmp</filename>, and <filename>/home</filename>. You don't want
     that e.g. logging and temporary space under <filename>/var</filename> and
     <filename>/tmp</filename> fill up the root partition. Third party
     applications should be on separate file systems as well, e.g. under
     <filename>/opt</filename>.
    </para>
    <para>
     Review <xref linkend="part-setup-for-eal"/>. To repeat: It is important to
     understand the need to separate the partitions that could impact a running
     system (for example, log files filling up <filename>/var/log</filename>
     are a good reason to separate <filename>/var</filename> from the
     <filename>/</filename> partition). Another thing to keep in mind is that
     you will likely need to leverage LVM or another volume manager or at the
     very least the <quote>extended</quote> partition type to allow for the
     primary partition limitations (4 partitions).
    </para>
    <para>
     Another capability in &productname; is encrypting a partition or even a
     single folder or file as a container. Please refer to
     <xref linkend="cha-security-cryptofs"/> for details.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-firewall">
    <title>Firewall (iptables)</title>
    <para>
     We won't cover iptables in explicit detail in this guide. Most companies
     use hardware based firewalls to protect their servers in a production
     network, which is strongly recommended for secure environments. However,
     &productname; includes the SUSE-Firewall which is a wrapper for iptables
     and is enabled by default as a simple and layered protection.
    </para>
    <para>
     If you are also interested in Linux stateful firewalls using iptables,
     there are several HOWTOs on the Internet. See the Appendix for resources.
     For lots of iptables tutorials and examples, see
     <link xlink:href="http://www.linuxguruz.com/iptables/"/>. An overview is
     also available at <xref linkend="sec-fire-iptables"/>.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-kernel">
    <title>Security Features in the Kernel</title>
    <para>
     The following list shows tunable kernel parameters you can use to secure
     your Linux server against attacks. Some of them are defaults already
     within the SLE distributions. To check the current status of any of these
     settings, you can query the kernel (<filename>/proc/sys/...</filename>
     contents). For example, the Source Routing setting is located in the
     <filename>/proc/sys/net/ipv4/conf/all/accept_source_route</filename> file.
     Simply cat the contents of a file to see how the current running kernel is
     setup.
    </para>
    <para>
     For each tunable kernel parameter shown, the change to the entry that
     needs to be affected can be modified or added to the
     <filename>/etc/sysctl.conf</filename> configuration file to make the
     change persistent after a reboots.
    </para>
    <para>
     You can get a list of current kernel settings by using the command:
    </para>
<screen>sysctl -a</screen>
    <para>
     It is even a very good idea to store the output of the kernel settings
     (for comparison or reference) by redirecting the output of the sysctl
     command to a file, e.g.
    </para>
<screen>sysctl -A &gt; /root/sysctl.settings.store</screen>
    <para>
     Because &productname; includes, by default, security-focused kernel tuning
     parameters, you will find the existing
     <filename>/etc/sysctl.conf</filename> file to be sparsely populated. You
     may choose to use the above mentioned <quote>catalog</quote> method of
     storing the complete gamut of kernel settings and then pick-and-choose
     those parameters you want to be reset at reboot. You can place these in
     the <filename>/etc/sysctl.conf</filename> file or they can be inserted
     immediately (into the running kernel) by running the command
     <command>sysctl</command> <option>-p</option> or they will be picked up
     upon a reboot.
    </para>
    <para>
     Many third party applications like Oracle, SAP, DB2, Websphere, etc.
     recommend changing kernel parameters to ensure high performance for I/O or
     CPU processing. Having a full list of current settings can be helpful for
     reference.
    </para>
    <section xml:id="sec-sec-prot-general-kernel-syn-cookie">
     <title>Enable TCP SYN Cookie Protection (default in &productname;11)</title>
     <para>
      A <quote>SYN Attack</quote> is a denial of service attack that consumes
      all the resources on a machine. Any server that is connected to a network
      is potentially subject to this attack. To enable TCP SYN Cookie
      Protection, edit the <filename>/etc/sysctl.conf</filename> file and
      ensure the following line and value exists:
     </para>
<screen>net.ipv4.tcp_syncookies = 1</screen>
    </section>
    <section xml:id="sec-sec-prot-general-route">
     <title>Disable IP Source Routing (default in &productname;11)</title>
     <para>
      Source Routing is used to specify a path or route through the network
      from source to destination. This feature can be used by network people
      for diagnosing problems. However, if an intruder was able to send a
      source routed packet into the network, then he could intercept the
      replies and your server might not know that it's not communicating with a
      trusted server.
     </para>
<screen>net.ipv4.conf.all.accept_source_route = 0</screen>
    </section>
    <section xml:id="sec-sec-prot-general-icpm-redirect">
     <title>Disable ICMP Redirect Acceptance</title>
     <para>
      ICMP redirects are used by routers to tell the server that there is a
      better path to other networks than the one chosen by the server. However,
      an intruder could potentially use ICMP redirect packets to alter the
      hosts's routing table by causing traffic to use a path you didn't intend.
      To disable ICMP Redirect Acceptance, edit the
      <filename>/etc/sysctl.conf</filename> file and add the following line:
     </para>
<screen>net.ipv4.conf.all.accept_redirects = 0</screen>
    </section>
    <section xml:id="sec-sec-prot-general-ip-spoofing">
     <title>Enable IP Spoofing Protection (default in &productname;11)</title>
     <para>
      IP spoofing is a technique where an intruder sends out packets which
      claim to be from another host by manipulating the source address. IP
      spoofing is very often used for denial of service attacks. For more
      information on IP Spoofing, I recommend the article <citetitle>IP
      Spoofing: Understanding the basics</citetitle>.
     </para>
<screen>net.ipv4.conf.all.rp_filter = 1</screen>
    </section>
    <section xml:id="sec-sec-prot-general-icpm-ignore">
     <title>Enable Ignoring to ICMP Requests</title>
     <para>
      If you want or need Linux to ignore <command>ping</command> requests,
      edit the <filename>/etc/sysctl.conf</filename> file and add the following
      line:
     </para>
<screen>net.ipv4.icmp_echo_ignore_all = 1</screen>
     <para>
      This cannot be done in many environments, as even some monitoring systems
      use a rudimentary ICMP (ping) to determine the health of the device on
      the network (or at least its ability to respond).
     </para>
    </section>
    <section xml:id="sec-sec-prot-general-broadcast">
     <title>Enable Ignoring Broadcasts Request (default in &productname;11)</title>
     <para>
      If you want or need Linux to ignore broadcast requests...
     </para>
<screen>net.ipv4.icmp_echo_ignore_broadcasts = 1</screen>
    </section>
    <section xml:id="sec-sec-prot-general-errormsg">
     <title>Enable Bad Error Message Protection (default in &productname;11)</title>
     <para>
      To alert you about bad error messages in the network...
     </para>
<screen>net.ipv4.icmp_ignore_bogus_error_responses = 1</screen>
    </section>
    <section xml:id="sec-sec-prot-general-logging">
     <title>Enable Logging of Spoofed Packets, Source Routed Packets, Redirect Packets</title>
     <para>
      To turn on logging for Spoofed Packets, Source Routed Packets, and
      Redirect Packets, edit the <filename>/etc/sysctl.conf</filename> file and
      add the following line:
     </para>
<screen>net.ipv4.conf.all.log_martians = 1</screen>
     <note>
      <para>
       ue to the way &productname; is setup (with syslog) for network event
       tracking, keep in mind that this may cause a large amount of messages to
       be logged.
      </para>
     </note>
    </section>
    <section xml:id="sec-sec-prot-general-add-random">
     <title>Virtual Address Space Randomization</title>
     <para>
      Starting with the 2.6.x kernel releases Linux now uses address-space
      randomization technique to mitigate buffer overflows. For more
      information, see
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <link xlink:href="http://searchopensource.techtarget.com/tip/1,289483,sid39_gci1144658,00.html"/>
       </para>
      </listitem>
      <listitem>
       <para>
        <link xlink:href="http://lwn.net/Articles/121845/"/>
       </para>
      </listitem>
     </itemizedlist>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-aa">
    <title>&aa;</title>
    <para>
     Included with &productname;, &aa; is an application security tool designed
     to provide an easy-to-use security framework for your applications. &aa;
     proactively protects the operating system and applications from external
     or internal threats, even zero-day attacks, by enforcing good behavior and
     preventing even unknown application flaws from being exploited. &aa;
     security policies, called "profiles", completely define what system
     resources individual applications can access, and with what privileges. A
     number of default profiles are included with &aa;, and using a combination
     of advanced static analysis and learning-based tools, &aa; profiles for
     even very complex applications can be deployed successfully in a matter of
     hours.
    </para>
    <para>
     &aa; consists of:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       a kernel module, shipped with the SUSE Linux kernel, which enforces the
       security profiles.
      </para>
     </listitem>
     <listitem>
      <para>
       a collection of RPMs, also shipped with SUSE Linux, that provide:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         a set of &aa; profiles for numerous programs that ship with
         &productname;
        </para>
       </listitem>
       <listitem>
        <para>
         tools to create and manage new and existing &aa; profiles
        </para>
       </listitem>
       <listitem>
        <para>
         a &yast; user interface to manage reports and notification of security
         events
        </para>
       </listitem>
       <listitem>
        <para>
         documentation about the &aa; tools
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </itemizedlist>
    <para>
     It is best to reboot a system after completing installation, so that &aa;
     can confine all system daemons.
    </para>
    <para>
     The &aa; quick-start and administrative guides are available online here:
    </para>
    <para>
     <link xlink:href="http://www.novell.com/documentation/apparmor/"/>
    </para>
    <para>
     For additional details and step-by-step instructions on the usage and
     configuration of &aa; you can also refer to <xref linkend="part-aaa"/>.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-selinux">
    <title>SELinux</title>
    <para>
     SELinux is an advanced technology for securing Linux systems. Included
     with <quote>basic enablement</quote> in &productname; 11, and included
     with some other distributions by default. Hardening Linux using SELinux
     technology, on its own, warrants its own security HOWTO and is out of
     scope for this guide. The <citetitle>SELinux: NSA's Open Source Security
     Enhanced Linux</citetitle> is very good in regards to SELinux setup and
     usage. As part of the <quote>basic enablement</quote>, SELinux will not be
     officially supported, but packages have now been added to &productname; 11
     to enable its usage with minimal effort. While &aa; is much easier to use
     and has a similar feature set, knowing both will most certainly be
     beneficial.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-remote">
    <title>FTP, <command>telnet</command>, and <command>rlogin</command> (rsh)</title>
    <para>
     The programs/protocols of FTP, <command>telnet</command>, and
     <command>rlogin</command> (rsh) are normally vulnerable to eavesdropping,
     which is one of the main reasons why secure alternatives such as
     <command>ssh</command>, <command>scp</command> or <command>sftp</command>
     should be used instead. It is highly recommended not to run the insecure
     services. Due to the high risk, this guide does not cover these services
     (other than vsftp). It would also be a good idea (and part of our
     guidance, see next section) not to have FTP and Telnet server RPMs
     installed on the system. Note that the EAL 4+ evaluation had vsftp
     installed. The <quote>vs</quote> stands for <quote>very secure</quote> -
     which is a differentiator here when compared to normal ftp.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-remove-packs">
    <title>Removing Unnecessary Software Packages (RPMs)</title>
    <para>
     A very important step in securing a Linux system is to determine the
     primary function(s) or role(s) of the Linux server. Strive for a
     deterministic and specific view of what is installed and running on the
     system. Otherwise it can be difficult to understand what needs to be
     secured and hence securing these Linux systems proactively might prove
     ineffective. Therefore, it is very critical to look at the default list of
     software packages and potentially remove any unneeded package(s) or
     packages that don't comply with your defined security policies.
    </para>
    <para>
     Doing this will result in a smaller number of packages that may require
     updates and will certainly simplify maintenance efforts if/when security
     alerts and/or patches are released. Refer to the note below regarding
     SUSE's efforts around JeOS (Just Enough OS). An example could be, Apache
     or Samba installed on your system - if you don't use them, remove them.
     Also, it is generally recommended and a best practice not to have
     development packages, desktop software packages (e.g. X Server) etc.
     installed on production servers.
    </para>
    <important>
     <para>
      Many 3rd Party vendors like Oracle and IBM have a requirement for both
      the desktop environment and the development libraries to run some of
      their installers. Many organizations will create a silent installation
      (response file) in a dev lab, so this isn't an impact to production
      security.
     </para>
    </important>
    <para>
     Also, other packages like FTP and Telnet daemons should not be installed
     as well unless there is a justified business reason for it (again,
     <command>ssh</command>, <command>scp</command> or <command>sftp</command>
     should be used as replacements).
    </para>
    <para>
     One of the first action items should be to create a Linux image that
     <emphasis>only</emphasis> contains RPMs needed by the system and
     applications, and those needed for maintenance and/or troubleshooting
     purposes. A good approach is to start with a minimum list of RPMs and then
     add packages as needed. It may be time-consuming but worth the efforts.
    </para>
    <note>
     <title>Just Enough Operating System (JeOS)</title>
     <para>
      To this end, shortly after the release of &productname; 10 SP2, SUSE
      developed a program called the SUSE Appliance Program. Included with this
      program is component called <quote>JeOS</quote> (pronounced
      <quote>juice</quote>) which stands for <quote>Just Enough Operating
      System</quote>. JeOS has a very small footprint and can be built to fit
      the very specific needs of a system developer. Main uses of JeOS will be
      for hardware/software appliance or virtual machine development. Key
      benefits of JeOS are efficiency, higher performance, increased security
      and simplified management.
     </para>
    </note>
    <para>
     To generate a list of all installed RPMs - use the following command:
    </para>
<screen>rpm -qa</screen>
    <para>
     To retrieve details about a particular RPM (from the RPM itself), run:
    </para>
<screen>rpm -qi <replaceable>package_name</replaceable></screen>
    <para>
     To check for and report potential conflicts and dependencies when deleting
     an RPM, run:
    </para>
<screen>rpm -e --test <replaceable>package_name</replaceable></screen>
    <para>
     This can be very useful, as running the removal command without a
     <quote>test</quote> can often yield a mass of complaints and require
     manual recursive dependency hunting.
    </para>
    <remark condition="clarity">
     2011-07-12 - fs: The following seems to be a bit out of context...
    </remark>
    <para>
     For information on performing &ay; installations and how to build an
     image, see <xref linkend="book-autoyast"/>.
<!-- &ay;
     develovers keep the &ay; documentation up to date and lists
     enhancements and differences between shipping versions of &ay; on
     ... [tbd] -->
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-patching">
    <title>Patching Linux Systems</title>
    <para>
     Building an infrastructure for the purpose of patch management is another
     very important part of a proactive and secure production Linux
     environment.
    </para>
    <para>
     It is recommended to have a written security policy and procedure to
     handle Linux security updates and issues. For example, a security policy
     should detail the time frame for assessment, testing, and roll out of
     patches. Network related security vulnerabilities should get the highest
     priority and should be addressed immediately within a short time frame.
     The assessment phase should occur within a testing lab, and initial roll
     out should occur on development systems first
    </para>
    <para>
     A separate security log should detail what Linux security notices have
     been received, when patches have been researched and assessed, when
     patches have been applied etc.
    </para>
    <para>
     At this time &suse; releases their patches in three categories, security,
     recommended and optional. There are a few options that can be used to keep
     systems patched, up to date and secure. Each individual system can
     register and then retrieve updates via the SUSE Update website using the
     included &yast; tool – &yast; Online Update. SUSE has also created the
     &smtool; (&smt;) an efficient way to maintain a local repository of
     available/released patches/updates/fixes that systems can then pull from
     (reducing Internet traffic). SUSE also offers &susemgr; for the
     maintenance, patching, reporting and centralized management of Linux
     systems, not just &suse;, but other distributions as well.
    </para>
    <section xml:id="sec-sec-prot-general-patching-you">
     <title>&yast; Online Update</title>
     <para>
      On a per-server basis, installation of important updates and improvements
      is possible using the &yast; Online Update tool. Current updates for the
      &sle; family are available from the product specific update catalogs
      containing patches. Installation of updates and improvements is
      accomplished using &yast; and selecting <guimenu>Online Update</guimenu>
      in the <guimenu>Software</guimenu> Group. All new patches (except the
      optional ones) that are currently available for your system will already
      be marked for installation. Clicking <guimenu>Accept</guimenu> will then
      automatically install these patches.
     </para>
     <para>
      After installation is complete, click the <guimenu>Finish</guimenu>
      button. The system will be patched, current and up-to-date.
     </para>
    </section>
    <section xml:id="sec-sec-prot-general-patching-auto">
     <title>Automatic Online Update</title>
     <para>
      &yast; also offers the possibility to set up an automatic update. Select
      <menuchoice> <guimenu>Software</guimenu> <guimenu> Automatic Online
      Update</guimenu></menuchoice>. Configure a Daily or a Weekly update. Some
      patches, such as kernel updates, require user interaction, which would
      cause the automatic update procedure to stop. Check <guimenu>Skip
      Interactive Patches</guimenu> for the update procedure to proceed
      automatically.
     </para>
     <para>
      In this case, run a manual Online Update from time to install patches
      that require interaction.
     </para>
     <para>
      When <guimenu>Only Download Patches</guimenu> is checked, the patches are
      downloaded at the specified time but not installed. They must be
      installed manually. The patches are downloaded to the rug cache
      directory, <filename>/var/cache/zmd/web</filename>, by default. Use the
      command <command>rug get-prefs cache-directory</command> to get the
      current rug cache directory
     </para>
    </section>
    <section xml:id="sec-sec-prot-general-patching-smt">
     <title>&smtool; - &smt;</title>
     <para>
      The &smtool;for &sle; goes one step further than the Online Update
      process by establishing a proxy system with repository and registration
      targets. This helps customers centrally manage software updates within
      the firewall on a per-system basis, while maintaining their corporate
      security policies and regulatory compliance.
     </para>
     <para>
      The downloadable &smt;
      (<link xlink:href="http://download.novell.com/index.jsp?product_id=&amp;search=Search&amp;families=&amp;date_range=&amp;keywords=subscription+management+tool&amp;sort_by=&amp;results_per_page=&amp;x=20&amp;y=10"/>)
      &smt; is integrated with &ncc;
      (<link xlink:href="http://www.novell.com/customercenter/"/>) and provides
      a repository and registration target that is synchronized with it. This
      can be very helpful in tracking entitlements in large deployments. The
      &smt; maintains all the capabilities of &ncc;, while allowing a more
      secure centralized deployment. It is included with every &sle;
      subscription and is therefore fully supported.
     </para>
     <para>
      The &smt; provides an alternative to the default configuration, which
      requires opening the firewall to outbound connections for each device to
      receive updates. That requirement often violates corporate security
      policies and can be seen as a threat to regulatory compliance by some
      organizations. Through its integration with &ncc;, the &smt; ensures that
      each device can receive its appropriate updates without the need to open
      the firewall, and without any redundant bandwidth requirements.
     </para>
     <para>
      The &smt; also enables customers to locally track their &sle; devices
      (i.e., servers, desktops, or Point of Service terminals) throughout their
      enterprise. Now they can easily determine how many entitlements are in
      need of renewal at the end of a billing cycle without having to
      physically walk through the data center to manually update spreadsheets.
     </para>
     <para>
      The &smt; informs the &sle; devices of any available software updates.
      Each device then obtains the required software updates from the &smt;.
      The introduction of the &smt; improves the interaction among &sle;
      devices within the network and simplifies how they receive their system
      updates. The &smt; enables an infrastructure for several hundred &sle;
      devices per instance of each installation (depending on the specific
      utilization profile). This offers more accurate and efficient server
      tracking.
     </para>
     <para>
      In a nutshell, the &smtool; for &sle; provides customers with:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Assurance of firewall and regulatory compliance
       </para>
      </listitem>
      <listitem>
       <para>
        Reduced bandwidth usage during software updates
       </para>
      </listitem>
      <listitem>
       <para>
        Full support under active subscription from SUSE
       </para>
      </listitem>
      <listitem>
       <para>
        Maintenance of existing customer interface with &ncc;
       </para>
      </listitem>
      <listitem>
       <para>
        Accurate server entitlement tracking and effective measurement of
        subscription usage
       </para>
      </listitem>
      <listitem>
       <para>
        Automated process to easily tally entitlement totals (no more
        spreadsheets!)
       </para>
      </listitem>
      <listitem>
       <para>
        Simple installation process that automatically synchronizes server
        entitlement with &ncc;
       </para>
      </listitem>
     </itemizedlist>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-ports">
    <title>Securing the Network - Open Network Ports Detection</title>
    <para>
     Securing a server requires that you know what it is serving; what services
     are running. Default server installations may have services running that
     aren't self apparent and open network ports that they are using. So, one
     of the most important tasks is to detect and close network ports that are
     not needed. To get a list of listening network ports (TCP and UDP
     sockets), you can use the <command>netstat</command> service run the
     following command:
    </para>
<screen>netstat -tulp</screen>
    <para>
     Be aware that <command>netstat</command> output can be wider than a
     default terminal screen. If the screen is too narrow, the options
     described above will likely cause the output to wrap and be less legible.
    </para>
    <para>
     Below is an example of output from the above command:
    </para>
<screen>
Proto Recv-Q Send-Q Local            Foreign         State   PID/Program
                    Address          Address                 name
tcp   0      0      *:auth           *.*             LISTEN  2328/xinetd
tcp   0      0      local[...].:smtp *.*             LISTEN  2360/sendmail:acce
tcp   0      0      *:ssh            *.*             LISTEN  2317/sshd</screen>
    <para>
     From the output above you can see that three tcp-based services are
     running and listening: xinetd, sendmail, and sshd. Sendmail should not be
     configured to listen for incoming network connections unless the server
     running it is a designated as a mail or relay server. Running a port scan
     from another server will be able to confirm that, but make sure to obtain
     proper permissions to scan/probe a machine on a production network.
    </para>
    <important>
     <para>
      Some organizations consider port scans without permission a security
      offense.
     </para>
    </important>
    <para>
     Using the nmap tool, just such a probe/scan can be run:
    </para>
<screen>&wsI;:~ # nmap -sTU <replaceable>remote_host</replaceable>
Starting nmap 3.70 ( http://www.insecure.org/nmap/ ) at 2004-12-10 22:51 CST
Interesting ports on &wsII; (&wsIIip;):
(The 3131 ports scanned but not shown below are in state: closed)
PORT     STATE         SERVICE
22/tcp   open          ssh
113/tcp  open          auth

Nmap run completed -- 1 IP address (1 host up) scanned in 221.669 seconds
     </screen>
    <para>
     Note that running the <command>nmap</command> command can take quite a
     while (in this example almost 4 minutes) depending on the options used. If
     you remove the UDP port scan (leave out the <option>-U</option> option),
     then <command>nmap</command> will finish the port scan nearly immediately.
     Running it on a local machine will also make it complete quickly. The
     results of <command>nmap</command> can vary widely and might not show all
     listening network sockets depending on the status of the &susefirewall;
     (or other) and if it has been setup to block any ports.
    </para>
    <para>
     From the sample run above, you see that the
     <systemitem class="daemon">xinetd</systemitem> daemon is listening on port
     auth (port 113) for <literal>IDENT</literal> (for more information on this
     service, see
     <xref linkend="sec-sec-prot-general-disable-xinetd-services"/>). You can
     also see that sendmail is not listening for remote incoming network
     connections.
    </para>
    <para>
     Another method (safer) to list all of the TCP and UDP sockets to which
     programs are listening (on a host) is to use the lsof command – which
     lists open files :
    </para>
<screen>&wsI;:~ # lsof -i -n | egrep 'COMMAND|LISTEN|UDP'
COMMAND  PID   USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME
sshd     2317  root   3u   IPv6    6579   0t0      TCP *:ssh (LISTEN)
xinetd   2328  root   5u   IPv4    6698   0t0      TCP *:auth (LISTEN)
sendmail 2360  root   3u   IPv4    6729   0t0      TCP 127.0.0.1:smtp (LISTEN)</screen>
   </section>
   <section xml:id="sec-sec-prot-general-disable-services">
    <title>Disabling Runlevel Services</title>
    <para>
     One of the most important tasks is the removal of any network services
     from a systems start-up (init) process that are not needed. On &suse;
     systems you can list all services which are started at boot time using the
     following command:
    </para>
<screen>chkconfig -l |grep on</screen>
    <para>
     This command will list any service that has been enabled to start at any
     of the 7 init levels. 0 through 6 and also S (single user). Notice there
     may be quite a few services enabled on a given host, but many runlevel
     services (Stand-Alone Services) might not be for network related services.
     There are some services that are only run during the boot process. Make
     sure NOT to disable any runlevel services that are needed by the system to
     run smoothly. For example, many of these type of services will begin with
     a prefix of <literal>boot</literal>.
    </para>
    <para>
     Some examples of Runlevel System Services which you may or may not want to
     enable (check &yast; <guimenu>System Services (Runlevels)</guimenu> module
     for a complete list):
    </para>
    <table>
     <title><systemitem class="service">init</systemitem> Services and their Descriptions - Examples</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>
         <para>
          Service Name
         </para>
        </entry>
        <entry>
         <para>
          Description of Service
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          syslog
         </para>
        </entry>
        <entry>
         <para>
          important for syslog services
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          netfs
         </para>
        </entry>
        <entry>
         <para>
          needed only if there are NFS shares that should be mounted at boot
          time
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          network
         </para>
        </entry>
        <entry>
         <para>
          important for starting network interfaces (e.g. eth0, eth1,
          bonding,...)
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          random
         </para>
        </entry>
        <entry>
         <para>
          used for the system entropy pool
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          atd
         </para>
        </entry>
        <entry>
         <para>
          needed if the at(1) service is used instead of cron
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          apmd
         </para>
        </entry>
        <entry>
         <para>
          Advanced Power Management (APM) daemon is used for laptops and some
          desktops
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          isdn
         </para>
        </entry>
        <entry>
         <para>
          needed if ISDN is being used
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          iptables
         </para>
        </entry>
        <entry>
         <para>
          needed if Netfilter (iptables) Firewall is being used
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          ip6tables
         </para>
        </entry>
        <entry>
         <para>
          needed if ip6tables Firewall is being used
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          pcmcia
         </para>
        </entry>
        <entry>
         <para>
          not needed on servers - needed for laptops
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          irqbalance
         </para>
        </entry>
        <entry>
         <orderedlist spacing="normal">
          <listitem>
           <para>
            important for distributing interrupts across all CPUs
           </para>
          </listitem>
         </orderedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          sendmail
         </para>
        </entry>
        <entry>
         <para>
          needed if Sendmail is used - Procmail should be used which is more
          secure
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          autofs
         </para>
        </entry>
        <entry>
         <para>
          needed if automounter is used - production applications should not be
          dependent on automounter
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          sshd
         </para>
        </entry>
        <entry>
         <para>
          important for logins via SSH
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          portmap
         </para>
        </entry>
        <entry>
         <para>
          needed if e.g. NFS is being used
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          nfslock
         </para>
        </entry>
        <entry>
         <para>
          needed if NFS shares are mounted
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          nfs
         </para>
        </entry>
        <entry>
         <orderedlist spacing="normal">
          <listitem>
           <para>
            needed if server runs the NFS server
           </para>
          </listitem>
         </orderedlist>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          mdmonitor
         </para>
        </entry>
        <entry>
         <para>
          needed only if software RAID is being used
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          crond
         </para>
        </entry>
        <entry>
         <para>
          important for running cron jobs
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          xinetd
         </para>
        </entry>
        <entry>
         <para>
          needed if xinetd services are being used, see /etc/xinetd.d/ for list
          of services
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          cups
         </para>
        </entry>
        <entry>
         <para>
          needed if CUPS is used for the printing system
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          rhnsd
         </para>
        </entry>
        <entry>
         <para>
          needed if server should connect to RHN to check for software updates
          etc.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          sysstat
         </para>
        </entry>
        <entry>
         <para>
          needed to reset system statistics logs
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          audit
         </para>
        </entry>
        <entry>
         <para>
          needed only if Linux Audit Subsystem (LAuS) should run for collecting
          system call audit records
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          psacct
         </para>
        </entry>
        <entry>
         <para>
          needed only if kernel process accounting information is needed
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          smartd
         </para>
        </entry>
        <entry>
         <para>
          important for monitoring disk problems if hard disks support SMART
          technology
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          netdump
         </para>
        </entry>
        <entry>
         <orderedlist spacing="normal">
          <listitem>
           <para>
            important if kernel oops data and memory dumps should be sent to a
            Netdump server for server crashes
           </para>
          </listitem>
         </orderedlist>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     The init (start/stop) scripts of all the runlevel services are found in
     the <filename>/etc/init.d</filename> directory. For example, if you don't
     know what the atd service does, go to <filename>/etc/init.d</filename> and
     open the file <filename>atd</filename>. And in the script look for lines
     that start programs. In the <systemitem class="daemon">atd</systemitem>
     script the <literal>startproc $ATD_BIN $ATD_ARGS</literal> line starts the
     <quote>process</quote> <systemitem class="daemon">atd</systemitem>. Now
     having the name of the program that is started by this service, you can
     check the online pages of <systemitem class="daemon">atd</systemitem> by
     running <command>man atd</command>. This will help you to find out more
     about a system service.
    </para>
    <para>
     To permanently disable e.g. the runlevel service nfs, run:
    </para>
<screen>chkconfig nfs off</screen>
    <para>
     To immediately disable the runlevel service nfs, execute:
    </para>
<screen>/etc/init.d/nfs stop</screen>
    <para>
     or just: <command>rcnfs stop</command>
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-disable-xinetd-services">
    <title><systemitem class="daemon">xinetd</systemitem> Services - Disabling</title>
    <para>
     The <systemitem class="daemon">xinetd</systemitem> daemon is a replacement
     for inetd, the Internet services daemon. It monitors the ports for all
     network services configured in <filename>/etc/xinetd.d</filename>, and
     starts the services in response to incoming connections. To check if
     <systemitem class="daemon">xinetd</systemitem> is enabled and running,
     execute:
    </para>
<screen>&wsI;:~ # chkconfig --list xinetd
xinetd 0:off 1:off 2:off 3:on 4:on 5:on 6:off</screen>
    <para>
     To check the current status of the
     <systemitem class="daemon">xinetd</systemitem> service, execute:
    </para>
<screen>&wsI;:~ # /etc/init.d/xinetd status
Checking for service xinetd: xinetd (pid 2619) is running..</screen>
    <para>
     or just: <command>rcxinetd status</command>
    </para>
    <para>
     If <systemitem class="daemon">xinetd</systemitem> is active, it is very
     important to see which services are active and being controlled by
     <systemitem class="daemon">xinetd</systemitem>. The following command will
     list all services configured in <filename>/etc/xinetd.d</filename> and
     whether <systemitem class="daemon">xinetd</systemitem> monitors the ports
     for these services:
    </para>
<screen>&wsI;:~ # chkconfig --list | awk '/xinetd based services/,/""/'
xinetd based services:
      
  chargen:     off
  chargen-udp: off
  cups-lpd:    off
  cvs:         off
  daytime:     off
  daytime-udp: off
  discard:     off
  discard-udp: off
  echo:        off
  echo-udp:    off
  netstat:     off
  rsync:       off
  sane-port:   off
  servers:     off
  services:    off
  svnserve:    off
  swat:        off
  systat:      off
  tftp:        on
  time:        off
  time-udp:    off
  vnc:         off</screen>
    <para>
     To get a list of only active services for which xinetd monitors the ports,
     you could run (where the <option>-v</option> option of grep does an
     inverse-match) :
    </para>
<screen>&wsI;:~ # chkconfig --list | awk '/xinetd based services/,/""/' | grep -v off
xinetd based services:
      
  tftp:        on</screen>
    <para>
     In the above example you can see that the
     <systemitem class="resource">telnet-server</systemitem> package is not
     installed on the system. If the Telnet Server package
     <systemitem class="resource">telnet-server</systemitem> would be
     installed, it would show up on the list whether it's active or not. Here
     is an example how to disable a service. Assuming the
     <systemitem class="service">tftp</systemitem> service is active, run the
     following commands to disable it and to see how the telnet service entries
     are being updated:
    </para>
<screen>&wsI;:~ # chkconfig -l tftp
xinetd based services:
      
  tftp:        on
&wsI;:~ # cat /etc/xinetd.d/tftp | grep disable
      disable = no
&wsI;:~ # chkconfig tftp off
&wsI;:~ # chkconfig --list tftp
xinetd based services:
      
  tftp:        off
&wsI;:~ # cat /etc/xinetd.d/tftp | grep disable
      disable = yes</screen>
    <para>
     For the TFTP service it would be better to remove the package from the
     system since removal is always safer than just disabling (when possible):
    </para>
<screen>rpm -e tftp</screen>
    <section xml:id="sec-sec-prot-general-disable-xinetd-services-inventory">
     <title>Inventory <systemitem class="daemon">xinetd</systemitem> services</title>
     <para>
      It is important to investigate <emphasis>all</emphasis> active
      <systemitem class="daemon">xinetd</systemitem> services and to disable
      them (or remove their packages) if they are not needed. To find out what
      a service does, here is a viable approach. Using the
      <systemitem class="service">tftp</systemitem> service as an example and
      assuming its function is unknown and it is listed as an active service.
      Execute the following commands:
     </para>
<screen>&wsI;:~ # grep " server" /etc/xinetd.d/tftp
  server = /usr/sbin/in.tftpd
  server_args = -s /tftpboot</screen>
     <para>
      To read the manual:
     </para>
<screen>&wsI;:~ # man in.tftpd
TFTPD(8)               System Manager's Manual              TFTPD(8)



NAME
       tftpd - IPv4 Trivial File Transfer Protocol server

SYNOPSIS
       in.tftpd [options...]  directory...

DESCRIPTION
       tftpd  is  a  server  for the Trivial File Transfer Protocol.
       The TFTP protocol is extensively used to support remote boot-
       ing  of  diskless devices.  The server is normally started by
       inetd, but can also run stand-alone.
[...]</screen>
     <para>
      To determine what package supplies the in.tftpd binary:
     </para>
<screen>&wsI;:~ # rpm -qf /usr/sbin/in.tftpd
tftp-0.48-101.16</screen>
     <para>
      To get a description of TFTP and its usage, etc:
     </para>
<screen>&wsI;:~ # rpm -qi tftp-0.48-101.16| awk '/Description/,/""/'
Description :
The Trivial File Transfer Protocol (TFTP) is normally used only for
booting diskless workstations and for getting or saving network
component configuration files.</screen>
     <para>
      To get a list of what files are installed via the TFTP package (RPM),
      execute the rpm command with the following options:
     </para>
<screen>&wsI;:~ # rpm -ql tftp-0.48-101.16
/etc/xinetd.d/tftp
/usr/bin/tftp
/usr/sbin/in.tftpd
/usr/share/doc/packages/tftp
/usr/share/doc/packages/tftp/README
/usr/share/doc/packages/tftp/README.security
/usr/share/doc/packages/tftp/sample.rules
/usr/share/man/man1/tftp.1.gz
/usr/share/man/man8/in.tftpd.8.gz
/usr/share/man/man8/tftpd.8.gz</screen>
     <para>
      This example described what could be done to find out information about
      services (specifically ones started by
      <systemitem class="daemon">xinetd</systemitem>) even if an online manual
      didn't exist for the binary <filename>in.ftpd</filename>. This example
      yielded a man page – but you may not always find one. The RPM commands
      in the example are very commonly used for a variety of reasons. It is
      also possible to use the &yast; software management interface to retrieve
      all of the resultant information – however having a knowledge of RPM
      command syntax can save quite a bit of time. Again to disable the TFTP
      service, execute the following command:
     </para>
<screen>chkconfig tftp off</screen>
     <para>
      The <systemitem class="daemon">xinetd</systemitem> daemon is quite
      flexible and has many features. Here are just a few functionalities of
      <systemitem class="daemon">xinetd</systemitem>:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Access control for TCP, UDP, and RPC services.
       </para>
      </listitem>
      <listitem>
       <para>
        Access limitations based on time.
       </para>
      </listitem>
      <listitem>
       <para>
        Provides mechanisms to prevent DoS attacks.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      For more specific information on Xinetd, review the documentation and
      usage examples at the xinetd website:
      <link xlink:href="https://web.archive.org/web/20051227095035/http://www.xinetd.org:80/"/>
      and also for some xinetd usage tutorials:
      <link xlink:href="http://www.macsecurity.org/resources/xinetd/tutorial.shtml"/>
     </para>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-inittab">
    <title>Reviewing Inittab and Boot Scripts</title>
    <para>
     The inittab file located in <filename>/etc/inittab</filename> contains a
     running <quote>tab</quote> (table) or list of which processes are to be
     started at bootup during normal system operation. Some 3rd party vendors
     will install an entry there to ensure the initialization and start-up of
     dependent services. E.g. Oracle places cluster services start-up entries
     here to ensure they start at boot time. It is important to review this
     file and verify all entries (in the <filename>/etc/inittab</filename>) are
     appropriate in your environment.
    </para>
    <para>
     It is <emphasis>highly</emphasis> recommended to trap the <keycombo>
     <keycap function="control"/> <keycap function="alt"/>
     <keycap function="delete"/> </keycombo> key sequence in order to prevent
     accidental reboots. The following command uses the sed string processor to
     find the <literal>ca::ctrlaltdel</literal> string and add a
     <literal>#</literal> symbol to the front of it. This will comment-out the
     whole line – thereby disabling the entry:
    </para>
<screen>sed -i 's/\(ca::ctrlaltdel:\)/#\1/g' /etc/inittab</screen>
    <para>
     It is generally recommended to make the default runlevel of a production
     system set to <quote>3</quote> - which means, multiuser
     <emphasis>with</emphasis> networking but <emphasis>without</emphasis>
     graphics. In other words – the X subsystem should not be running. It
     uses server compute cycles and is generally not needed. In this case, it
     should be removed – if not used. Setting the default runlevel is
     normally done via &yast; at time of installation – or by using the
     <guimenu>System Services (Runlevel)</guimenu> tool in &yast;. This tool
     will set the inittab for you, or you can make the modification manually
     (ensuring <literal>id:3:initdefault</literal> is in the inittab):
    </para>
<screen>&wsI;:~ # grep ':initdefault' /etc/inittab
id:3:initdefault:</screen>
    <para>
     To have changes in <filename>/etc/inittab</filename> become effective
     immediately, you can <quote>tell</quote> init to re-examine the inititab
     like this:
    </para>
<screen>telinit q</screen>
    <para>
     Reviewing the System Services tool in &yast; is a great way to determine
     what will be started on a system. The <guimenu>System Services
     (Runlevel)</guimenu> tool has a normal and <guimenu>Expert</guimenu> mode.
     Switch to <guimenu>Expert</guimenu> to see some of the boot services.
     These can be important for things like multipath, etc.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-restrict-access">
    <title>Restricting System Access from Servers and Networks</title>
    <para>
     Normally a firewall is used to protect a server from other servers and
     networks – or to protect an environment from the server itself. However,
     you can also protect a server or more accurately, an individual service
     using a TCP wrapper (which is a function of
     <systemitem class="daemon">xinetd</systemitem> – already discussed
     above).
    </para>
    <para>
     The <systemitem class="daemon">xinetd</systemitem> super server that comes
     with &productname; provides a built-in TCP wrapper functionality. This can
     be used to specifically define network services to accept or deny incoming
     connections from specified hosts and networks. The TCP wrappers implements
     access control through the use of two files,
     <filename>/etc/hosts.allow</filename> and
     <filename>/etc/hosts.deny</filename>. Note that the
     <filename>hosts.allow</filename> file takes precedence over the
     <filename>hosts.deny</filename> file. And you may want to change the
     permissions on the two configuration files since they are both world
     readable. An important difference between the security provided by a TCP
     wrapper vs. the use of netfilter (iptables) – is that netfilter works at
     the network layer (layer 2) and can provide security before the traffic
     goes up the stack to the application layers. The trade-off however is that
     a TCP wrapper allows for the use of a <quote>banner</quote> - or a welcome
     message (per service) and some other things. It is best to know what an
     organization requires – so the best recommendation can be made.
    </para>
    <para>
     Generally, a best-practice strategy is to block all incoming requests by
     default, and allow only specific hosts or networks to connect. Commonly
     called - <quote>deny-all, permit-few</quote> this is the strategy that is
     proposed here. First, edit the <filename>/etc/hosts.deny</filename> file
     and add the following line:
    </para>
<screen>ALL: ALL</screen>
    <para>
     Then, in order to accept incoming SSH connections from specific hosts
     (e.g. nodes <systemitem class="systemname">sles-ha1</systemitem>,
     <systemitem class="systemname">sles-ha2</systemitem> and
     <systemitem class="systemname">sles-ha3</systemitem>, modify the
     <filename>/etc/hosts.allow</filename> file and add the following line:
    </para>
<screen>sshd: sles-ha1 sles-ha2 sles-ha3</screen>
    <para>
     To accept incoming SSH connections from all servers from a specific
     network, add the name of the subnet to
     <filename>/etc/hosts.allow</filename>. Adjust the entry like this:
    </para>
<screen>sshd: sles-ha1 sles-ha2 sles-ha3 .network.&exampledomain;</screen>
    <para>
     Remember, each service can be defined separately. In order to accept
     incoming portmap connections from the host at IP address
     <literal>192.168.0.1</literal> and from the subnet
     <literal>192.168.5</literal>, the following modification can be made to
     <filename>/etc/hosts.allow</filename>:
    </para>
<screen>portmap: 192.168.0.1 192.168.5.</screen>
    <para>
     To accept connections from all servers on the subnet named
     .network.&exampledomain; but not from host
     badhost.network.&exampledomain;, add the following line to the
     <filename>/etc/hosts.allow</filename> file:
    </para>
<screen>ALL: .network.&exampledomain; EXCEPT badhost.network.&exampledomain;</screen>
    <para>
     Here are other examples that show some features of TCP wrapper: If you
     just want to restrict ssh connections without configuring or using
     <filename>/etc/hosts.deny</filename>, you can add the following entries to
     <filename>/etc/hosts.allow</filename>:
    </para>
<screen>sshd: rac1cluster rac2cluster rac3cluster
sshd: ALL: DENY</screen>
    <para>
     The version of TCP wrapper that comes with &productname; also supports the
     extended options documented in the <literal>hosts_options</literal> man
     page. Here is an example how an additional program can be spawned in e.g.
     the <filename>/etc/hosts.allow</filename> file:
    </para>
<screen>sshd: ALL : spawn echo "Login from %c to %s" | mail -s "Login Info for %s" log@loghost</screen>
    <para>
     For information on the % expansions, see <command>man
     hosts_access</command>.
    </para>
    <para>
     The TCP wrapper is quite flexible. And
     <systemitem class="daemon">xinetd</systemitem> provides its own set of
     host-based and time-based access control functions. You can even tell
     <systemitem class="daemon">xinetd</systemitem> to limit the rate of
     incoming connections. Various documentations about the
     <systemitem class="daemon">xinetd</systemitem> super daemon on the
     Internet and should be considered recommended reading. Just remember the
     trade-offs between a TCP wrapper and the &susefirewall;
     (netfilter/iptables).
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-ssh">
    <title>Securing SSH</title>
    <para>
     Many network services like telnet, rlogin, and rsh are vulnerable to
     eavesdropping which is one of several reasons why SSH should be used
     instead. The &productname; default configuration for SSH meets the
     security requirements for many environments. However, there are a few
     parameters in <filename>/etc/ssh/sshd_config</filename> that you may want
     to change.
    </para>
    <para>
     The section on Restricting System Access from Servers and Networks shows
     how direct logins can be disabled for shared and system accounts including
     root. But it's prudent to disable direct root logins at the SSH level as
     well.
    </para>
<screen>PermitRootLogin no</screen>
    <para>
     Also ensure to have privilege separation enabled where the daemon is split
     into two parts. With privilege separation a small part of the code runs as
     root and the rest of the code runs in a chroot jail environment.
    </para>
<screen>UsePrivilegeSeparation yes</screen>
    <para>
     Since SSH protocol version 1 is not as secure you may want to limit the
     protocol to version 2 only:
    </para>
<screen>Protocol 2</screen>
    <para>
     You may also want to prevent SSH from setting up TCP port and X11
     forwarding if you don't need it:
    </para>
<screen>AllowTcpForwarding no
X11Forwarding no</screen>
    <para>
     Ensure the StrictModes directive is enabled which checks file permissions
     and ownerships of some important files in the user's home directory like
     <filename>~/.ssh</filename>, <filename>~/.ssh/authorized_keys</filename>
     etc. If any checks fail, the user won't be able to log in.
    </para>
<screen>StrictModes yes</screen>
    <para>
     Ensure that all host-based authentications are disabled. These methods
     should be avoided as primary authentication.
    </para>
<screen>IgnoreRhosts yes
HostbasedAuthentication no
RhostsRSAAuthentication no</screen>
    <para>
     Disable sftp if it's not needed (by commenting it out with the
     <literal>#</literal>):
    </para>
<screen>#Subsystem sftp /usr/lib/misc/sftp-server</screen>
    <para>
     After changing any directives make sure to restart the
     <systemitem class="daemon">sshd</systemitem> daemon:
    </para>
<screen>/etc/init.d/sshd restart</screen>
   </section>
   <section xml:id="sec-sec-prot-general-postfix">
    <title>Securing Postfix</title>
    <para>
     Postfix is a replacement for Sendmail and has several security advantages
     over Sendmail. Postfix is the default mail system in &productname; and
     consists of several small programs that each performs their own small task
     – most of these programs run in a chroot jail. This is another reason
     why Postfix is recommended over Sendmail.
    </para>
    <para>
     Linux servers that are not dedicated mail or relay servers should not
     accept external e-mails. However, it is important for production servers
     to send local e-mails to a relay server – some security setups (e.g. the
     seccheck scripts) can be configured to send e-mails to someone other than
     &rootuser;, even off the local system.
    </para>
    <para>
     Verify the following parameters in
     <filename>/etc/postfix/main.cf</filename> are set to ensure that Postfix
     accepts only local e-mails for delivery (look towards the bottom of the
     file as the top portion is mostly commented-out example entries and
     explanations):
    </para>
<screen>mydestination = $myhostname, localhost.$mydomain, localhost
inet_interfaces = localhost</screen>
    <para>
     The <literal>mydestination</literal> parameter lists all domains to
     receive e-mails for. The <literal>inet_interfaces</literal> parameter
     specifies the network to listen on. After reconfiguring Postfix, a restart
     of the mail system is necessary:
    </para>
<screen>rcpostfix restart</screen>
    <para>
     Verify that Postfix is still listening for network requests (incoming) by
     running one of these commands from another host:
    </para>
<screen>nmap -sT -p 25 <replaceable>remote_host</replaceable>
telnet &lt;remote_host&gt; 25</screen>
    <note>
     <para>
      Running these commands on the local host will provide inaccurate results
      since Postfix is supposed to accept connections from the local node –
      use an external host for correct results.
     </para>
    </note>
   </section>
   <section xml:id="sec-sec-prot-general-nfs">
    <title>Filesystems: Securing NFS</title>
    <para>
     NFS (Network File System) allows servers to share files over a network.
     But like all network services using NFS involves risks.
    </para>
    <para>
     Here are some basic rules:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       NFS should not be enabled if not needed.
      </para>
     </listitem>
     <listitem>
      <para>
       If NFS is truly needed, use a TCP wrapper to restrict. remote access
      </para>
     </listitem>
     <listitem>
      <para>
       Ensure to export only to those hosts that really need access.
      </para>
     </listitem>
     <listitem>
      <para>
       Use a fully qualified domain name to diminish any spoofing attempts.
      </para>
     </listitem>
     <listitem>
      <para>
       Export only as read-only whenever possible.
      </para>
     </listitem>
     <listitem>
      <para>
       Use NFS only over TCP.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     If you don't have shared directories to export, then ensure that the NFS
     service is <emphasis>not</emphasis> enabled nor running on the system:
    </para>
    <para>
     Check the nfs service status:
    </para>
<screen>&wsI;:~ # /etc/init.d/nfsserver status
Checking for kernel based NFS server:
idmapd                                                    running
mountd                                                    unused
statd                                                     unused
nfsd                                                      unused</screen>
    <para>
     Check the current runlevels:
    </para>
<screen>&wsI;:~ # chkconfig -l nfsserver
nfsserver 0:off 1:off 2:off 3:off 4:off 5:off 6:off</screen>
    <section xml:id="sec-sec-prot-general-nfs-start">
     <title>Enabling and Starting NFS Server</title>
     <para>
      If NFS must be used, it can be activated using the following commands on
      &productname; or more simply and securely with the &yast; plug-in
      (ncurses). Access it directly from command line with <command>yast
      nfs-server</command> or <command>yast nfs-client</command> – or
      manually:
     </para>
<screen>chkconfig nfs on
rcnfs start</screen>
     <para>
      Portmapper information:
     </para>
<screen>&wsI;:~ # rpcinfo -p <replaceable>server</replaceable>
   program vers proto   port
    100000    2   tcp    111  portmapper
    100000    2   udp    111  portmapper
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
    100005    1   udp    623  mountd
    100005    1   tcp    626  mountd
    100005    2   udp    623  mountd
    100005    2   tcp    626  mountd
    100005    3   udp    623  mountd
    100005    3   tcp    626  mountd</screen>
     <para>
      If you run it from an "untrusted" server or network, you should get the
      following output:
     </para>
<screen>&wsI;:~ # rpcinfo -p <replaceable>server</replaceable>
No remote programs registered.</screen>
    </section>
    <section xml:id="sec-sec-prot-general-nfs-export">
     <title>Exporting NFS File Systems</title>
     <para>
      To allow a client access to a file system or directory, the
      <filename>/etc/exports</filename> serves as the access control list. To
      give the network "network.&exampledomain;" read-only access to
      <filename>/pub</filename>, the entries in
      <filename>/etc/exports</filename> would look like as follows:
     </para>
<screen>
      /pub *.network.&exampledomain;(ro,sync)
     </screen>
     <para>
      It is very important <emphasis>not</emphasis> to give write access to NFS
      clients if not absolutely needed! Entries in
      <filename>/etc/exports</filename> are exported read-only
      (<option>ro</option> option) by default. To allow servers
      <systemitem class="systemname">sles-ha1</systemitem>,
      <systemitem class="systemname">sles-ha2</systemitem> and
      <systemitem class="systemname">sles-ha3</systemitem> read-write access to
      the <filename>/data/MYSQL</filename> directory, the entries in
      <filename>/etc/exports</filename> would look like as follows:
     </para>
<screen>/data/MYSQL sles-ha1.&exampledomain;(rw,sync) sles-ha2.&exampledomain;(rw,sync) sles-ha3.&exampledomain;(rw,sync)
     </screen>
     <para>
      Note that the options <emphasis>must not</emphasis> be separated from the
      hostnames or networks with whitespace(s). Also, fully qualified domain
      names should <emphasis>always</emphasis> be used to diminish spoofing
      attempts. All entries in <filename>/etc/exports</filename> are exported
      with the <option>root_squash</option> option (<quote>root
      squashing</quote>) by default. This means that a root user on a client
      machine does not have root privileges (root access) to root-owned files
      on exported NFS file systems/directories. It is not recommended to turn
      <quote>root squashing</quote> off using the
      <option>no_root_squash</option> option! After you've made all your
      entries in <filename>/etc/exports</filename>, you can export all file
      systems/directories using the following command:
     </para>
<screen>exportfs -a</screen>
     <para>
      To unexport all shared file systems/directories, run:
     </para>
<screen>exportfs -ua</screen>
     <para>
      To see all shared file systems/directories, run:
     </para>
<screen>&wsI;:~ # showmount -e localhost
Export list for localhost:

/pub *.network.&exampledomain;/data/MYSQL
sles-ha1.&exampledomain;,sles-ha2.&exampledomain;,sles-ha3.&exampledomain;</screen>
    </section>
    <section xml:id="sec-sec-prot-general-nfs-tcp">
     <title>Using NFS over TCP</title>
     <para>
      If you need NFS, it is recommended to use NFS only over TCP since NFS
      over UDP is not secure. All 2.4 and later kernels support NFS over TCP on
      the client side. Server support for TCP appears in later 2.4 kernels and
      beyond.In order to mount a shared directory using NFS over TCP, it is
      necessary to use the <option>proto=tcp</option> mount option:
     </para>
<screen>mount -o proto=tcp <replaceable>server_name</replaceable>:/pub /usr/local/pub
     </screen>
     <para>
      Verify that the target directory, in this case
      <filename>/usr/local/pub</filename>, exists on the client:
     </para>
     <para>
      &wsI;:~ # mount [...] <replaceable>server_name</replaceable>:/pub on
      /usr/local/pub type nfs (rw,proto=tcp,addr=&nfsip;)
     </para>
     <para>
      To have the shared directory mounted on the client at boot time, use the
      <filename>/etc/fstab</filename> file. For the above example, the
      <filename>/etc/fstab</filename> entry could look like this:
     </para>
<screen><replaceable>server_name</replaceable>:/pub /usr/local/pub nfs rsize=8192,wsize=8192,timeo=14,intr,tcp 0 0
     </screen>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-scp">
    <title>Copying Files Using SSH Without Providing Login Prompts</title>
    <para>
     This example is needed in some cases in order to enable files to be copied
     over the network using ssh without providing an interactive login prompt.
     This allows trusted hosts to be set up – an example of federation.
    </para>
    <para>
     SSH can allow a forced command using the <quote>command</quote> option.
     Using this option it is possible to disable scp (secure copy) and enforce
     every passed ssh command to be ignored. On the server side where you want
     to retrieve the file from, add the following entry to the beginning of the
     SSH key in the <filename>~/.ssh/authorized_keys2</filename> file (the
     <filename>~</filename> represents a particular users <quote>home</quote>
     directory – &rootuser;'s home directory is <filename>/root</filename>
     – other users typically reside in
     <filename>/home/<replaceable>username</replaceable></filename>):
    </para>
<screen>command="/bin/cat ~/&lt;file_name&gt;" ssh-dss XXXYYYzzZ1122AAbbCC...{etc}
     </screen>
    <para>
     To copy now the file from the remote server, run the following command:
    </para>
    <para>
     ssh <replaceable>user</replaceable>@<replaceable>server</replaceable>
     <replaceable>local_file</replaceable>
    </para>
    <para>
     Since <command>/bin/cat</command> is run on the server side, its output
     has to be redirected to the local file.
    </para>
    <para>
     Another approach is to replace the <command>/bin/cat</command> (referenced
     above) with your own script that checks the passed SSH commands by reading
     the environment variable <envar>$SSH_ORIGINAL_COMMAND</envar>. For
     example:
    </para>
<screen>#!/bin/ksh
 if [[ $SSH_ORIGINAL_COMMAND = "File1" ||
       $SSH_ORIGINAL_COMMAND = "File2" ]]
 then
     /bin/cat $SSH_ORIGINAL_COMMAND
 else
     echo "Invalid file name!"
     exit 1
 fi</screen>
    <para>
     So you replace the <command>/bin/cat</command> portion with the script
     name in <filename>~/.ssh/authorized_keys2</filename>, and run the
     following command to copy <filename>Foo1</filename>:
    </para>
<screen>ssh <replaceable>user</replaceable>@<replaceable>server</replaceable> Foo1 &gt; <replaceable>local_file</replaceable></screen>
    <para>
     To copy <filename>Foo 2</filename>, run:
    </para>
<screen>ssh <replaceable>user</replaceable>@<replaceable>server</replaceable> Foo2 &gt; <replaceable>local_file</replaceable></screen>
    <para>
     With the modifications above, every other variety of passed parameters
     will return errors.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-check-perms">
    <title>Checking File Permissions and Ownership</title>
    <para>
     The following sections deal with some of the ways in which the default
     permissions and file settings can be modified to enhance the security of a
     host. It is important to note that the use of the default &productname;
     utilities like <command>seccheck</command> - can be run to lock down and
     improve the general file security and user environment. However, it is
     beneficial to understand how to modify these things.
    </para>
    <para>
     &productname; hosts include 3 defaults settings for file permissions:
     <filename>permissions.easy</filename>,
     <filename>permissions.secure</filename>, and
     <filename>permissions.paranoid</filename>, all located in the
     <filename>/etc</filename> directory. The purpose of these files is to
     define special permissions, such as world-writable directories or, for
     files, the setuser ID bit (programs with the setuser ID bit set do not run
     with the permissions of the user that has launched it, but with the
     permissions of the file owner, in most cases &rootuser;).
    </para>
    <para>
     Administrators can use the file
     <filename>/etc/permissions.local</filename> to add their own settings. The
     easiest way to implement one of the default permission rule-sets above is
     to use the <guimenu>Local Security</guimenu> module in &yast;.
    </para>
    <para>
     Each of the following topics will be modified by a selected rule-set, but
     the information is important to understand on its own.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-umask">
    <title>Default umask</title>
    <para>
     The <command>umask</command> (user file-creation mode mask) command is a
     shell built-in command which determines the default file permissions for
     newly created files. This can be overwritten by system calls but many
     programs and utilities make use of <command>umask</command>. By default,
     SUSE sets <command>umask</command> to <literal>022</literal>. You can
     modify this by changing the value in <filename>/etc/profile</filename>.
    </para>
    <para>
     The <command>id</command> command will print out the current user identity
     information. Example from a non-root prompt:
    </para>
<screen>&wsI;:~ &gt; id
uid=1000(ne0) gid=100(users) groups=16(dialout),33(video),100(users)</screen>
    <para>
     And to determine the active umask – use the umask command:
    </para>
<screen>&wsI;:~ &gt; umask
0022</screen>
    <para>
     Now for comparison sake – the same commands from the root user:
    </para>
<screen>&wsI;:~ # id
uid=0(root) gid=0(root) groups=0(root)
&wsI;:~ # umask
0022</screen>
   </section>
   <section xml:id="sec-sec-prot-general-s-bit">
    <title>SUID/SGID Files</title>
    <para>
     When the SUID (set user ID) or SGID (set group ID) bits are set on an
     executable, it executes with the UID or GID of the owner of the executable
     rather than that of the person executing it. This means that, for example,
     all executables that have the SUID bit set and are owned by root are
     executed with the UID of root. A good example is the passwd command that
     allows ordinary users to update the password field in the /etc/shadow file
     which is owned by root.
    </para>
    <para>
     But SUID/SGID bits can be misused when the SUID/SGID executable has a
     security hole. Therefore, you might want to search the entire system for
     SUID/SGID executables and document it. For example, ensure that code
     developers don't set SUID/SGID bits on their programs if it's not an
     absolute requirement. Very often you can use workarounds like removing
     just the executable bit for world/others. However, a better approach is to
     change the design of the software if possible.
    </para>
    <para>
     To search the entire system for SUID or SGID files, you can run the
     following command:
    </para>
<!-- fs 2011-10-17: 
    This and the following find examples should probably also exclude /sys
-->
<screen>find / -path /proc -prune -o -type f -perm +6000 -ls</screen>
    <para>
     The <option>-prune</option> option in this example is used to skip the
     /proc file system.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-filepermissions">
    <title>World-Writable Files</title>
    <para>
     World-writable files are a security risk since it allows anyone to modify
     them. Additionally, world-writable directories allow anyone to add or
     delete files. To locate world-writable files and directories, you can use
     the following command:
    </para>
<screen>find / -path /proc -prune -o -perm -2 ! -type l -ls</screen>
    <para>
     The <option>! -type l</option> parameter skips all symbolic links since
     symbolic links are always world-writable. However, this is not a problem
     as long as the target of the link is not world-writable, which is checked
     by the above find command.
    </para>
    <para>
     World-Writable directories with sticky bit such as the
     <filename>/tmp</filename> directory do not allow anyone except the owner
     of a file to delete or modify it in this directory. The sticky bit makes
     files stick to the user who created it and it prevents other users from
     deleting and renaming the files. Therefore, depending on the purpose of
     the directory world-writable directories with sticky are usually not an
     issue. An example is the <filename>/tmp</filename> directory:
    </para>
<screen>&wsI;:~ &gt; ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>
    <para>
     The <literal>t</literal> mode, which denotes the sticky bit, allows files
     to be deleted and renamed only if the user is the owner of this file or
     the owner of the directory.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-orphaned">
    <title>Orphaned or Unowned Files</title>
    <para>
     Files not owned by any user or group might not necessarily be a security
     problem in itself. However, unowned files could pose a security problem in
     the future. For example, if a new user is created and the new users
     happens to get the same UID as the unowned files have, then this new user
     will automatically become the owner of these files.
    </para>
    <para>
     To locate files not owned by any user or group, use the following command:
    </para>
<screen>find / -path /proc -prune -o -nouser -o -nogroup</screen>
   </section>
   <section xml:id="sec-sec-prot-general-accounts">
    <title>Various Account Checks</title>
    <para/>
    <section xml:id="sec-sec-prot-general-accounts-unlocked">
     <title>Unlocked Accounts</title>
     <para>
      It is important that all system and vendor accounts that are not used for
      logins are locked.To get a list of unlocked accounts on your system, you
      can check for accounts that do <emphasis>not</emphasis> have an encrypted
      password string starting with <literal>!</literal> or
      <literal>*</literal> in the <filename>/etc/shadow</filename> file. If you
      lock an account using <command>passwd</command> <option>-l</option>, it
      will put a <literal>!!</literal> in front of the encrypted password,
      effectively disabling the password. If you lock an account using
      <command>usermod</command> <option>-L</option>, it will put a
      <literal>!</literal> in front of the encrypted password. Many system and
      shared accounts are usually locked by default by having a
      <literal>*</literal> or <literal>!!</literal> in the password field which
      renders the encrypted password into an invalid string. Hence, to get a
      list of all unlocked (encryptable) accounts, run
      (<command>egrep</command> is used to allow use of regular-expressions):
     </para>
<screen>egrep -v '.*:\*|:\!' /etc/shadow | awk -F: '{print $1}'</screen>
     <para>
      Also make sure all accounts have a <literal>x</literal> in the password
      field in <filename>/etc/passwd</filename>. The following command lists
      all accounts that do not have a <literal>x</literal> in the password
      field:
     </para>
<screen>grep -v ':x:' /etc/passwd</screen>
     <para>
      A <literal>x</literal> in the password fields means that the password has
      been shadowed, i.e. the encrypted password has to be looked up in the
      <filename>/etc/shadow</filename> file. If the password field in
      <filename>/etc/passwd</filename> is empty, then the system will not
      lookup the shadow file and it will not prompt the user for a password at
      the login prompt.
     </para>
    </section>
    <section xml:id="sec-sec-prot-general-accounts-unused">
     <title>Unused Accounts</title>
     <para>
      All system or vendor accounts that are not being used by users,
      applications, by the system or by daemons should be removed from the
      system. You can use the following command to find out if there are any
      files owned by a specific account:
     </para>
<screen>find / -path /proc -prune -o -user <replaceable>account</replaceable> -ls</screen>
     <para>
      The <option>-prune</option> option in this example is used to skip the
      /proc file system. If you are sure that an account can be deleted, you
      can remove the account using the following command:
     </para>
<screen>userdel -r <replaceable>account</replaceable></screen>
     <para>
      Without the <option>-r</option> option userdel will not delete the user's
      home directory and mail spool
      (<filename>/var/spool/mail/<replaceable>user</replaceable></filename>).
      Note that many system accounts have no home directory.
     </para>
    </section>
   </section>
   <section xml:id="sec-sec-prot-general-single-user">
    <title>Single User Mode Password for &rootuser;</title>
    <para>
     &suse; includes the following entry in the
     <filename>/etc/inittab</filename> file to ensure that a root password is
     required for Single User Mode logins:
    </para>
<screen>~~:S:respawn:/sbin/sulogin</screen>
    <note>
     <para>
      This works well and will even restart the sulogin if terminated, but it
      can be easily circumvented!
     </para>
    </note>
    <para>
     The &grub; prompt can accept parameters allowing the execution of an
     alternate program – like the Bash shell (e.g.
     <option>init=/bin/bash</option>). This will place you at a root shell
     prompt without a password. This further enhances the need to password
     protect the &grub; boot loader
<!-- (as discussed in
     <xref linkend="cha-setup-for-eal-securing-background-boot"/>) -->
     .
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-pw-aging">
    <title>Enabling Password Aging</title>
    <para>
     Password expirations are a general best practice&mdash;but might need to
     be excluded for some system and shared accounts (e.g. Oracle, etc).
     Expiring password on those accounts could lead to system outages if the
     application account expires.
    </para>
    <para>
     Typically a corporate policy should be developed that dictates
     rules/procedures regarding password changes for system and shared
     accounts. However, normal user account passwords should expire
     automatically. The following example shows how password expiration can be
     setup for individual user accounts.
    </para>
    <para>
     The following files and parameters in the table can be used when a new
     account is created with the <command>useradd</command> command. Settings
     such as these are stored for each user account in the
     <filename>/etc/shadow</filename> file. If using the &yast; tool
     (<guimenu>User and Group Management</guimenu>) to add users, the settings
     are available on a per-user basis. Here are the various
     settings&mdash;some of which can also be system-wide (e.g. modification of
     <filename>/etc/login.defs</filename> and
     <filename>/etc/default/useradd</filename>):
    </para>
    <informaltable>
     <tgroup cols="3">
      <tbody>
       <row>
        <entry>
         <para>
          <filename>/etc/login.defs</filename>
         </para>
        </entry>
        <entry>
         <para>
          <literal>PASS_MAX_DAYS</literal>
         </para>
        </entry>
        <entry>
         <para>
          Maximum number of days a password is valid.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/login.defs</filename>
         </para>
        </entry>
        <entry>
         <para>
          <literal>PASS_MIN_DAYS</literal>
         </para>
        </entry>
        <entry>
         <para>
          Minimum number of days before a user can change the password since
          the last change.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/login.defs</filename>
         </para>
        </entry>
        <entry>
         <para>
          <literal>PASS_WARN_AGE</literal>
         </para>
        </entry>
        <entry>
         <para>
          Number of days when the password change reminder starts.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/default/useradd</filename>
         </para>
        </entry>
        <entry>
         <para>
          <literal>INACTIVE</literal>
         </para>
        </entry>
        <entry>
         <para>
          Number of days after password expiration that account is disabled.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/default/useradd</filename>
         </para>
        </entry>
        <entry>
         <para>
          <literal>EXPIRE</literal>
         </para>
        </entry>
        <entry>
         <para>
          Account expiration date in the format YYYY-MM-DD.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <note>
     <para>
      Users created prior to these modifications will not be affected.
     </para>
    </note>
    <para>
     Ensure that the above parameters are changed in the
     <filename>/etc/login.defs</filename> and
     <filename>/etc/default/useradd</filename> files. Review of the
     <filename>/etc/shadow</filename> file will show how these settings get
     stored after adding a user.
    </para>
    <para>
     To create a new user account, execute the following command:
    </para>
<screen>useradd -c "<replaceable>Test User</replaceable>" -g <replaceable>users</replaceable><replaceable>test</replaceable></screen>
    <para>
     The <option>-g</option> option specifies the primary group for this
     account:
    </para>
<screen>&wsI;:~ # id <replaceable>test</replaceable>
uid=509(test) gid=100(users) groups=100(users)</screen>
    <para>
     The settings in <filename>/etc/login.defs</filename> and
     <filename>/etc/default/useradd</filename> are recorded for the test user
     in the <filename>/etc/shadow</filename> file as follows:
    </para>
<screen>&wsI;:~ # grep <replaceable>test</replaceable> /etc/shadow
test:!!:12742:7:60:7:14::</screen>
    <para>
     Password aging can be modified at any time by use of the
     <command>chage</command> command. To disable password aging for system and
     shared accounts, you can run the following chage command:
    </para>
<screen>
     chage -M 99999 <replaceable>system_account_name</replaceable></screen>
    <para>
     To get password expiration information:
    </para>
<screen>chage -l <replaceable>system_account_name</replaceable></screen>
    <para>
     For example:
    </para>
<screen>&wsI;:~ # chage -l <replaceable>test</replaceable>
Minimum: 7
Maximum: 60
Warning: 7
Inactive: 14
Last Change: Jan 11, 2011
Password Expires: Mar 12, 2011
Password Inactive: Mar 26, 2011
Account Expires: Never</screen>
   </section>
   <section xml:id="sec-sec-prot-general-pw-strength">
    <title>Stronger Password Enforcement</title>
    <para>
     On an audited system it is important to restrict people from using simple
     passwords that can be cracked too easily. However, if the passwords being
     enforced are too strong, people will write them down. Strong passwords
     that are written down are not much safer than weak passwords. Some will
     argue that strong passwords protect you against dictionary attacks and
     those type of attacks can be defeated by locking accounts after a few
     failed attempts. However, this is not always an option. If set up like
     this, locking system accounts could bring down your applications and
     systems which would be nothing short of a denial of service attack –
     another issue.
    </para>
    <para>
     At any rate, it is important to practice effective password management
     safety. Most companies require that passwords have at the very least a
     number, another alpha character, and one upper case letter. Policies vary
     – but maintaining a balance between password strength/complexity and
     management is sometimes difficult.
    </para>
   </section>
   <section xml:id="sec-sec-prot-general-pam">
    <title>Leveraging an Effective pam-stack</title>
    <para>
     Linux-PAM (Pluggable Authentication Modules for Linux) is a suite of
     shared libraries that enable the local system administrator to choose how
     applications authenticate users.
    </para>
    <para>
     It is strongly recommended to familiarize oneself with the capabilities of
     PAM – and how this architecture can be leveraged to provide the
     <quote>best</quote> authentication setup for an environment. This
     configuration can be done once – and implemented across all systems (a
     standard) or can be enhanced for individual hosts (enhanced security –
     by host / service / application). The key is to realize how flexible the
     architecture is and how incredibly flexible it is.
    </para>
    <para>
     To learn more about the PAM architecture – you can find PAM
     documentation on a &productname; system in the
     <filename>/usr/share/doc/packages/pam</filename> directory (in a variety
     of formats).
    </para>
    <para>
     The following discussions are examples of how to modify the default pam
     stacks&mdash;specifically around password policies&mdash;e.g. password
     strength, password re-use and account locking. While these are only a few
     of the possibilities, they serve as a good start and demonstrate PAM's
     flexibility.
    </para>
    <section xml:id="sec-sec-prot-general-pam-pw-strength">
     <title>Password Strength</title>
     <para>
      &productname; can leverage the
      <systemitem class="library">pam_cracklib</systemitem> library to test for
      weak passwords – and to suggest using a stronger one if it determines
      obvious weakness. The following parameters represent an example or policy
      that could be part of a corporate password policy or something required
      due to audit constraints.
     </para>
     <para>
      The pam libraries follow a defined <quote>flow</quote>&mdash;and in most
      cases, the best way to design the perfect stack is to consider all of the
      requirements and policies&mdash;and draw out a flow chart.
     </para>
     <table>
      <title>Sample rules/constraints for password enforcement</title>
      <tgroup cols="3">
       <tbody>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>minlen=8</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum length of password is 8
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>lcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of lower case letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ucredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of upper case letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>dcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of digits is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ocredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of other characters is 1
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para>
      To setup these password restrictions, use the
      <command>pam-config</command> tool and specify the parameters you want to
      configure. For example, the minimum length parameter could be modified
      like this:
     </para>
<screen>pam-config -a --cracklib-minlen=8 --cracklib-retry=3 \
--cracklib-lcredit=-1 --cracklib-ucredit=-1 --cracklib-dcredit=-1 \
--cracklib-ocredit=-1 --cracklib</screen>
     <para>
      Now verify that the new password restrictions work for new passwords.
      Simply login to a non-root account and change the password using the
      <command>passwd</command> command. Note that the above requirements are
      not enforced if you run the <command>passwd</command> command under root.
     </para>
    </section>
    <section xml:id="sec-sec-prot-general-pam-pw-previous">
     <title>Restricting Use of Previous Passwords</title>
     <para>
      The <systemitem>pam_unix2</systemitem> module parameter remember can be
      used to configure the number of previous passwords that cannot be reused.
      And the <systemitem>pam_cracklib</systemitem> module parameter
      <literal>difok</literal> can be used to specify the number of characters
      that must be different between the old and the new password.
     </para>
     <para>
      The following example describes how to implement password restrictions on
      a system so that a password cannot be reused for at least 6 months and
      that at least 3 characters must be different between the old and new
      password.
     </para>
     <para>
      Recall that in the section
      <xref linkend="sec-sec-prot-general-pw-aging"/> we set
      <literal>PASS_MIN_DAYS</literal> to <literal>7</literal>, which specifies
      the minimum number of days allowed between password changes. Therefore,
      if <systemitem>pam_unix2</systemitem> is configured to remember
      <literal>26</literal> passwords, then the previously used passwords
      cannot be reused for at least 6 months (26*7 days).
     </para>
     <para>
      Here is an example of an enhanced pam stack. It is possible to edit the
      <filename>/etc/pam.d/common-auth</filename> file to add/change modules
      used and how they react. Consider the following
      <systemitem>pam_cracklib</systemitem> and
      <systemitem>pam_unix2</systemitem> arguments&mdash;keeping in mind how
      the pam rules are processed:
     </para>
<screen>auth        required      pam_env.so
auth        sufficient    pam_unix2.so likeauth nullok
auth        required      pam_deny.so
account     required      pam_unix2.so
account     sufficient    pam_succeed_if.so uid &lt; 100 quiet
account     required      pam_permit.so
password    requisite     pam_cracklib.so retry=3 minlen=8 lcredit=-1
                             ucredit=-1 dcredit=-1 ocredit=-1 difok=3
password    sufficient    pam_unix2.so nullok use_authtok md5 shadow
                             remember=26
password    required      pam_deny.so
session     required      pam_limits.so
session     required      pam_unix2.so</screen>
     <note>
      <title><filename>/etc/security/opasswd</filename></title>
      <para>
       If the /etc/security/opasswd doesn't exist, create the file.
      </para>
<screen>&wsI;:~ # ls -l /etc/security/opasswd
-rw------- 1 root root 0 Dec 8 06:54 /etc/security/opasswd</screen>
     </note>
    </section>
    <section xml:id="sec-sec-prot-general-pam-lock-accounts">
     <title>Locking User Accounts After Too Many Login Failures</title>
     <para>
      It is not generally recommend that a host automatically locks system and
      shared accounts after too many failed login or su attempts. This could
      lead to outages if the application's account gets locked due to too many
      login failures like in this example for an oracle shared account:
     </para>
<screen>&wsI;:~ # su oracle -c id
su: incorrect password</screen>
     <para>
      This could be an easy target for a denial of service attack. The
      following example shows how to lock only individual user accounts after
      too many failed su or login attempts. Add the following two lines to the
      <filename>/etc/pam.d/common-auth</filename>:
     </para>
<screen>auth      required      pam_tally.so onerr=fail no_magic_root
[...]      
auth      required     pam_tally.so per_user deny=5 no_magic_root reset
     </screen>
     <para>
      The first added line counts failed login and failed su attempts for each
      user. The default location for attempted accesses is recorded in
      <filename>/var/log/faillog</filename>.
     </para>
     <para>
      The second added line specifies to lock accounts automatically after
      <literal>5</literal> failed login or su attempts
      (<literal>deny=5</literal>). The counter will be reset to 0 (reset) on
      successful entry if <literal>deny=<replaceable>n</replaceable></literal>
      was not exceeded. But you don't want system or shared accounts to be
      locked after too many login failures (denial of service attack).
     </para>
     <para>
      It is also possible to add the
      <literal>lock_time=<replaceable>n</replaceable></literal> parameter, and
      then optionally the
      <literal>unlock_time=<replaceable>n</replaceable></literal> parameter.
      For example, setting the <literal>lock_time=60</literal> would deny
      access for 60 seconds after a failed attempt. The
      <literal>unlock_time=<replaceable>n</replaceable></literal> option would
      then allow access after n seconds after an account has been locked. If
      this option is used the user will be locked out for the specified amount
      of time after he exceeded his maximum allowed attempts. Otherwise the
      account is locked until the lock is removed by a manual intervention of
      the system administrator. See the <literal>pam_tally</literal> man page
      for more information.
     </para>
     <para>
      To exempt system and shared accounts from the
      <literal>deny=<replaceable>n</replaceable></literal> parameter, the
      per_user parameter was added to the module. The per_user parameter
      instructs the module <emphasis>not</emphasis> to use the
      <literal>deny=<replaceable>n</replaceable></literal> limit for accounts
      where the maximum number of login failures is set explicitly. For
      example:
     </para>
<screen>&wsI;:~ # faillog -u oracle -m -1
    Username   Failures  Maximum  Latest
    oracle     0         -1       Fri Dec 10 23:57:55 -0600 2005 on unknown</screen>
     <para>
      The faillog command with the option <option>-m -1</option> has the effect
      of not placing a limit on the number of failed logins&mdash;effectively
      disabling the option. To instruct the module to activate the
      <literal>deny=<replaceable>n</replaceable></literal> limit for this
      account again, run:
     </para>
<screen>faillog -u oracle -m 0</screen>
     <para>
      By default, the maximum number of login failures for each account is set
      to zero (0) which instructs pam_tally to leverage the
      <literal>deny=<replaceable>n</replaceable></literal> parameter. To see
      failed login attempts, run:
     </para>
<screen>faillog</screen>
     <para>
      To unlock a locked account (after too many login failures), use the
      <option>-r</option> option:
     </para>
<screen>faillog -u <replaceable>user</replaceable> -r</screen>
     <para>
      Make sure to test these changes (and <emphasis>any</emphasis> changes –
      for that matter) thoroughly on your system using ssh and su, and make
      sure the &rootuser; id does not get locked! To lock/unlock accounts
      manually, you can run one of the following commands:
     </para>
     <variablelist>
      <varlistentry>
       <term>Locking</term>
       <listitem>
<screen>passwd -l <replaceable>user</replaceable>
         usermod -L <replaceable>user</replaceable></screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Unlocking</term>
       <listitem>
<screen>passwd -u <replaceable>user</replaceable>
usermod -U <replaceable>user</replaceable></screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>
   </section>
   <section xml:id="sec-sec-prot-dos">
    <title>Preventing Accidental Denial of Service</title>
    <para>
     Linux allows you to set limits on the amount of system resources that
     users and groups can consume. This is also very handy if bugs in programs
     cause them to use up too much resources (e.g. memory leaks), slow down the
     machine, or even render the system unusable. Incorrect settings can allow
     programs to use too many resources which may make the server unresponsive
     to new connections or even local logins (e.g. if a program uses up all
     available file handles on the host). This can also be a security concern
     if someone is allowed to consume all system resources and therefore cause
     a denial of service attack – either unplanned or worse, planned. Setting
     resource limits for users and groups may be an effective way to protect
     systems, depending on the environment.
    </para>
    <section xml:id="sec-sec-prot-dos-restrict-ressources">
     <title>Example for Restricting System Resources</title>
     <para>
      The following example demonstrates the practical usage of setting or
      restricting system resource consumption for an Oracle user account. For a
      list of system resource settings, see
      <filename>/etc/security/limits.conf</filename> or <command>man
      limits.conf</command>.
     </para>
     <para>
      Most shells like Bash provide control over various resources (e.g. the
      maximum allowable number of open file descriptors or the maximum number
      of processes) that are available on a per/user basis. To examine all
      current limits in the shell execute:
     </para>
<screen>ulimit -a</screen>
     <para>
      For more information on <command>ulimit</command> for the Bash shell,
      examine the Bash man pages.
     </para>
     <important>
      <title>Setting Limits for SSH Sessions</title>
      <para>
       Setting "hard" and "soft" limits might not behave as expected when using
       an SSH session. To see valid behavior it may be necessary to login as
       root and then su to the id with limits (e.g. oracle in these examples).
       Resource limits should also work assuming the application has been
       started automatically during the boot process. It may be necessary to
       set UsePrivilegeSeparation in /etc/ssh/sshd_config to "no" and restart
       the SSH daemon (rcsshd restart) if it seems that the changes to resource
       limits are not working (via SSH). However this is not generally
       recommended – as it weakens a systems security.
      </para>
     </important>
     <para>
      In this example, a change to the number of file handles or open files
      that the Oracle user can use is made by editing
      <filename>/etc/security/limits.conf</filename> as &rootuser; making the
      following changes:
     </para>
<screen>oracle           soft    nofile          4096
oracle           hard    nofile          63536</screen>
     <para>
      The <quote>soft</quote> limit in the first line defines the number of
      file handles (open files) that the
      <systemitem class="username">oracle</systemitem> user will have after
      login. If the user sees error messages about running out of file handles,
      then the user can increase the number of file handles like in this
      example up to the <quote>hard</quote> limit (in this example 63536) by
      executing:
     </para>
<screen>ulimit -n 63536</screen>
     <para>
      You can set the <quote>soft</quote> and <quote>hard</quote> limits higher
      if necessary.
     </para>
     <note>
      <para>
       It is important to be judicious with the usage of ulimits – allowing a
       "hard" limit for <quote>nofile</quote> for a user that equals the kernel
       limit (<filename>/proc/sys/fs/file-max</filename>) is very bad! If the
       user consumes all the available file handles – the system will not be
       able to initiate new logins as accessing (opening) PAM modules which are
       required for performing a login will not be possible.
      </para>
     </note>
     <para>
      You also need to ensure that <literal>pam_limits</literal> is configured
      in <filename>/etc/pam.d/common-auth</filename>, or in an individual
      service (like SSH, su, login, telnet, etc.) config:
     </para>
     <simplelist><member><filename>/etc/pam.d/sshd</filename> (for SSH)</member><member><filename>/etc/pam.d/su</filename> (for su)</member><member><filename>/etc/pam.d/login</filename> (local logins and telnet)</member>
     </simplelist>
     <para>
      If you don't want to enable it for all logins, there is a specific PAM
      module that will read the <filename>/etc/security/limits.conf</filename>
      file. Entries in pam configuration directives will have entries like:
     </para>
<screen>session     required      /lib/security/pam_limits.so
session     required      /lib/security/pam_unix.so</screen>
     <para>
      It is important to note that changes are not immediate and require a new
      login session:
     </para>
<screen>&wsI;:~ # su – oracle
&wsI;:~ &gt; ulimit -n
4096</screen>
     <para>
      Note that these examples are specific to the Bash shell -
      <command>ulimit</command> options are different for other shells. The
      default limit for the oracle account is now <literal>4096</literal> and
      that the oracle user can increase the number of file handles up to
      <literal>63536</literal> (based on the settings enacted):
     </para>
<screen>&wsI;:~ # su – oracle
&wsI;:~ &gt; ulimit -n
4096
&wsI;:~ &gt; ulimit -n 63536
&wsI;:~ &gt; ulimit -n
63536</screen>
     <para>
      Making this permanent requires the addition of the setting,
      <literal>ulimit -n 63536</literal>, (again, for Bash) to the users
      profile (<filename>~/.bashrc</filename> or
      <filename>~/.profile</filename> file) which is the user start-up file for
      the Bash shell on SUSE Linux (to verify your shell run: echo
      <envar>$SHELL</envar>). To do this you could simply type (or copy/paste
      – if you are reading this on the system) the following commands for the
      oracle user's Bash shell:
     </para>
<screen>&wsI;:~ # su - oracle
&wsI;:~ &gt; cat &gt;&gt; ~oracle/.bash_profile &lt;&lt; EOF
ulimit -n 63536
EOF</screen>
    </section>
   </section>
   <section xml:id="sec-sec-prot-banners">
    <title>Displaying Login Banners</title>
    <para>
     In many cases (and after per corporate policy) it is necessary to place a
     banner on login screens on all servers for legal or audit policy reasons
     (and to potentially deter intruders) among other things.
    </para>
    <para>
     If you want to print a legal banner after a user logs in using ssh, local
     console etc., you can leverage the <filename>/etc/motd</filename> (motd =
     message of the day) file. The file exists on SUSE – however it is empty.
     Simply add content to the file that is applicable/required by the
     organization.
    </para>
    <note>
     <title>Banner Length</title>
     <para>
      Try to keep the content to a single page (or less) – as it will scroll
      the screen if it doesn't fit.
     </para>
    </note>
    <para>
     For SSH you can edit the <quote>Banner</quote> parameter in the
     <filename>/etc/ssh/sshd_config</filename> file which will then
     appropriately display the banner text before the login prompt. For local
     console logins you can edit the <filename>/etc/issue</filename> file which
     will display the banner before the login prompt.For GDM you could make the
     following changes to require a user to acknowledge the legal banner by
     selecting 'Yes' or 'No'. Edit the
     <filename>/etc/gdm/PreSession/Default</filename> file and add the
     following lines at the beginning of the script:
    </para>
<screen>if ! gdialog --yesno '\n<replaceable>This system is classified...</replaceable>\n' 10 10; then
    sleep 10
    exit 1;
fi</screen>
    <para>
     Obviously the <replaceable>This system is classified...</replaceable> test
     should be replaced with the valid text – and it is important to note
     that this dialog will not prevent a login to progress. The existence of a
     <quote>Cancel</quote> button is merely incidental.
    </para>
   </section>
   <section xml:id="sec-sec-prot-misc">
    <title>Miscellaneous</title>
    <para/>
    <section xml:id="sec-sec-prot-misc-aide">
     <title>Host-Based Linux Monitoring and Intrusion Detection</title>
     <para>
      Before you place a host into production or even on a network, consider
      the use of an system integrity checker – like
      <command>seccheck</command> (already discussed in
      <xref linkend="sec-sec-prot-general-seccheck"/>)&mdash;so in the event of
      unauthorized changes, notifications can happen. Also consider the use of
      an intrusion detection environment, like AIDE – the Advanced Intrusion
      Detection Environment.
     </para>
     <para>
      AIDE is a GPL licensed and open source intrusion detection system. It
      could be considered a system <quote>fingerprinting</quote> mechanism.
      AIDE works by creating a database containing information about the files
      on your system. The database is created from rules laid out in the
      configuration file aide.conf. When AIDE is run, this database is
      referenced to check for changes (or created for the first time). Assuming
      a comparison check is being run, any changes not permitted by the
      configuration file are reported.
     </para>
     <para>
      By leveraging AIDE&mdash;storing a copy of the host's database in a
      secure location&mdash;and comparing it (on a scheduled basis or as part
      of a forensic effort), system integrity/insurance can be a matter of
      heuristics and procedure. If an intruder compromises your system you the
      comparison effort will enable an administrator or security officer to
      know what has changed on the host. The initial database should be created
      as a final step – <emphasis>before</emphasis> a system gets deployed
      into production.
     </para>
     <para>
      It is outside the scope of this article to cover Linux Monitoring and
      detailed Intrusion Detection systems (IDS) or solutions – however there
      is a plethora of information of configuring AIDE or other solutions and
      many informative articles on the web.
     </para>
    </section>
    <section xml:id="sec-sec-prot-misc-account-utils">
     <title>Connect Accounting Utilities</title>
     <para>
      Here is a list of commands you can use to get data about user logins:
     </para>
     <formalpara>
      <title><command>who</command></title>
      <para>
       Shows a listing of currently logged-in users.
      </para>
     </formalpara>
     <formalpara>
      <title><command>w</command></title>
      <para>
       Shows who is logged on and what they are doing.
      </para>
     </formalpara>
     <formalpara>
      <title><command>last</command></title>
      <para>
       Shows a list of last logged-in users, including login time, logout time,
       login IP address, etc.
      </para>
     </formalpara>
     <formalpara>
      <title><command>lastb</command></title>
      <para>
       Same as <command>last</command>, except that by default it shows a log
       of the file <filename>/var/log/btmp</filename>, which contains all the
       bad login attempts.
      </para>
     </formalpara>
     <formalpara>
      <title><command>lastlog</command></title>
      <para>
       This command reports data maintained in
       <filename>/var/log/lastlog</filename>, which is a record of the last
       time a user logged in.
      </para>
     </formalpara>
     <formalpara>
      <title><command>ac</command></title>
      <para>
       Prints out the connect time in hours on a per-user basis or daily basis
       etc. This command reads <filename>/var/log/wtmp</filename>.
      </para>
     </formalpara>
     <formalpara>
      <title><command>dump-utmp</command></title>
      <para>
       Converts raw data from /var/run/utmp or
       <filename>/var/log/wtmp</filename> into ASCII-parsable format.
      </para>
     </formalpara>
     <para>
      Also check the <filename>/var/log/messages</filename> file.
     </para>
    </section>
    <section xml:id="sec-sec-prot-misc-other">
     <title>Other</title>
     <para>
      Finally, the following couple items might not be (specifically) security
      related, but misconfiguration can cause many problems – and should be
      reviewed:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Resolver (<filename>/etc/hosts</filename>,
        <filename>/etc/resolv.conf</filename>,
        <filename>/etc/nsswitch.conf</filename>).
       </para>
      </listitem>
      <listitem>
       <para>
        NTP configuration (<filename>/etc/ntp.conf</filename>).
       </para>
      </listitem>
     </itemizedlist>
    </section>
   </section>
  </chapter>
 </part>
</book>
