<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
 <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>
<!--see:  http://linux-ha.org/wiki/CTDB_%28resource_agent%29
 
 toms 2013-03-22:
 * https://www.suse.com/support/kb/doc.php?id=7006496
   (FATE#312706)
 
 http://wiki.samba.org/index.php/CTDB_Setup
 http://ctdb.samba.org/
 http://samba.org/~tridge/sambaxp-07/ctdb.pdf
 http://wiki.samba.org/index.php/CTDB_Setup
 http://wiki.samba.org/index.php/Samba_%26_Clustering
 + innerweb link by tserong
 
 CTDB = Cluster Trivial Database
-->
<!--taroth 2010-07-26: FIXME - today's mail by tserong on devel-ha:
 I've just checked in a change to the CTDB RA:
  https://bugzilla.novell.com/show_bug.cgi?id=623788
  This makes the smb_private_dir parameter optional.  [...]
 
 For reference, the wording I've used in the RA metadata is as follows:
 
 smb_private_dir (string): Samba private dir (deprecated)
 The directory for smbd to use for storing such files as
 smbpasswd and secrets.tdb.  Old versions of CTBD (prior to 1.0.50)
 required this to be on shared storage.  This parameter should not
 be set for current versions of CTDB, and only remains in the RA
 for backwards compatibility.-->
<chapter id="cha.ha.samba">
 <title>Samba Clustering</title>
 <abstract>
  <para>
   A clustered Samba server provides a &ha; solution in your heterogeneous
   networks. This chapter explains some background information and how to
   set up a clustered Samba server.
  </para>
 </abstract>
 <sect1 id="sec.ha.samba.overview">
  <title>Conceptual Overview</title>

  <para>
   Trivial Database (TDB) has been used by Samba for many years. It allows
   multiple applications to write simultaneously. To make sure all write
   operations are successfully performed and do not collide with each other,
   TDB uses an internal locking mechanism.
  </para>

  <para>
   Cluster Trivial Database (CTDB) is a small extension of the existing TDB.
   CTDB is described by the project as a <quote>cluster implementation of
   the TDB database used by Samba and other projects to store temporary
   data</quote>.
  </para>

  <para>
   Each cluster node runs a local CTDB daemon. Samba communicates with its
   local CTDB daemon instead of writing directly to its TDB. The daemons
   exchange metadata over the network, but actual write and read operations
   are done on a local copy with fast storage. The concept of CTDB is
   displayed in <xref
   linkend="fig.ha.samba.overview"/>.
  </para>

  <note>
   <title>CTDB For Samba Only</title>
   <para>
    The current implementation of the CTDB Resource Agent configures CTDB to
    only manage Samba. Everything else, including IP failover, should be
    configured with Pacemaker.
   </para>
   <para>
    CTDB is only supported for completely homogeneous clusters. For example,
    all nodes in the cluster need to have the same architecture. You cannot
    mix i586 with x86_64.
   </para>
  </note>

  <figure id="fig.ha.samba.overview">
   <title>Structure of a CTDB Cluster</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_samba.svg" width="80%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_samba.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   A clustered Samba server must share certain data:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Mapping table that associates Unix user and group IDs to Windows users
     and groups.
    </para>
   </listitem>
   <listitem>
    <para>
     The user database must be synchronized between all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Join information for a member server in a Windows domain must be
     available on all nodes.
    </para>
   </listitem>
   <listitem>
    <para>
     Metadata has to be available on all nodes, like active SMB sessions,
     share connections, and various locks.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The goal is that a clustered Samba server with N+1 nodes is faster than
   with only N nodes. One node is not slower than an unclustered Samba
   server.
  </para>
 </sect1>
 <sect1 id="sec.ha.samba.basicconf">
  <title>Basic Configuration</title>
  <remark>taroth 2015-06-08: todo - fix
   https://bugzilla.novell.com/show_bug.cgi?id=921265 for next revision</remark>
  <note>
   <title>Changed Configuration Files</title>
   <para>
    The CTDB Resource Agent automatically changes
    <filename>/etc/sysconfig/ctdb</filename> and
    <filename>/etc/samba/smb.conf</filename>. Use <command>crm
    ra</command>&nbsp;<option>info CTDB</option> to list all parameters that
    can be specified for the CTDB resource.
   </para>
  </note>

  <para>
   To set up a clustered Samba server, proceed as follows:
  </para>

  <procedure id="pro.ha.samba.basicconf">
   <title>Setting Up a Basic Clustered Samba Server</title>
   <step>
    <para>
     Prepare your cluster:
    </para>
    <substeps>
     <step>
      <para>
       Configure your cluster (&ais;, Pacemaker, OCFS2) as described in this
       guide in <xref linkend="part.config"/>.
      </para>
     </step>
     <step>
      <para>
       Configure a shared file system, like OCFS2, and mount it, for
       example, on <filename>/shared</filename>.
      </para>
     </step>
     <step>
      <para>
       If you want to turn on POSIX ACLs, enable it:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         For a new OCFS2 file system use:
        </para>
<screen>&prompt.root;<command>mkfs.ocfs2</command> --fs-features=xattr ...</screen>
       </listitem>
       <listitem>
        <para>
         For an existing OCFS2 file system use:
        </para>
        <screen>&prompt.root;<command>tunefs.ocfs2</command> --fs-feature=xattr<!-- 
      --><replaceable>DEVICE</replaceable></screen>
        <para>
         Make sure the <option>acl</option> option is specified in the file
         system resource. Use the <command>crm</command> shell as follows:
        </para>
<screen>&prompt.crm.conf; <command>primary</command> ocfs2-3<!--
      --> ocf:heartbeat:Filesystem<!--
       --> options="acl" ...</screen>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Make sure the services
       <systemitem
       class="service">ctdb</systemitem>,
       <systemitem
        class="service">smb</systemitem>,
       <systemitem
         class="service">nmb</systemitem>, and
       <systemitem
          class="service">winbind</systemitem> are
       disabled:
      </para>
 <screen>&prompt.root;<command>chkconfig</command> ctdb off
<command>chkconfig</command> smb off
<command>chkconfig</command> nmb off
<command>chkconfig</command> winbind off</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Create a directory for the CTDB lock on the shared file system:
    </para>
    <screen>&prompt.root;<command>mkdir</command> -p /shared/samba/</screen>
   </step>
   <step>
    <para>
     In <filename>/etc/ctdb/nodes</filename> insert all nodes which contain
     all private IP addresses of each node in the cluster:
    </para>
<screen>&subnetI;.10
&subnetI;.11</screen>
   </step>
   <step>
    <para>
     Copy the configuration file to all of your nodes by using
     <command>csync2</command>:
    </para>
    <screen>&prompt.root;csync2 <option>-xv</option></screen>
    <para>
     For more information, see
     <xref linkend="pro.ha.installation.setup.csync2.start"/>.
    </para>
   </step>
<!--
    toms 2010-03-01: According to Tim the following step is not
    necessary anymore:
    »the CTDB RA will make these changes to smb.conf automatically 
    when CTDB is started by the cluster.«    
   -->
<!--<step>
    <para>Set the following global options in
     <filename>/etc/samba/smb.conf</filename> on all nodes:</para>
    <screen>[global]
passdb backend = tdbsam
clustering = yes
idmap backend = tdb2
private dir = /shared/samba/private
ctdb socket = /var/lib/ctdb/ctdb.socket</screen>
   </step>
   <step>
    <para>Add one or more shares to
     <filename>/etc/samba/smb.conf</filename> on all nodes:</para>
    <screen>[myshare]
path = /shared/myshare
# Other options go here, for example: read only = no</screen>
   </step>-->
   <step>
    <para>
     Add a CTDB resource to the cluster:
    </para>
<!--taroth 2012-02-07: fixed bnc#745334, default timeout for start/stop-->
<screen><command>crm</command> configure
&prompt.crm.conf;<command>primitive</command> ctdb ocf:heartbeat:CTDB params \
    ctdb_manages_winbind="false" \ 
    ctdb_manages_samba="true" \
    ctdb_recovery_lock="/shared/samba/ctdb.lock" \
      op monitor interval="10" timeout="20" \
      op start interval="0" timeout="90" \
      op stop interval="0" timeout="100"
&prompt.crm.conf;<command>clone</command> ctdb-clone ctdb \
    meta globally-unique="false" interleave="true"
&prompt.crm.conf;<command>colocation</command> ctdb-with-fs inf: ctdb-clone fs-clone
&prompt.crm.conf;<command>order</command> start-ctdb-after-fs inf: fs-clone ctdb-clone
&prompt.crm.conf;<command>commit</command></screen>
   </step>
   <step>
    <para>
     Add a clustered IP address:
    </para>
<screen>&prompt.crm.conf;<command>primitive</command> ip ocf:heartbeat:IPaddr2<!-- 
    --> params ip=&subnetII;.222 \
  clusterip_hash="sourceip-sourceport" op monitor interval=60s
&prompt.crm.conf;<command>clone</command> ip-clone ip meta globally-unique="true"
&prompt.crm.conf;<command>colocation</command> ip-with-ctdb inf: ip-clone ctdb-clone
&prompt.crm.conf;<command>order</command> start-ip-after-ctdb inf: ctdb-clone ip-clone
&prompt.crm.conf;<command>commit</command></screen>
   </step>
   <step>
    <para>
     Check the result:
    </para>
<screen>&prompt.root;<command>crm</command> status
Clone Set: dlm-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: o2cb-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: c-ocfs2-3
     Started: [ hex-14 hex-13 ]
 Clone Set: ctdb-clone
     Started: [ hex-14 hex-13 ]
 Clone Set: ip-clone (unique)
     ip:0       (ocf::heartbeat:IPaddr2):       Started hex-13
     ip:1       (ocf::heartbeat:IPaddr2):       Started hex-14</screen>
   </step>
   <step>
    <para>Test from a client machine. On a Linux client, add a user for Samba access:
    </para>
    <screen>&prompt.root;<command>smbpasswd</command> <option>-a</option>&nbsp;<replaceable>USERNAME</replaceable></screen>
   </step>
   <step><para>Test if you can reach the new user's home directory:</para>
    <screen>&prompt.root;smbclient -u&nbsp;<replaceable>USERNAME</replaceable>//&subnetII;.222/<replaceable>USERNAME</replaceable></screen>
   </step>

<!-- 
    From Tim:
    Add the IP address to the DNS at your site, so that you can access
    the share via \\hostname\sharename on Windows clients.
    => 
   -->
  </procedure>
 </sect1>
 <sect1 id="sec.ha.samba.ad">
  <title>Joining an Active Directory Domain</title>

  <remark>toms 2013-04-02: Needs changes</remark>

  <para>
   Active Directory (AD) is a directory service for Windows server systems.
  </para>

  <para>
   The following instructions outline how to join a CTDB cluster to an
   Active Directory domain:
  </para>

  <procedure>
   <step>
    <para>
     Consult your Windows Server documentation for instructions on how to
     set up an Active Directory domain. In this example, we use the
     following parameters:
    </para>
    <informaltable>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>
         <para>
          AD and DNS server
         </para>
        </entry>
        <entry>
<screen>win2k3.2k3test.&exampledomain;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          AD domain
         </para>
        </entry>
        <entry>
<screen>2k3test.&exampledomain;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          Cluster AD member NetBIOS name
         </para>
        </entry>
        <entry>
<screen>CTDB-SERVER</screen>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
<!--<screen>AD and DNS server = "win2k3.2k3test.&exampledomain;"
AD domain = "2k3test.&exampledomain;"
Cluster AD member NETBIOS name = "CTDB-SERVER"</screen>-->
   </step>
   <step>
    <para>
     <xref linkend="pro.ha.samba.config.ctdb"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="pro.ha.samba.config.join-ad"/>
    </para>
   </step>
  </procedure>

  <para>
   The next step is to configure the CTDB:
  </para>

  <procedure id="pro.ha.samba.config.ctdb">
   <title>Configuring CTDB</title>
   <step>
    <para>
     Make sure you have configured your cluster as shown in
     <xref linkend="sec.ha.samba.basicconf"/>.
    </para>
   </step>
   <step>
    <para>
     Stop the CTDB resource on one node:
    </para>
<screen>&prompt.root; crm resource stop ctdb-clone</screen>
   </step>
   <step>
    <para>
     Open the <filename>/etc/samba/smb.conf</filename> configuration file,
     add your NetBIOS name, and close the file:
    </para>
<screen>[global
    netbios name = CTDB-SERVER</screen>
    <para>
     Other settings such as security, workgroup etc. are added by the &yast;
     wizard.
    </para>
   </step>
   <step>
    <para>
     Update on all nodes the file <filename>/etc/samba.conf</filename>:
    </para>
<screen>&prompt.root;csync2 -xv</screen>
   </step>
   <step>
    <para>
     Restart the CTDB resource:
    </para>
<screen>&prompt.root;crm resource start ctdb-clone</screen>
   </step>
  </procedure>

  <para>
   Finally, join your cluster to the Active Directory server:
  </para>

  <procedure id="pro.ha.samba.config.join-ad">
   <title>Joining Active Directory</title>
   <step>
    <para>
     Make sure the following files are included in &csync;'s configuration
     to become installed on all cluster hosts:
    </para>
<screen>/etc/samba/smb.conf
/etc/security/pam_winbind.conf
/etc/krb5.conf
/etc/nsswitch.conf
/etc/security/pam_mount.conf.xml
/etc/pam.d/common-session</screen>
    <para>
     You can also use &yast;'s <guimenu>Configure &csync;</guimenu> module
     for this task, see <xref linkend="sec.ha.installation.setup.csync2"/>.
    </para>
   </step>
   <step>
    <para>
     Create a CTDB resource as described in
     <xref linkend="pro.ha.samba.basicconf"/>.
    </para>
   </step>
   <step>
    <para>
     Run &yast; and open the <guimenu>Windows Domain Membership</guimenu>
     module from the <guimenu>Network Services</guimenu> entry.
    </para>
   </step>
   <step>
    <para>
     Enter your domain or workgroup settings and finish with
     <guimenu>Ok</guimenu>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.ha.samba.testing">
  <title>Debugging and Testing Clustered Samba</title>

  <para>
   To debug your clustered Samba server, the following tools which operate
   on different levels are available:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>ctdb_diagnostics</command>
    </term>
    <listitem>
     <para>
      Run this tool to diagnose your clustered Samba server. Detailed debug
      messages should help you track down any problems you might have.
     </para>
     <para>
      The <command>ctdb_diagnostics</command> command searches for the
      following files which must be available on all nodes:
     </para>
<screen>/etc/krb5.conf
/etc/hosts
/etc/ctdb/nodes
/etc/sysconfig/ctdb
/etc/resolv.conf
/etc/nsswitch.conf
/etc/sysctl.conf
/etc/samba/smb.conf
/etc/fstab
/etc/multipath.conf
/etc/pam.d/system-auth
/etc/sysconfig/nfs
/etc/exports
/etc/vsftpd/vsftpd.conf</screen>
     <para>
      If the files <filename>/etc/ctdb/public_addresses</filename> and
      <filename>/etc/ctdb/static-routes</filename> exist, they will be
      checked as well.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ping_pong</command>
    </term>
    <listitem>
     <para>
      Check whether your file system is suitable for CTDB with
      <command>ping_pong</command>. It performs certain tests of your
      cluster file system like coherence and performance (see
      <ulink
              url="http://wiki.samba.org/index.php/Ping_pong"/>)
      and gives some indication how your cluster may behave under high load.
     </para>
    </listitem>
   </varlistentry>
<!--taroth http://doccomments.provo.novell.com/admin/viewcomment/16631#:-->
   <varlistentry>
    <term><command>send_arp</command> Tool and <systemitem class="resource">SendArp</systemitem> Resource Agent</term>
    <listitem>
     <para>
      The <systemitem class="resource">SendArp</systemitem> resource agent
      is located in <filename>/usr/lib/heartbeat/send_arp</filename> (or
      <filename>/usr/lib64/heartbeat/send_arp</filename>). The
      <command>send_arp</command> tool sends out a gratuitous ARP (Address
      Resolution Protocol) packet and can be used for updating other
      machines' ARP tables. It can help to identify communication problems
      after a failover process. If you cannot connect to a node or ping it
      although it shows the clustered IP address for samba, use the
      <command>send_arp</command> command to test if the nodes only need an
      ARP table update.
     </para>
     <para>
      For more information, refer to
      <ulink
              url="http://wiki.wireshark.org/Gratuitous_ARP"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To test certain aspects of your cluster file system proceed as follows:
  </para>

  <procedure>
   <title>Test Coherence and Performance of Your Cluster File System</title>
   <step>
    <para>
     Start the command <command>ping_pong</command> on one node and replace
     the placeholder <replaceable>N</replaceable> with the amount of nodes
     plus one. The file
     <filename><replaceable>ABSPATH</replaceable>/data.txt</filename> is
     available in your shared storage and is therefore accessible on all
     nodes (<replaceable>ABSPATH </replaceable> indicates an absolute path):
    </para>
<screen><command>ping_pong</command> <replaceable>ABSPATH</replaceable>/data.txt <replaceable>N</replaceable></screen>
    <para>
     Expect a very high locking rate as you are running only one node. If
     the program does not print a locking rate, replace your cluster file
     system.
    </para>
   </step>
   <step>
    <para>
     Start a second copy of <command>ping_pong</command> on another node
     with the same parameters.
    </para>
    <para>
     Expect to see a dramatic drop in the locking rate. If any of the
     following applies to your cluster file system, replace it:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <command>ping_pong</command> does not print a locking rate per
       second,
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rates in the two instances are not almost equal,
      </para>
     </listitem>
     <listitem>
      <para>
       the locking rate did not drop after you started the second instance.
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Start a third copy of <command>ping_pong</command>. Add another node
     and note how the locking rates change.
    </para>
   </step>
   <step>
    <para>
     Kill the <command>ping_pong</command> commands one after the other. You
     should observe an increase of the locking rate until you get back to
     the single node case. If you did not get the expected behavior, find
     more information in <xref linkend="cha.ha.ocfs2"/>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.ha.samba.moreinfo">
  <title>For More Information</title>

  <itemizedlist>
   <listitem>
    <para>
     <ulink url="http://linux-ha.org/wiki/CTDB_(resource_agent)"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://wiki.samba.org/index.php/CTDB_Setup"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://ctdb.samba.org"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://wiki.samba.org/index.php/Samba_%26_Clustering"/>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
