<?xml version="1.0"?>
<!DOCTYPE appendix PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
<!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>
<!-- the following list is from the xen sources, file
    tools/python/README.sxpcfg -->
<appendix id="app.sxp">
 <title>SXP Configuration Options</title>
 <para>
  The Xend can read and write all of its configurations in a semi-structured
  form, also called <quote>S-expression</quote>. These expressions are
  either stand-alone, or have another expression as argument. For example,
  to define that a &vmguest; has 2 CPUs available, the expression would look
  like:
 </para>
<screen>(domain
  ...
  (vcpus 2)
  ...
) </screen>
 <para>
  The following pages contain descriptions for most of the commonly used
  options for the Xend configuration. However, there is no guarantee for
  completeness.
 </para>
 <refentry id="domain">
<!--
  <refentryinfo>
   <authorgroup>
    <author>
     <firstname>Berthold</firstname>
     <surname>Gunreben</surname>
     <email>bg@novell.com</email>
    </author>
   </authorgroup>
  </refentryinfo>
  -->
<!-- TODO:
  domain:
   cpu_weight
   cpu_cap
   online_vcpus
  -->
  <refmeta>
   <refentrytitle>domain</refentrytitle>
   <manvolnum>5</manvolnum>
  </refmeta>
  <refnamediv>
   <refname>domain</refname><refpurpose>Top Xend &vmguest; SXP Configuration Element</refpurpose>
  </refnamediv>
  <refsect1 id="domain.synopsis">
   <title>Synopsis</title>
<screen>(domain { bootloader | bootloader_args | cpus |cpu_time | description | device | features | image | maxmem | memory | name | online_vcpus | on_crash | on_poweroff | on_reboot | on_xend_start | on_xend_stop | shadow_memory | start_time | status | store_mfn | uuid | vcpus })</screen>
   <para>
    The top level element of each &vmguest; configuration is
    <quote>(domain)</quote>. It needs several subelements to store all
    needed data.
   </para>
  </refsect1>
  <refsect1 id="domain.bootloader">
   <title><command>bootloader</command></title>
   <para>
    Define the program that is used to boot the &vmguest;. Paravirtualized
    &sle; 11 systems use <filename>/usr/bin/pygrub</filename> by default.
    Example:
   </para>
<screen>(bootloader /usr/bin/pygrub)</screen>
  </refsect1>
  <refsect1 id="domain.bootloader_args">
   <title><command>bootloader_args</command></title>
   <para>
    Provide additional parameters to the boot loader program. Example:
   </para>
<screen>(bootloader_args -q)</screen>
  </refsect1>
  <refsect1 id="domain.cpus">
   <title><command>cpus</command></title>
   <para>
    Defines which CPUs are available to a &vmguest;. The settings may be
    changed with <command>xm vcpu-pin</command>. Example:
   </para>
<screen>(cpus ((1 2) (1 2)))</screen>
  </refsect1>
  <refsect1 id="domain.cpu_time">
   <title><command>cpu_time</command></title>
   <para>
    Time in nanoseconds the &vmguest; already used. Example:
   </para>
<screen>(cpu_time 59.157413326)</screen>
  </refsect1>
  <refsect1 id="domain.description">
   <title><command>description</command></title>
   <para>
    Extra description for a &vmguest;.
   </para>
<screen>(description 'HVM guest')</screen>
  </refsect1>
<!-- TODO: tap devices are missing
  however, these are so many, and very likely most of them untested...
  http://wiki.xensource.com/xenwiki/blktap
  http://wiki.xensource.com/xenwiki/blktap2
  tap old version:
  tap:
    aio     - asynchronous IO
    qcow2   - qcow (qemu copy on write) disk format with snapshot support
    qcow    - old qcow version
    ram     - fast ram disk (no idea how this should work)
    sync    - synchronous IO
    vmdk    - vmware disk
  tap2: newer version
    tap:tapdisk:aio
    tap:tapdisk:qcow
    tap:tapdisk:ram
    tap:tapdisk:remus    - This disk sends all writes to a backup via a
                           network interface before passing them to an underlying device.
                           see: http://dsg.cs.ubc.ca/remus
    tap:tapdisk:vhd      - Microsoft VHD disk format
           http://searchwinit.techtarget.com/news/article/0,289142,sid1_gci1271721,00.html
  -->
  <refsect1 id="domain.device">
   <title><command>device</command></title>
<screen>(device { console | pci | vbd | vfb | vif | vkbd | vusb })</screen>
   <para>
    All devices that are presented to the &vmguest; start with the element
    <quote>device</quote>
   </para>
   <refsect2 id="domain.device.console">
    <title><command>console</command></title>
<screen>(console { location | protocol | uuid })</screen>
    <para>
     Defines the console that can be accessed with <command>xm console
     <replaceable>id</replaceable></command>.
    </para>
    <refsect3 id="domain.device.console.location">
     <title>location</title>
     <para>
      Defines the connection information for the console of the given
      &vmguest;. A <literal>vfb</literal> device will look like:
     </para>
<screen>(location 'localhost:5901')</screen>
    </refsect3>
    <refsect3 id="domain.device.console.protocol">
     <title><command>protocol</command></title>
     <para>
      The interface to use for the console protocol. This may be one of
      these:
     </para>
     <variablelist>
      <varlistentry>
       <term>vt100</term>
       <listitem>
        <para>
         Standard vt100 terminal.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rfb</term>
       <listitem>
        <para>
         Remote Frame Buffer protocol (for VNC).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rdp</term>
       <listitem>
        <para>
         Remote Desktop protocol.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect3>
    <refsect3 id="domain.device.console.uuid">
     <title><command>uuid</command></title>
     <para>
      Unique identifier for this device. Example:
     </para>
<screen>(uuid 7892de3d-2713-a48f-c3ba-54a7574e283b)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.pci">
    <title><command>pci</command></title>
<screen>(pci { dev | uuid })</screen>
    <para>
     Defines the device of a PCI device that is dedicated to the given
     &vmguest;. The PCI device number is organized as
     <literal>[[[[<replaceable>domain</replaceable>]:]<replaceable>bus</replaceable>]:][<replaceable>slot</replaceable>][.[<replaceable>func</replaceable>]]</literal>.
    </para>
    <refsect3 id="domain.device.pci.dev">
     <title><command>dev</command></title>
<screen>(dev { bus | domain | func | slot | uuid | vslt })</screen>
     <para>
      Defines the path to the PCI device that is dedicated to the given
      &vmguest;.
     </para>
<!-- TODO: the following sections should be refsect4!!! -->
     <variablelist>
      <varlistentry>
       <term>bus</term>
       <listitem>
        <para>
         A PCI device with device number <literal>03:02.1</literal> has the
         bus number <literal>0x03</literal>
        </para>
<screen>(bus 0x03)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>domain</term>
       <listitem>
        <para>
         Most computers have only one PCI domain. This is then
         <literal>0x0</literal>. To check the domain numbers of the PCI
         devices, use <command>lspci -D</command>.
        </para>
<screen>(domain 0x0)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>func</term>
       <listitem>
        <para>
         A PCI device with device number <literal>03:02.1</literal> has the
         function number
        </para>
<screen>(func 0x1)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>slot</term>
       <listitem>
        <para>
         A PCI device with device number <literal>03:02.1</literal> has the
         function number
        </para>
<screen>(slot 0x02)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>uuid</term>
       <listitem>
        <para>
         Unique identifier for this device. Example:
        </para>
<screen>(uuid d33733fe-e36f-fa42-75d0-fe8c8bc3b4b7)</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>vslt</term>
       <listitem>
        <para>
         Defines the virtual slot for the PCI device in the &vmguest;
         system.
        </para>
<screen>(vslt 0x0)</screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </refsect3>
    <refsect3 id="domain.device.pci.uuid">
     <title><command>uuid</command></title>
     <para>
      Unique identifier for this device. Example:
     </para>
<screen>(uuid 9bef35d3-17c6-ac75-ac28-1aecb1cb509d)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.vbd">
    <title><command>vbd</command></title>
<screen>(vbd { backend | bootable | dev | mode | protocol | uname | uuid | VDI })</screen>
    <para>
     Defines a virtual block device.
    </para>
    <refsect3 id="domain.device.vbd.backend">
     <title><command>backend</command></title>
     <para>
      All paravirtualized virtual devices are implemented by a <quote>split
      device driver</quote>. This expression defines the domain that holds
      the back-end device that the front-end device of the current &vmguest;
      should connect to. Example:
     </para>
<screen>(backend 0)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.bootable">
     <title><command>bootable</command></title>
     <para>
      Defines if this block device is bootable. Example:
     </para>
<screen>(bootable 1)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.dev">
     <title><command>dev</command></title>
     <para>
      Defines the device name of the virtual block device in the &vmguest;.
      Example:
     </para>
<screen>(dev xvda:disk)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.mode">
     <title><command>mode</command></title>
     <para>
      Defines if the device is writable. Example:
     </para>
<screen>(mode w)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.protocol">
     <title><command>protocol</command></title>
     <para>
      Defines the I/O protocol to use for the &vmguest;. Example:
     </para>
<screen>(protocol x86_64-abi)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.uname">
     <title><command>uname</command></title>
     <para>
      Defines where the virtual block device really stores its data. See
      also <xref linkend="sec.xen.config.disk"/>. Example:
     </para>
<screen>(uname file:/var/lib/xen/images/sles11/disk1)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.uuid">
     <title><command>uuid</command></title>
     <para>
      Unique identifier for the current virtual block device. Example:
     </para>
<screen>(uuid 7892de3d-2713-a48f-c3ba-54a7574e283b)</screen>
    </refsect3>
    <refsect3 id="domain.device.vbd.VDI">
     <title><command>VDI</command></title>
     <para>
      Defines if the current virtual block device is a virtual disk image
      (VDI). This is a read-only setting. Example:
     </para>
<screen>(VDI)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.vfb">
    <title><command>vfb</command></title>
<screen>(vfb { keymap | location | type | uuid | vncunused | xauthority })</screen>
    <remark>
     TODO: maybe there are also: nographic, vnc, sdl, vnclisten, vncpasswd,
     opengl
    </remark>
    <para>
     The Virtual Frame Buffer (VFB) defines a graphical interface and input
     device to the &vmguest;.
    </para>
    <refsect3 id="domain.device.vfb.keymap">
     <title><command>keymap</command></title>
     <para>
      Defines the language to use for the input. Example:
     </para>
<screen>(keymap en)</screen>
    </refsect3>
    <refsect3 id="domain.device.vfb.location">
     <title><command>location</command></title>
     <para>
      Defines where to access the virtual frame buffer device when using
      VNC. By default, the server will listen to
      <literal>localhost</literal> and port number 5900+N where N is the ID
      of the &vmguest;. Example:
     </para>
<screen>(location localhost:5900)</screen>
    </refsect3>
    <refsect3 id="domain.device.vfb.type">
     <title><command>type</command></title>
     <para>
      Defines whether to use <literal>VNC</literal> or
      <literal>SDL</literal>. VNC will only provide a server that has to be
      connected from a client. SDL provides a display that is started on
      creation of the &vmguest;. Example:
     </para>
<screen>(type vnc)</screen>
    </refsect3>
    <refsect3 id="domain.device.vfb.uuid">
     <title><command>uuid</command></title>
     <para>
      Unique identifier for the current virtual frame buffer device.
      Example:
     </para>
<screen>(uuid 39eb88bb-9ce6-d329-73fd-811681e6b536)</screen>
    </refsect3>
    <refsect3 id="domain.device.vfb.vncunused">
     <title><command>vncunused</command></title>
     <para>
      If not set to <literal>0</literal>, this option enables the VNC server
      on the first unused port above 5900.
     </para>
<screen>(vncunused 1)</screen>
    </refsect3>
    <refsect3 id="domain.device.vfb.xauthority">
     <title><command>xauthority</command></title>
     <para>
      When using SDL, the specified file is used to define access rights. If
      not set, the value from the <systemitem>XAUTHORITY</systemitem>
      environment variable is used. Example:
     </para>
<screen>(xauthority /root/.Xauthority)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.vif">
    <title><command>vif</command></title>
<screen>(vif { backend | bridge | mac | model | script | uuid })</screen>
<!-- TODO: (type netfront) -->
    <para>
     The virtual interface definition is used to create and set up virtual
     network devices. To list, add, or remove network interfaces during
     runtime, you can use xm with the commands
     <command>network-list</command>, <command>network-attach</command>, and
     <command>network-detach</command>.
    </para>
    <refsect3 id="domain.device.vif.backend">
     <title><command>backend</command></title>
     <para>
      Defines the back-end domain that is used for paravirtualized network
      interfaces. Example:
     </para>
<screen>(backend 0)</screen>
    </refsect3>
    <refsect3 id="domain.device.vif.bridge">
     <title><command>bridge</command></title>
     <para>
      Defines the bridge where the virtual network interface should connect
      to. Example:
     </para>
<screen>(bridge br0)</screen>
    </refsect3>
    <refsect3 id="domain.device.vif.mac">
     <title><command>mac</command></title>
     <para>
      Defines the mac address of the virtual network interface. The mac
      addresses reserved for &xen; virtual network interfaces look like
      <literal>00:16:3E:xx:xx:xx</literal>. Example:
     </para>
<screen>(mac 00:16:3e:32:e7:81)</screen>
    </refsect3>
    <refsect3 id="domain.device.vif.model">
     <title><command>model</command></title>
     <para>
      When using emulated IO, this defines the network interface that should
      be presented to the &vmguest;. See also
      <xref linkend="sec.xen.vdevices"/>. Example:
     </para>
<screen>(model rtl8139)</screen>
    </refsect3>
    <refsect3 id="domain.device.vif.script">
     <title><command>script</command></title>
     <para>
      Defines the script to use to bring the network interface up or down.
      Example:
     </para>
<screen>(script /etc/xen/scripts/vif-bridge)</screen>
    </refsect3>
    <refsect3 id="domain.device.vif.uuid">
     <title><command>uuid</command></title>
     <para>
      Unique identifier for the current virtual network device. Example:
     </para>
<screen>(uuid cc0d3351-6206-0f7c-d95f-3cecffec793f)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.vkbd">
    <title><command>vkbd</command></title>
<screen>(vkbd { backend })</screen>
    <para>
     Defines a virtual keyboard and mouse device. This is needed for
     paravirtualized &vmguest; systems and must be defined before
     <systemitem>vfb</systemitem> devices.
    </para>
    <refsect3 id="domain.device.vkbd.backend">
     <title><command>backend</command></title>
     <para>
      Defines the backend domain that is used for paravirtualized keyboard
      interfaces. Example:
     </para>
<screen>(backend 0)</screen>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.device.vusb">
    <title><command>vusb</command></title>
<screen>(vusb { backend | num-ports | usb-ver | port-? })</screen>
    <para>
     Defines a virtual USB controller for the &vmguest;. This is needed
     before any USB device can be assigned to the guest.
    </para>
    <refsect3 id="domain.device.vusb.backend">
     <title><command>backend</command></title>
     <para>
      Defines the back-end domain that is used for USB devices. Example:
     </para>
<screen>(backend 0)</screen>
    </refsect3>
    <refsect3 id="domain.device.vusb.num-ports">
     <title><command>num-ports</command></title>
     <para>
      Defines the number of ports that the virtual USB host controller
      provides for the &vmguest;. Example:
     </para>
<screen>(num-ports 8)</screen>
    </refsect3>
    <refsect3 id="domain.device.vusb.usb-ver">
     <title><command>usb-ver</command></title>
     <para>
      Define which USB revision should be used. Note, that unlike the real
      USB revision numbers, this is only an integer. Example:
     </para>
<screen>(usb-ver 2)</screen>
    </refsect3>
    <refsect3 id="domain.device.vusb.port">
     <title><command>port-?</command></title>
     <para>
      Starting with <literal>port-1</literal>, depending on
      <literal>num-ports</literal> there are several
      <literal>port-?</literal> sections available. If a USB device is
      assigned to the &vmguest;, the respective device number is added to
      the port number. Example:
     </para>
<screen>(port-1 4-2)</screen>
    </refsect3>
   </refsect2>
  </refsect1>
<!--
  <refsect1 id="domain.features">
   <title><command>features</command></title>
   <remark>TODO: cannot find any information about this config option</remark>
   <screen></screen>
   <para></para>
  </refsect1> -->
  <refsect1 id="domain.image">
   <title><command>image</command></title>
<screen>(image { linux | HVM })</screen>
   <para>
    This is the container for the main machine configuration. The actual
    image type is either <literal>Linux</literal> or <literal>HVM</literal>
    for fully virtualized guests. HVM is only available if your computer
    supports VMX and also activates this feature during boot.
   </para>
   <refsect2 id="domain.image.linux">
    <title><command>linux</command></title>
<screen>(linux { args | device_model | kernel | notes })</screen>
    <para>
     The <systemitem>linux</systemitem> image definition is used for
     paravirtualized Linux installations.
    </para>
    <refsect3 id="domain.image.linux.args">
     <title><command>args</command></title>
     <para>
      When booting a kernel from the image definition,
      <systemitem>args</systemitem> defines extra boot parameters for the
      kernel. Example:
     </para>
<screen>(args ' sax2=1')</screen>
    </refsect3>
    <refsect3 id="domain.image.linux.device_model">
     <title><command>device_model</command></title>
     <para>
      The device model used by the &vmguest;. This defaults to
      <command>qemu-dm</command>. Example:
     </para>
<screen>(device_model /usr/lib/xen/bin/qemu-dm)</screen>
    </refsect3>
    <refsect3 id="domain.image.linux.kernel">
     <title><command>kernel</command></title>
     <para>
      Defines the path to the kernel image this &vmguest; should boot.
      Defaults to no image. Example:
     </para>
<screen>(kernel /boot/vmlinuz)</screen>
    </refsect3>
    <refsect3 id="domain.image.linux.notes">
     <title><command>notes</command></title>
<!--
     <remark>TODO: Can I change the notes, and are those values then used? Or is
     this just for reference?</remark>
     Jim: these are read-only settings
    -->
     <para>
      Displays several settings and features available to the current
      &vmguest;.
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="domain.image.hvm">
    <title><command>hvm</command></title>
<screen>(hvm { acpi | apic | boot | device_model | extid | guest_os_type | hap | hpet | isa | kernel | keymap | loader | localtime | monitor | nographic | notes | pae | pci | rtc_timeoffset | serial | stdvga | timer_mode | usb | usbdevice | vnc | vncunused | xauthority })</screen>
    <para>
     The <systemitem>HVM</systemitem> image definition is used for all fully
     virtualized installations.
    </para>
    <refsect3 id="domain.image.hvm.acpi">
     <title><command>acpi</command></title>
     <para>
      Defines if ACPI (Advanced Configuration and Power Interface)
      functionality should be available to the &vmguest;. Example:
     </para>
<screen>(acpi 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.apic">
     <title><command>apic</command></title>
     <para>
      Defines if ACPI (Advanced Programmable Interrupt Controller)
      functionality should be available to the &vmguest;. Example:
     </para>
<screen>(apic 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.boot">
     <title><command>boot</command></title>
     <para>
      Defines the drive letter to boot from. Example:
     </para>
<screen>(boot c)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.device_model">
     <title><command>device_model</command></title>
     <para>
      The device model used by the &vmguest;. This defaults to
      <command>qemu-dm</command>. Example:
     </para>
<screen>(device_model /usr/lib/xen/bin/qemu-dm)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.extid">
     <title><command>extid</command></title>
     <para>
      Defines whether a guest should use Hyper-V extensions. Only applies to
      guests types that support Hyper-V. Example:
     </para>
<screen>(extid 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.guest_os_type">
     <title><command>guest_os_type</command></title>
     <para>
      Defines the guest operating system type. Allowed values are
      <systemitem>default</systemitem>, <systemitem>linux</systemitem>, and
      <systemitem>windows</systemitem>. Currently, this has only an effect
      on &ipf; systems. Example:
     </para>
<screen>(guest_os_type default)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.hap">
     <title><command>hap</command></title>
     <para>
      Defines if hardware assisted paging should be enabled. Enabled with
      value <literal>1</literal>, disabled with value <literal>0</literal>.
      Example:
     </para>
<screen>(hap 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.hpet">
     <title><command>hpet</command></title>
     <remark>TODO: please check if this is correct</remark>
     <para>
      Defines if the emulated multimedia timer <systemitem>hpet</systemitem>
      should be activated. Enabled with value <literal>1</literal>, disabled
      with value <literal>0</literal>. Example:
     </para>
<screen>(hpet 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.isa">
     <title><command>isa</command></title>
     <para>
      Defines if an ISA-only system should be emulated. Example:
     </para>
<screen>(isa 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.kernel">
     <title><command>kernel</command></title>
     <para>
      Defines the path to the kernel image this &vmguest; should boot.
      Defaults to no image. Example:
     </para>
<screen>(kernel )</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.keymap">
     <title><command>keymap</command></title>
     <para>
      Defines the language to use for the input. Example:
     </para>
<screen>(keymap de)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.loader">
     <title><command>loader</command></title>
     <para>
      Defines the path to the HVM boot loader. Example:
     </para>
<screen>(loader /usr/lib/xen/boot/hvmloader)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.localtime">
     <title><command>localtime</command></title>
     <para>
      Defines if the emulated RTC uses the local time. Example:
     </para>
<screen>(localtime 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.monitor">
     <title><command>monitor</command></title>
     <remark>TODO: What is this???</remark>
     <para>
      Defines if the device model (for example, qemu-dm) should use monitor.
      Use <keycombo><keycap function="control"/> <keycap function="alt"/>
      <keycap>2</keycap></keycombo> in the VNC viewer to connect to the
      monitor. Example:
     </para>
<screen>(monitor 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.nographic">
     <title><command>nographic</command></title>
     <para>
      Defines if the device model should disable the graphics support.
      Example:
     </para>
<screen>(nographic 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.notes">
     <title><command>notes</command></title>
     <para>
      Displays several settings and features available to the current
      &vmguest;. Example:
     </para>
<screen>(notes (SUSPEND_CANCEL 1))</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.pae">
     <title><command>pae</command></title>
     <para>
      Enable or disable PAE (Physical Address Extension) of the HVM
      &vmguest;. Example:
     </para>
<screen>(pae 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.pci">
     <title><command>pci</command></title>
<screen>(pci <replaceable>Bus</replaceable>:<replaceable>Slot</replaceable>.<replaceable>Function</replaceable></screen>
     <para>
      Add a given PCI device to a &vmguest;. This must be supported by the
      hardware and can be added multiple times. Example:
     </para>
<screen>(pci 03:02.1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.rtc_timeoffset">
     <title><command>rtc_timeoffset</command></title>
     <para>
      Defines the offset between local time and hardware clock. Example:
     </para>
<screen>(rtc_timeoffset 3600)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.serial">
     <title><command>serial</command></title>
     <para>
      Defines &dom0; serial device that will be connected to the hvm
      &vmguest;. To connect <filename>/dev/ttyS0</filename> of &dom0; to the
      HVM &vmguest;, use:
     </para>
<screen>(serial /dev/ttyS0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.stdvga">
     <title><command>stdvga</command></title>
     <para>
      Defines if a standard vga (cirrus logic) device should be used.
      Example:
     </para>
<screen>(stdvga 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.timer_mode">
     <title><command>timer_mode</command></title>
     <para>
      Defines if the timer should be delayed when ticks are missed or if the
      real time should always be used. <literal>0</literal> delays the
      virtual time, <literal>1</literal> always uses the real time.
     </para>
<screen>(timer_mode 0)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.usb">
     <title><command>usb</command></title>
     <para>
      Defines if USB devices should be emulated. Example:
     </para>
<screen>(usb 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.usbdevice">
     <title><command>usbdevice</command></title>
     <para>
      Adds the specified USB device to the &vmguest;.
     </para>
<screen>(usbdevice tablet)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.vnc">
     <title><command>vnc</command></title>
     <para>
      Defines if VNC should be enabled for graphics. Example:
     </para>
<screen>(vnc 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.vncunused">
     <title><command>vncunused</command></title>
     <para>
      If not set to <literal>0</literal>, this option enables the VNC server
      on the first unused port above 5900.
     </para>
<screen>(vncunused 1)</screen>
    </refsect3>
    <refsect3 id="domain.image.hvm.xauthority">
     <title><command>xauthority</command></title>
     <para>
      When using SDL, the specified file is used to define access rights. If
      not set, the value from the <systemitem>XAUTHORITY</systemitem>
      environment variable is used. Example:
     </para>
<screen>(xauthority /root/.Xauthority)</screen>
    </refsect3>
   </refsect2>
  </refsect1>
  <refsect1 id="domain.maxmem">
   <title><command>maxmem</command></title>
   <para>
    Defines how much memory in MB can be assigned to the &vmguest; while
    running. Example:
   </para>
<screen>(maxmem 1024)</screen>
  </refsect1>
  <refsect1 id="domain.memory">
   <title><command>memory</command></title>
   <para>
    Defines the initial amount of memory in MB of the &vmguest;. Example:
   </para>
<screen>(memory 512)</screen>
  </refsect1>
  <refsect1 id="domain.name">
   <title><command>name</command></title>
   <para>
    The name of the &vmguest; as it appears in different managing utilities.
    Example:
   </para>
<screen>(name sles11)</screen>
  </refsect1>
  <refsect1 id="domain.online_vcpus">
   <title><command>online_vcpus</command></title>
   <para>
    Number of CPUs that are currently available to the &vmguest;. Example:
   </para>
<screen>(online_vcpus 2)</screen>
  </refsect1>
  <refsect1 id="domain.on_crash">
   <title><command>on_crash</command></title>
<screen>(on_crash { coredump-destroy | coredump-restart | destroy | preserve | rename-restart | restart })</screen>
   <para>
    Defines the behavior after a domain exits because of a
    <quote>crash</quote>.
   </para>
   <refsect2 id="domain.on_crash.coredump-destroy">
    <title>coredump-destroy</title>
    <para>
     Dumps the core of the &vmguest; before destroying it. Example:
    </para>
<screen>(on_crash coredump-destroy)</screen>
   </refsect2>
   <refsect2 id="domain.on_crash.coredump-restart">
    <title>coredump-restart</title>
    <para>
     Dumps the core of the &vmguest; before restarting it. Example:
    </para>
<screen>(on_crash coredump-restart)</screen>
   </refsect2>
   <refsect2 id="domain.on_crash.destroy">
    <title>destroy</title>
    <para>
     The &vmguest; is cleaned up. Example:
    </para>
<screen>(on_crash destroy)</screen>
   </refsect2>
   <refsect2 id="domain.on_crash.preserve">
    <title>preserve</title>
    <para>
     In order to clean up a &vmguest; with preserve status, it has to be
     destroyed manually. Example:
    </para>
<screen>(on_crash preserve)</screen>
   </refsect2>
   <refsect2 id="domain.on_crash.rename-restart">
    <title>rename-restart</title>
    <para>
     The old &vmguest; is renamed and a new domain is started with the old
     name. Example:
    </para>
<screen>(on_crash rename-restart)</screen>
   </refsect2>
   <refsect2 id="domain.on_crash.restart">
    <title>restart</title>
    <para>
     The old &vmguest; is not cleaned up. Instead, a new &vmguest; is
     started. Example:
    </para>
<screen>(on_crash restart)</screen>
   </refsect2>
  </refsect1>
  <refsect1 id="domain.on_poweroff">
   <title><command>on_poweroff</command></title>
<screen>(on_poweroff { destroy | preserve | rename-restart | rename })</screen>
   <para>
    Defines the behavior after a domain exits because of a restart. For
    details about the available parameters, see
    <xref linkend="domain.on_crash"/>.
   </para>
  </refsect1>
  <refsect1 id="domain.on_reboot">
   <title><command>on_reboot</command></title>
<screen>(on_reboot { destroy | preserve | rename-restart | rename })</screen>
   <para>
    Defines the behavior after a domain exits because of a reboot. For
    details about the available parameters, see
    <xref linkend="domain.on_crash"/>.
   </para>
  </refsect1>
  <refsect1 id="domain.on_xend_start">
   <title><command>on_xend_start</command></title>
<screen>(on_xend_start { destroy | preserve | rename-restart | rename | start })</screen>
   <para>
    Defines the behavior when Xend starts. For details about the available
    parameters, see <xref linkend="domain.on_crash"/>.
   </para>
  </refsect1>
  <refsect1 id="domain.on_xend_stop">
   <title><command>on_xend_stop</command></title>
<screen>(on_xen_stop { destroy | preserve | rename-restart | rename | shutdown })</screen>
   <para>
    Defines the behavior when Xend stops. For details about the available
    parameters, see <xref linkend="domain.on_crash"/>.
   </para>
  </refsect1>
  <refsect1 id="domain.shadow_memory">
   <title><command>shadow_memory</command></title>
   <para>
    Define how much shadow pagetable memory in MB is available for the
    &vmguest;. This is needed for fully virtualized &vmguest; systems.
    Example:
   </para>
<screen>(shadow_memory 10)</screen>
  </refsect1>
  <refsect1 id="domain.start_time">
   <title><command>start_time</command></title>
   <para>
    Time in seconds when the &vmguest; was started. Example:
   </para>
<screen>(start_time 1236325777.38)</screen>
  </refsect1>
  <refsect1 id="domain.status">
   <title><command>status</command></title>
   <para>
    Lists the current state of the &vmguest;.
   </para>
   <informaltable>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>
        <para>
         <literal>0</literal>
        </para>
       </entry>
       <entry>
        <para>
         The &vmguest; is stopped.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>1</literal>
        </para>
       </entry>
       <entry>
        <para>
         The &vmguest; is suspended.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>2</literal>
        </para>
       </entry>
       <entry>
        <para>
         The &vmguest; is running.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    Example:
   </para>
<screen>(status 0)</screen>
  </refsect1>
  <refsect1 id="domain.store_mfn">
   <title><command>store_mfn</command></title>
   <para>
    Number of shared pages for the current &vmguest;. Example:
   </para>
<screen>(store_mfn 262141)</screen>
  </refsect1>
  <refsect1 id="domain.uuid">
   <title><command>uuid</command></title>
   <para>
    Unique identifier for this &vmguest;. Example:
   </para>
<screen>(uuid 7892de3d-2713-a48f-c3ba-54a7574e283b)</screen>
  </refsect1>
  <refsect1 id="domain.vcpus">
   <title><command>vcpus</command></title>
   <para>
    Number of virtually available CPUs in the current &vmguest;. Example:
   </para>
<screen>(vcpus 2)</screen>
  </refsect1>
 </refentry>
<!--
 <variablelist>
  <varlistentry>
   <term>uuid</term>
   <listitem>
    <para>
     Unique identifier for each controlled &vmguest;.
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>vcpus</term>
   <listitem>
    <para>
     Number of available virtual CPUs.
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>maxmem</term>
   <listitem>
    <para>
     Maximum memory for this &vmguest; in MB.
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>memory</term>
   <listitem>
    <para>
     Amount of memory that is used to start this &vmguest; in MB.
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>name</term>
   <listitem>
    <para>
     Name of the guest as it appears in <command>xm list</command>.
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>on_poweroff or on_reboot</term>
   <listitem>
    <para>
     In case, a domain exist because a poweroff or a reboot, this defines the
     behaviour on the next boot of the &vmguest;. Poweroff and reboot are not
     related to the &vmhost; but just the actions done by the &vmguest;.
     Available options are:
     </para>
     <variablelist>
      <varlistentry>
       <term>destroy</term>
       <listitem>
        <para>
         The &vmguest; is cleaned up.
       </para></listitem>
      </varlistentry>
      <varlistentry>
       <term>restart</term>
       <listitem>
        <para>
         The old &vmguest; is not cleaned up. Instead a new &vmguest; is started.
       </para></listitem>
      </varlistentry>
      <varlistentry>
       <term>preserve</term>
       <listitem>
        <para>
         In order to clean up a &vmguest; with preserve status, it has to be
         destroyed manually.
       </para></listitem>
      </varlistentry>
      <varlistentry>
       <term>rename-restart</term>
       <listitem>
        <para>
         The old &vmguest; is renamed and a new domain is started with the old
         name.
       </para></listitem>
      </varlistentry>
     </variablelist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>on_crash</term>
   <listitem>
    <para>
     The configuration for the crash behavior offers the same parameters as
     poweroff and reboot. Additionally, there are two more options:
     </para>
     <variablelist>
      <varlistentry>
       <term>coredump-destroy </term>
       <listitem>
        <para>
         Dump the core of the &vmguest; before destroying it.
       </para></listitem>
      </varlistentry>
      <varlistentry>
       <term>coredump-restart</term>
       <listitem>
        <para>
         Dump the core of the &vmguest; before restarting it.
       </para></listitem>
      </varlistentry>
     </variablelist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>bootloader</term>
   <listitem>
    <para>
     Define the program that is used to boot the &vmguest;. Paravirtualized
     &sle; 11 systems use <filename>/usr/bin/pygrub</filename> by default.
   </para></listitem>
  </varlistentry>
<varlistentry>
 <term>bootloader_args</term>
 <listitem>
  <para>
   Provide additional parameters to a boot loader program.
 </para></listitem>
</varlistentry>
-->
<!--  <varlistentry>
   <term>kernel_kernel</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>kernel_initrd</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  <varlistentry>
   <term>kernel_args</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry> -->
<!--  <varlistentry>
   <term>localtime</term>
   <listitem>
    <para>
     Set this parameter to <literal>1</literal> if the &vmguest; operating
     system expects the hardware clock to run with local time instead of UTC.
   </para></listitem>
  </varlistentry>

  <varlistentry>
   <term>shadow_memory</term>
   <listitem>
    <para>
     Define how much shadow pagetable memory in MB is available for the &vmguest;.
   </para></listitem>
  </varlistentry>
  -->
<!--
  TODO
  http://lists.xensource.com/archives/html/xen-changelog/2008-09/msg00019.html
  could not make this working yet ...
  <varlistentry>
   <term>security</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry> -->
<!--
  TODO
  did not manage to add this to the configuration.
  <varlistentry>
 <term>vcpu_avail</term>
 <listitem>
  <para>
   This value is used to define a bitmap that selects which of the CPUs are
   available to the &vmguest;.
 </para></listitem>
</varlistentry> -->
<!--
 TODO:
 is this CPU features?
<varlistentry>
 <term>features</term>
 <listitem>
  <para>
 </para></listitem>
</varlistentry> -->
<!--
<varlistentry>
 <term>on_xend_start or on_xend_stop</term>
 <listitem>
  <para>
   Defines the behavior of the &vmguest; when Xend starts or stops.
 </para></listitem>
</varlistentry>
<varlistentry>
 <term>start_time</term>
 <listitem>
  <para>
   Time in seconds when the &vmguest; was started.
 </para></listitem>
</varlistentry>
<varlistentry>
 <term>cpus</term>
 <listitem>
  <para>
   Defines which CPUs are available to a &vmguest;. The settings may be changed
   with <command>xm vcpu-pin</command>.
 </para></listitem>
</varlistentry>

<varlistentry>
 <term>domid</term>
 <listitem>
  <para>
   Defines the id that Xend assings to a running &vmguest;.
 </para></listitem>
</varlistentry>
<varlistentry>
 <term>online_vcpus</term>
 <listitem>
  <para>
   Number of virtual CPUs that are available to the &vmguest;.
 </para></listitem>
</varlistentry>
<varlistentry>
 <term>status</term>
 <listitem>
  <para>
   Lists the current state of the &vmguest;.
  </para>
   <informaltable>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>
        <para><literal>0</literal></para>
       </entry>
       <entry>
        <para>The &vmguest; is stopped.</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>1</literal></para>
       </entry>
       <entry>
        <para>The &vmguest; is suspended.</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>2</literal></para>
       </entry>
       <entry>
        <para>
         The &vmguest; is running.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
 </listitem>
</varlistentry>
<varlistentry>
 <term>cpu_time</term>
 <listitem>
  <para>
   Time in nanoseconds the &vmguest; already used.
 </para></listitem>
</varlistentry>
<varlistentry>
 <term>shutdown_reason</term>
 <listitem>
  <remark>TODO: I have no idea what numbers are available, and what meaning they
  have.</remark>
  <para>
   A number that is provided by the &vmguest; and informs about the reason of a
   shutdown.
 </para></listitem>
</varlistentry>
<remark>TODO: is there a parameter up_time?</remark>
-->
<!--
<varlistentry>
 <term>up_time</term>
 <listitem>
  <para>
 </para></listitem>
</varlistentry>
-->
<!--
<varlistentry>
 <term>image</term>
 <listitem>
  <para>
   This is the container for the main machine configuration. The actual image
   type is one of <literal>linux</literal>, or <literal>HVM</literal> for fully
   virtualized guests. HVM is only available if your computer supports VMX and
   also activates this feature during boot.
 </para>
</listitem>
</varlistentry>
<remark>TODO: I do not have an idea which of the following parameters are available in
linux or hvm.
  - kernel
  - ramdisk
  - args
  - ip
  - root
  (configVNC)
  - nographic
  - vnc
  - sdl
  - vncdisplay
  - vncunused
  (HVM)
  - device_model
  - display
  - xauthority
  - vncconsole
  - pae
  - acpi
  - apic
  (parseDeviceModel)
  - boot
  - fda
  - fdb
  - soundhw
  - localtime
  - monitor
  - serial
  - stdvga
  - isa
  - vcpus
  - acpi
  - usb
  - usbdevice

(all devices)
  - backend
  - dom
  - id
  - uuid
</remark>

  <varlistentry>
   <term>vbd</term>
   <listitem>
    <para>
     In this section, a virtual block device is defined. 
    </para>
    <variablelist>
     <varlistentry>
      <term>protocol</term>
      <listitem>
       <para>
        The used I/O protocol of Xend. 
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>bootable</term>
      <listitem>
       <para>
        Defines if this block device should be considered bootable.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>driver</term>
      <listitem>
       <para>
        Defines if this block device is <literal>paravirtualized</literal> or
        <literal>ioemu</literal> (an emulated hardware device).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>dev</term>
      <listitem>
       <para>
        Defines the device name of the virtual block device in the &vmguest;.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>uname</term>
      <listitem>
       <para>
        Defines where the virtual block device really stores its data. See also
        <xref linkend="sec.xen.config.disk"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>mode</term>
      <listitem>
       <para>
        Defines if the device is writable.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>backend</term>
      <listitem>
       <para>
        Defines the domain to use as backend for the virtual block device.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </listitem>
   
  </varlistentry>
  -->
<!--
  - uname
  - dev (ioemu:, .. etc)
  - mode (r, w. w!) -->
<!--
  <varlistentry>
   <term>vif</term>
   <listitem>
    <para>
     Defines a virtual network interface. Available configuration options
     include:
    </para>
    <remark>TODO: what is (devid 0) in the vif configuration?</remark>
    <remark>TODO: what is (backend 0) in the vif configuration?</remark>
    <variablelist>
     <varlistentry>
      <term>bridge</term>
      <listitem>
       <para>
        Defines the bridge to use. Find more information about bridges
        in <xref linkend="sec.xen.vbridge"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>mac</term>
      <listitem>
       <para>
        Defines the mac address of the virtual network interface. The mac
        addresses reserved for &xen; virtual network interfaces look like
        <literal>00:16:3E:xx:xx:xx</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>model</term>
      <listitem>
       <para>
        Defines the type of hardware to emulate for fully virtualized guests.
        See also <xref linkend="sec.xen.vdevices"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>script</term>
      <listitem>
       <para>
        Defines the script to use when bringing the interface up or down. 
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </listitem>
  </varlistentry>
  -->
<!--
  - type
  - mac
  - bridge
  - model
  - rate
  - vifname
  - script
  - ip -->
<!--
  <varlistentry>
   <term>console</term>
   <listitem>
    <para>
     (protocol vt100)
     (uuid 6b813f24-c781-35f1-25c5-fda0126796b0)
     (location 4)
   </para></listitem>
  </varlistentry>

  <varlistentry>
   <term>vkbd</term>
   <listitem>
    <para>
     (devid 0)
     (uuid 6e74df8d-2b84-1215-d4e6-d495d62a0a2c)
     (backend 0)
   </para></listitem>
  </varlistentry>

  <varlistentry>
   <term>vfb</term>
   <listitem>
    <para>
     (vncunused 1)
     (uuid 6759526b-c0b1-3122-a839-4c2ae5a1e4d4)
     (xauthority /root/.Xauthority)
     (devid 0)
     (location localhost:5900)
     (type vnc)
   </para></listitem>
  </varlistentry>

  <varlistentry>
   <term>pci</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  -->
<!--
  - domain
  - bus
  - slot
  - func
  (Xen 2.0)
  - dev -->
<!--
  <varlistentry>
   <term>io</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  -->
<!--
  - from
  - to -->
<!--
  <varlistentry>
   <term>tpm</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  - pref_instance
  - instance

  <varlistentry>
   <term>pciquirk</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  - pci_ids
  - pci_config_space_fields
  - unconstrained_dev_ids

  <varlistentry>
   <term>irq</term>
   <listitem>
    <para>
   </para></listitem>
  </varlistentry>
  - irq
</variablelist> 
-->
</appendix>
