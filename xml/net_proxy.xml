<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>
<!-- fs: 2010-02-01: 
     Documentation for the YaST Squid module needs to be added -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="cha-squid">
 <title>The Squid Proxy Server</title>
 <info>
  <abstract>
   <para>
    Squid is a widely-used proxy cache for Linux and UNIX platforms. This means
    that it stores requested Internet objects, such as data on a Web or FTP
    server, on a machine that is closer to the requesting workstation than the
    server. It may be set up in multiple hierarchies to assure optimal response
    times and low bandwidth usage, even in modes that are transparent for the
    end user. Additional software like squidGuard may be used to filter Web
    contents.
   </para>
  </abstract>
 </info><indexterm>
 <primary>Squid</primary></indexterm><indexterm>
 <primary>proxies</primary>
 <see>Squid</see></indexterm><indexterm>
 <primary>Squid</primary>
 <secondary>caches</secondary></indexterm><indexterm>
 <primary>proxies</primary>
 <secondary>caches</secondary></indexterm>
 <para>
  Squid acts as a proxy cache. It redirects object requests from clients (in
  this case, from Web browsers) to the server. When the requested objects
  arrive from the server, it delivers the objects to the client and keeps a
  copy of them in the hard disk cache. One of the advantages of caching is that
  several clients requesting the same object can be served from the hard disk
  cache. This enables clients to receive the data much faster than from the
  Internet. This procedure also reduces the network traffic. <indexterm>
  <primary>proxies</primary>
  <secondary>advantages</secondary>
  </indexterm>
 </para>
 <para>
  <indexterm>
  <primary>Squid</primary>
  <secondary>features</secondary>
  </indexterm> Along with the actual caching, Squid offers a wide range of
  features such as distributing the load over intercommunicating hierarchies of
  proxy servers, defining strict access control lists for all clients accessing
  the proxy, allowing or denying access to specific Web pages with the help of
  other applications, and generating statistics about frequently-visited Web
  pages for the assessment of the users' surfing habits. Squid is not a generic
  proxy. It normally proxies only HTTP connections. It supports the protocols
  FTP, Gopher, SSL, and WAIS, but it does not support other Internet protocols,
  such as Real Audio, news, or video conferencing. Because Squid only supports
  the UDP protocol to provide communication between different caches, many
  other multimedia programs are not supported.
 </para>
 <section xml:id="sec-squid-cacheinfos">
  <title>Some Facts about Proxy Caches</title>
  <para>
   As a proxy cache, Squid can be used in several ways. When combined with a
   firewall, it can help with security. Multiple proxies can be used together.
   It can also determine what types of objects should be cached and for how
   long.
  </para>
  <section xml:id="sec-squid-security">
   <title>Squid and Security</title><indexterm>
   <primary>Squid</primary>
   <secondary>security</secondary></indexterm><indexterm>
   <primary>security</primary>
   <secondary>Squid</secondary></indexterm>
   <para>
    It is possible to use Squid together with a firewall to secure internal
    networks from the outside using a proxy cache. The firewall denies all
    clients access to external services except Squid. All Web connections must
    be established by the proxy. With this configuration, Squid completely
    controls Web access.
   </para>
   <para>
    <indexterm>
    <primary>Squid</primary>
    <secondary>security</secondary>
    </indexterm> If the firewall configuration includes a DMZ, the proxy should
    operate within this zone. <xref linkend="sec-squid-proxyconfigtrans"/>
    describes how to implement a <emphasis>transparent</emphasis> proxy. This
    simplifies the configuration of the clients, because in this case they do
    not need any information about the proxy.
   </para>
  </section>
  <section xml:id="sec-squid-morecaches">
   <title>Multiple Caches</title><indexterm>
   <primary>Squid</primary>
   <secondary>caches</secondary></indexterm>
   <para>
    Several instances of Squid can be configured to exchange objects between
    them. This reduces the total system load and increases the chances of
    finding an object already existing in the local network. It is also
    possible to configure cache hierarchies, so a cache is able to forward
    object requests to sibling caches or to a parent cache&mdash;causing it to
    get objects from another cache in the local network or directly from the
    source.
   </para>
   <para>
    Choosing the appropriate topology for the cache hierarchy is very
    important, because it is not desirable to increase the overall traffic on
    the network. For a very large network, it would make sense to configure a
    proxy server for every subnetwork and connect them to a parent proxy, which
    in turn is connected to the proxy cache of the ISP.
   </para>
   <para>
    All this communication is handled by ICP (Internet cache protocol) running
    on top of the UDP protocol. Data transfers between caches are handled using
    HTTP (hypertext transmission protocol) based on TCP.
   </para>
   <para>
    To find the most appropriate server from which to get the objects, one
    cache sends an ICP request to all sibling proxies. These answer the
    requests via ICP responses with a HIT code if the object was detected or a
    MISS if it was not. If multiple HIT responses were found, the proxy server
    decides from which server to download, depending on factors such as which
    cache sent the fastest answer or which one is closer. If no satisfactory
    responses are received, the request is sent to the parent cache.
   </para>
   <tip>
    <para>
     To avoid duplication of objects in different caches in the network, other
     ICP protocols are used, such as CARP (cache array routing protocol) or
     HTCP (hypertext cache protocol). The more objects maintained in the
     network, the greater the possibility of finding the desired one.
    </para>
   </tip>
  </section>
  <section xml:id="sec-squid-latching">
   <title>Caching Internet Objects</title><indexterm>
   <primary>Squid</primary>
   <secondary>object status</secondary></indexterm>
   <para>
    Not all objects available in the network are static. There are a lot of
    dynamically generated CGI pages, visitor counters, and encrypted SSL
    content documents. Objects like this are not cached because they change
    each time they are accessed.
   </para>
   <para>
    The question remains as to how long all the other objects stored in the
    cache should stay there. To determine this, all objects in the cache are
    assigned one of various possible states. Web and proxy servers find out the
    status of an object by adding headers to these objects, such as <quote>Last
    modified</quote> or <quote>Expires</quote> and the corresponding date.
    Other headers specifying that objects must not be cached are used as well.
   </para>
   <para>
    Objects in the cache are normally replaced, due to a lack of free hard disk
    space, using algorithms such as LRU (last recently used). Basically this
    means that the proxy expunges the objects that have not been requested for
    the longest time.
   </para>
  </section>
 </section>
 <section xml:id="sec-squid-sysneeds">
  <title>System Requirements</title><indexterm>
  <primary>Squid</primary>
  <secondary>system requirements</secondary></indexterm>
  <para>
   The most important thing is to determine the maximum network load the system
   must bear. Therefore, it is important to pay more attention to the load
   peaks, because these might be more than four times the day's average. When
   in doubt, it would be better to overestimate the system's requirements,
   because having Squid working close to the limit of its capabilities could
   lead to a severe loss in the quality of the service. The following sections
   point to the system factors in order of significance.
  </para>
  <section xml:id="sec-squid-sysneeds-disk">
   <title>Hard Disks</title>
   <para>
    Speed plays an important role in the caching process, so this factor
    deserves special attention. For hard disks, this parameter is described as
    <emphasis>random seek time</emphasis>, measured in milliseconds. Because
    the data blocks that Squid reads from or writes to the hard disk tend to be
    rather small, the seek time of the hard disk is more important than its
    data throughput. For the purposes of a proxy, hard disks with high rotation
    speeds are probably the better choice, because they allow the read-write
    head to be positioned in the required spot more quickly. One possibility to
    speed up the system is to use a number of disks concurrently or to employ
    striping RAID arrays.
   </para>
  </section>
  <section>
   <title>Size of the Disk Cache</title><indexterm>
   <primary>Squid</primary>
   <secondary>caches</secondary>
   <tertiary>size</tertiary></indexterm>
   <para>
    In a small cache, the probability of a HIT (finding the requested object
    already located there) is small, because the cache is easily filled and the
    less requested objects are replaced by newer ones. If, for example, one GB
    is available for the cache and the users only surf ten MB per day, it would
    take more than one hundred days to fill the cache.
   </para>
   <para>
    The easiest way to determine the needed cache size is to consider the
    maximum transfer rate of the connection. With a 1 Mbit/s connection, the
    maximum transfer rate is 125 KB/s. If all this traffic ends up in the
    cache, in one hour it would add up to 450 MB and, assuming that all this
    traffic is generated in only eight working hours, it would reach
    3.6&nbsp;GB in one day. Because the connection is normally not used to its
    upper volume limit, it can be assumed that the total data volume handled by
    the cache is approximately 2&nbsp;GB. This is why 2&nbsp;GB of disk space
    is required in the example for Squid to keep one day's worth of browsed
    data cached.
   </para>
  </section>
  <section xml:id="sec-squid-ram">
   <title>RAM</title><indexterm>
   <primary>Squid</primary>
   <secondary>RAM and</secondary></indexterm>
   <para>
    The amount of memory (RAM) required by Squid directly correlates to the
    number of objects in the cache. Squid also stores cache object references
    and frequently requested objects in the main memory to speed up retrieval
    of this data. Random access memory is much faster than a hard disk.
   </para>
   <para>
    In addition to that, there is other data that Squid needs to keep in
    memory, such as a table with all the IP addresses handled, an exact domain
    name cache, the most frequently requested objects, access control lists,
    buffers, and more.
   </para>
   <para>
    It is very important to have sufficient memory for the Squid process,
    because system performance is dramatically reduced if it must be swapped to
    disk. The cachemgr.cgi tool can be used for the cache memory management.
    This tool is introduced in <xref linkend="sec-squid-cachemgr"/>.
<!-- ke: This recommendation probably does not make sense anymore:
    Sites with huge network traffic
    should consider using an &amd64; or &intel64; system with more than
    4&nbsp;GB of memory.
    -->
   </para>
  </section>
  <section xml:id="sec-squid-cpu">
   <title>CPU</title><indexterm>
   <primary>Squid</primary>
   <secondary>CPU and</secondary></indexterm>
   <para>
    Squid is not a program that requires intensive CPU usage. The load of the
    processor is only increased while the contents of the cache are loaded or
    checked. Using a multiprocessor machine does not increase the performance
    of the system. To increase efficiency, it is better to buy faster disks or
    add more memory.
   </para>
  </section>
 </section>
 <section xml:id="sec-squid-start">
  <title>Starting Squid</title><indexterm>
  <primary>Squid</primary>
  <secondary>starting</secondary></indexterm>
  <para>
   If not already installed, install the <systemitem>squid</systemitem>
   package. <systemitem>squid</systemitem> does not belong to the default &sls;
   installation scope.
  </para>
  <para>
   Squid is already pre-configured in &slsreg;, you can start it right after
   the installation. To ensure a smooth start-up, the network should be
   configured in a way that at least one name server and the Internet can be
   reached. Problems can arise if a dial-up connection is used with a dynamic
   DNS configuration. In this case, at least the name server should be entered,
   because Squid does not start if it does not detect a DNS server in
   <filename>/etc/resolv.conf</filename>.
  </para><indexterm>
  <primary>configuration files</primary>
  <secondary>resolv.conf</secondary></indexterm>
  <section>
   <title>Commands for Starting and Stopping Squid</title><indexterm>
   <primary>Squid</primary>
   <secondary>directories</secondary></indexterm><indexterm>
   <primary>scripts</primary>
   <secondary>init.d</secondary>
   <tertiary>squid</tertiary></indexterm><indexterm>
   <primary>Squid</primary>
   <secondary>permissions</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>squid.conf</secondary></indexterm>
   <para>
    To start Squid, enter <command>rcsquid&nbsp;</command>
    <option>start</option> at the command line as
    <systemitem class="username">root</systemitem>. In the initial start-up,
    the directory structure of the cache must first be defined in
    <filename>/var/cache/squid</filename>. This is done automatically by the
    start script <filename>/etc/init.d/squid</filename> and can take a few
    seconds or even minutes. If <literal>done</literal> appears to the right in
    green, Squid has been successfully loaded. To test the functionality of
    Squid on the local system, enter <option>localhost</option> as the proxy
    and <option>3128</option> as the port in the browser.
   </para>
   <para>
    To allow users from the local system and other systems to access Squid and
    the Internet, change the entry in the configuration files
    <filename>/etc/squid/squid.conf</filename> from <option>http_access deny
    all</option> to <option>http_access allow all</option>. However, in doing
    so, consider that Squid is made completely accessible to anyone by this
    action. Therefore, define ACLs that control access to the proxy. More
    information about this is available in <xref linkend="sec-squid-acl"/>.
   </para><indexterm>
   <primary>Squid</primary>
   <secondary>stopping</secondary></indexterm>
   <para>
    After modifying the configuration file
    <filename>/etc/squid/squid.conf</filename>, Squid must reload the
    configuration file. Do this with <command>rcsquid&nbsp;</command>
    <option>reload</option>. Alternatively, completely restart Squid with
    <command>rcsquid&nbsp;</command> <option>restart</option>.
   </para>
   <para>
    The command <command>rcsquid</command>&nbsp;<option>status</option> can be
    used to check if the proxy is running. The command
    <command>rcsquid</command>&nbsp;<option>stop</option> causes Squid to shut
    down. This can take a while, because Squid waits up to half a minute
    (<option>shutdown_lifetime</option> option in
    <filename>/etc/squid/squid.conf</filename>) before dropping the connections
    to the clients and writing its data to the disk.
   </para>
   <warning>
    <title>Terminating Squid</title>
    <para>
     <indexterm>
     <primary>Squid</primary>
     <secondary>caches</secondary>
     <tertiary>damaged</tertiary>
     </indexterm> Terminating Squid with <command>kill</command> or
     <command>killall</command> can damage the cache. To be able to restart
     Squid, a damaged cache must be deleted.
    </para>
   </warning><indexterm>
   <primary>Squid</primary>
   <secondary>log files</secondary></indexterm><indexterm>
   <primary>log files</primary>
   <secondary>Squid</secondary></indexterm><indexterm>
   <primary>Squid</primary>
   <secondary>troubleshooting</secondary></indexterm>
   <para>
    If Squid dies after a short period of time even though it was started
    successfully, check whether there is a faulty name server entry or whether
    the <filename>/etc/resolv.conf</filename> file is missing. Squid logs the
    cause of a start-up failure in the file
    <filename>/var/log/squid/cache.log</filename>. If Squid should be loaded
    automatically when the system boots, use the &yast; runlevel editor to
    activate Squid for the desired runlevels. See
    <xref linkend="sec-boot-runlevel-edit"/>.
   </para><indexterm>
   <primary>Squid</primary>
   <secondary>uninstalling</secondary></indexterm>
   <para>
    An uninstall of Squid does not remove the cache hierarchy or the log files.
    To remove these, delete the <filename>/var/cache/squid</filename> directory
    manually.
   </para>
  </section>
  <section>
   <title>Local DNS Server</title><indexterm>
   <primary>DNS</primary>
   <secondary>Squid and</secondary></indexterm><indexterm>
   <primary>Squid</primary>
   <secondary>DNS</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>named.conf</secondary></indexterm>
   <para>
    Setting up a local DNS server makes sense even if it does not manage its
    own domain. It then simply acts as a caching-only name server and is also
    able to resolve DNS requests via the root name servers without requiring
    any special configuration (see <xref linkend="sec-dns-bind"/>). How this
    can be done depends on whether or not you chose dynamic DNS during the
    configuration of the Internet connection.
   </para>
   <variablelist>
    <varlistentry>
     <term>Dynamic DNS</term>
     <listitem>
      <para>
       Normally, with dynamic DNS, the DNS server is set by the provider during
       the establishment of the Internet connection and the local
       <filename>/etc/resolv.conf</filename> file is adjusted automatically.
       This behavior is controlled in the
       <filename>/etc/sysconfig/network/config</filename> file with the
       <constant>NETCONFIG_DNS_POLICY</constant> sysconfig variable. Set
       <constant>NETCONFIG_DNS_POLICY</constant> to <constant>""</constant>
       with the &yast; sysconfig editor (see
       <xref linkend="sec-boot-sysconfig-edit"/>). Then enter the local DNS
       server in the <filename>/etc/resolv.conf</filename> file with the IP
       address <systemitem class="ipaddress">127.0.0.1</systemitem> for
       <systemitem class="domainname">localhost</systemitem>. This way Squid
       can always find the local name server when it starts.
      </para>
      <remark>FIXME ke: check it.  Do you have to set more variables?</remark>
      <para>
       To make the provider's name server accessible, enter it in the
       configuration file <filename>/etc/named.conf</filename> under
       <systemitem>forwarders</systemitem> along with its IP address. With
       dynamic DNS, this can be achieved automatically during connection
       establishment by setting the sysconfig variable
       <constant>NETCONFIG_DNS_POLICY</constant> to <constant>auto</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Static DNS</term>
     <listitem>
      <para>
       With static DNS, no automatic DNS adjustments take place while
       establishing a connection, so there is no need to change any sysconfig
       variables. You must, however, enter the local DNS server in the file
       <filename>/etc/resolv.conf</filename> as described above. Additionally,
       the providers static name server must be entered manually in the
       <filename>/etc/named.conf</filename> file under
       <systemitem>forwarders</systemitem> along with its IP address.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <tip>
    <title>DNS and Firewall</title>
    <para>
     If you have a firewall running, make sure DNS requests can pass it.
    </para>
   </tip>
  </section>
 </section>
 <section xml:id="sec-squid-configfile">
  <title>The /etc/squid/squid.conf Configuration File</title><indexterm>
  <primary>Squid</primary>
  <secondary>configuring</secondary></indexterm><indexterm>
  <primary>configuring</primary>
  <secondary>Squid</secondary></indexterm><indexterm>
  <primary>configuration files</primary>
  <secondary>squid.conf</secondary></indexterm>
  <para>
   All Squid proxy server settings are made in the
   <filename>/etc/squid/squid.conf</filename> file. To start Squid for the
   first time, no changes are necessary in this file, but external clients are
   initially denied access. The proxy is available for
   <systemitem class="domainname">localhost</systemitem>. The default port is
   <option>3128</option>. The pre-installed configuration file
   <filename>/etc/squid/squid.conf</filename> provides detailed information
   about the options and many examples. Nearly all entries begin with
   <literal>#</literal> (the lines are commented) and the relevant
   specifications can be found at the end of the line. The given values almost
   always correlate with the default values, so removing the comment signs
   without changing any of the parameters actually has little effect in most
   cases. If possible, leave the sample as it is and insert the options along
   with the modified parameters in the line below. This way, the default values
   may easily be recovered and compared with the changes.
  </para>
  <tip>
   <title>Adapting the Configuration File after an Update</title>
   <para>
    If you have updated from an earlier Squid version, it is recommended to
    edit the new <filename>/etc/squid/squid.conf</filename> and only apply the
    changes made in the previous file. If you try to use the old
    <filename>squid.conf</filename>, you risk that the configuration no longer
    works, because options are sometimes modified and new changes added.
   </para>
  </tip>
  <section>
   <title>General Configuration Options (Selection)</title>
   <variablelist>
    <varlistentry>
     <term>http_port 3128</term>
     <listitem>
      <para>
       This is the port on which Squid listens for client requests. The default
       port is <option>3128</option>, but <option>8080</option> is also common.
       If desired, specify several port numbers separated by blank spaces.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_peer <replaceable>hostname</replaceable><replaceable>type</replaceable><replaceable>proxy-port</replaceable><replaceable>icp-port</replaceable></term>
     <listitem>
      <para>
       Here, enter a parent proxy, for example, if you want to use the proxy of
       your ISP. As <replaceable>hostname</replaceable>, enter the name or IP
       address of the proxy to use and, as <replaceable>type</replaceable>,
       enter <option>parent</option>. For
       <replaceable>proxy-port</replaceable>, enter the port number that is
       also given by the operator of the parent for use in the browser (usually
       <option>8080</option>). Set the <replaceable>icp-port</replaceable> to
       <option>7</option> or <option>0</option> if the ICP port of the parent
       is not known and its use is irrelevant to the provider. In addition,
       <option>default</option> and <option>no-query</option> may be specified
       after the port numbers to prohibit the use of the ICP protocol. Squid
       then behaves like a normal browser as far as the provider's proxy is
       concerned.
       <remark>This para is horrible, and I don't have a good
       explanation yet. The description tries to configure squid in a
       way, that the parent proxy only sees a browser and no child.
       This really needs an update - bg</remark>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_mem 8 MB</term>
     <listitem>
      <para>
       This entry defines the amount of memory Squid can use for very popular
       replies. The default is <option>8 MB</option>. This does not specify the
       memory usage of Squid and may be exceeded.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_dir ufs /var/cache/squid/ 100 16 256</term>
     <listitem>
      <para>
       The entry <emphasis>cache_dir</emphasis> defines the directory where all
       the objects are stored on disk. The numbers at the end indicate the
       maximum disk space in MB to use and the number of directories in the
       first and second level. The <option>ufs</option> parameter should be
       left alone. The default is 100 MB occupied disk space in the
       <filename>/var/cache/squid</filename> directory and creation of 16
       subdirectories inside it, each containing 256 more subdirectories. When
       specifying the disk space to use, leave sufficient reserve disk space.
       Values from a minimum of 50% to a maximum of 80% of the available disk
       space make the most sense here. The last two numbers for the directories
       should only be increased with caution, because too many directories can
       also lead to performance problems. If you have several disks that share
       the cache, enter several <emphasis>cache_dir</emphasis> lines.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_access_log /var/log/squid/access.log</term>
     <term>cache_log /var/log/squid/cache.log</term>
     <term>cache_store_log /var/log/squid/store.log</term>
     <listitem>
      <para>
       <indexterm>
       <primary>Squid</primary>
       <secondary>log files</secondary>
       </indexterm> <indexterm>
       <primary>log files</primary>
       <secondary>Squid</secondary>
       </indexterm> These three entries specify the paths where Squid logs all
       its actions. Normally, nothing is changed here. If Squid is experiencing
       a heavy usage burden, it might make sense to distribute the cache and
       the log files over several disks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>emulate_httpd_log off</term>
     <listitem>
      <para>
       If the entry is set to <emphasis>on</emphasis>, obtain readable log
       files. Some evaluation programs cannot interpret this, however.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>client_netmask 255.255.255.255</term>
     <listitem>
      <para>
       With this entry, mask IP addresses of clients in the log files. The last
       digit of the IP address is set to zero if you enter
       <systemitem class="netmask">255.255.255.0</systemitem> here. You may
       protect the privacy of your clients this way.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ftp_user Squid@</term>
     <listitem>
      <para>
       With this, set the password Squid should use for the anonymous FTP
       login. It can make sense to specify a valid e-mail address here, because
       some FTP servers check these for validity.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>cache_mgr webmaster</term>
     <listitem>
      <para>
       An e-mail address to which Squid sends a message if it unexpectedly
       crashes. The default is <emphasis>webmaster</emphasis>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>logfile_rotate 0</term>
     <listitem>
      <para>
       If you run <command>squid</command>&nbsp;<option>-k rotate</option>,
       <command>Squid</command> can rotate secured log files. The files are
       numbered in this process and, after reaching the specified value, the
       oldest file is overwritten. The default value is <option>0</option>
       because archiving and deleting log files in &sls; is carried out by a
       cron job set in the configuration file
       <filename>/etc/logrotate/squid</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>append_domain &lt;domain&gt;</term>
     <listitem>
      <para>
       With <emphasis>append_domain</emphasis>, specify which domain to append
       automatically when none is given. Usually, your own domain is entered
       here, so entering <emphasis>www</emphasis> in the browser accesses your
       own Web server.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>forwarded_for on</term>
     <listitem>
      <para>
       If you set the entry to <emphasis>off</emphasis>, Squid removes the IP
       address and the system name of the client from HTTP requests. Otherwise
       it adds a line to the header like
      </para>
<screen>X-Forwarded-For: &exampleclientip;</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>negative_ttl 5 minutes; negative_dns_ttl 5 minutes</term>
     <listitem>
      <para>
       Normally, you do not need to change these values. If you have a dial-up
       connection, however, the Internet may, at times, not be accessible.
       Squid makes a note of the failed requests then refuses to issue new
       ones, although the Internet connection has been reestablished. In a case
       such as this, change the <emphasis>minutes</emphasis> to
       <emphasis>seconds</emphasis>. Then, after clicking
       <emphasis>Reload</emphasis> in the browser, the dial-up process should
       be reengaged after a few seconds.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>never_direct allow <replaceable>acl_name</replaceable></term>
     <listitem>
      <para>
       To prevent Squid from taking requests directly from the Internet, use
       the above command to force connection to another proxy. This must have
       previously been entered in <emphasis>cache_peer</emphasis>. If
       <option>all</option> is specified as the
       <replaceable>acl_name</replaceable>, force all requests to be forwarded
       directly to the <emphasis>parent</emphasis>. This might be necessary,
       for example, if you are using a provider that strictly stipulates the
       use of its proxies or denies its firewall direct Internet access.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <section xml:id="sec-squid-acl">
   <title>Options for Access Controls</title><indexterm>
   <primary>Squid</primary>
   <secondary>ACLs</secondary></indexterm><indexterm>
   <primary>Squid</primary>
   <secondary>permissions</secondary></indexterm>
   <para>
    Squid provides a detailed system for controlling the access to the proxy.
    By implementing ACLs, it can be configured easily and comprehensively. This
    involves lists with rules that are processed sequentially. ACLs must be
    defined before they can be used. Some default ACLs, such as
    <emphasis>all</emphasis> and <emphasis>localhost</emphasis>, already exist.
    However, the mere definition of an ACL does not mean that it is actually
    applied. This only happens in conjunction with
    <emphasis>http_access</emphasis> rules.
   </para>
   <variablelist>
    <varlistentry>
     <term>acl &lt;acl_name&gt; &lt;type&gt; &lt;data&gt;</term>
     <listitem>
      <para>
       <indexterm>
       <primary>configuration files</primary>
       <secondary>squid.conf</secondary>
       </indexterm> An ACL requires at least three specifications to define it.
       The name <emphasis>&lt;acl_name&gt;</emphasis> can be chosen
       arbitrarily. For <emphasis>&lt;type&gt;</emphasis>, select from a
       variety of different options, which can be found in the <emphasis>ACCESS
       CONTROLS</emphasis> section in the
       <filename>/etc/squid/squid.conf</filename> file. The specification for
       <emphasis>&lt;data&gt;</emphasis> depends on the individual ACL type and
       can also be read from a file, for example, via hostnames, IP addresses,
       or URLs. The following are some simple examples:
      </para>
<screen>
acl mysurfers srcdomain .my-domain.com
acl teachers src 192.168.1.0/255.255.255.0
acl students src 192.168.7.0-192.168.9.0/255.255.255.0
acl lunch time MTWHF 12:00-15:00
</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>http_access allow &lt;acl_name&gt;</term>
     <listitem>
      <para>
       <emphasis>http_access</emphasis> defines who is allowed to use the proxy
       and who can access what on the Internet. For this, ACLs must be given.
       <emphasis>localhost</emphasis> and <emphasis>all</emphasis> have already
       been defined above, which can deny or allow access via
       <emphasis>deny</emphasis> or <emphasis>allow</emphasis>. A list
       containing any number of <emphasis>http_access</emphasis> entries can be
       created, processed from top to bottom, and, depending on which occurs
       first, access is allowed or denied to the respective URL. The last entry
       should always be <emphasis>http_access deny all</emphasis>. In the
       following example, the <emphasis>localhost</emphasis> has free access to
       everything while all other hosts are denied access completely.
      </para>
<screen>
http_access allow localhost
http_access deny all
</screen>
      <para>
       In another example using these rules, the group
       <systemitem class="groupname">teachers</systemitem> always has access to
       the Internet. The group
       <systemitem class="groupname">students</systemitem> only gets access
       Monday to Friday during lunch time.
      </para>
<screen>
http_access deny localhost
http_access allow teachers
http_access allow students lunch time
http_access deny all
</screen>
      <para>
       The list with the <emphasis>http_access</emphasis> entries should only
       be entered, for the sake of readability, at the designated position in
       the <filename>/etc/squid/squid.conf</filename> file. That is, between
       the text
      </para>
<screen>
# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR
# CLIENTS
</screen>
      <para>
       and the last
      </para>
<screen>http_access deny all</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>redirect_program /usr/bin/squidGuard</term>
     <listitem>
      <para>
       With this option, specify a redirector such as squidGuard, which allows
       the blocking of unwanted URLs. Internet access can be individually
       controlled for various user groups with the help of proxy authentication
       and the appropriate ACLs. squidGuard is a separate package that can be
       installed and configured.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_param basic program /usr/sbin/pam_auth</term>
     <listitem>
      <para>
       If users must be authenticated on the proxy, set a corresponding
       program, such as pam_auth. When accessing pam_auth for the first time,
       the user sees a login window in which to enter the username and
       password. In addition, an ACL is still required, so only clients with a
       valid login can use the Internet:
      </para>
<screen>
acl password proxy_auth REQUIRED

http_access allow password
http_access deny all
</screen>
      <para>
       The <emphasis>REQUIRED</emphasis> after <emphasis>proxy_auth</emphasis>
       can be replaced with a list of permitted usernames or with the path to
       such a list.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ident_lookup_access allow &lt;acl_name&gt;</term>
     <listitem>
      <para>
       With this, have an ident request run for all ACL-defined clients to find
       each user's identity. If you apply <emphasis>all</emphasis> to the
       <emphasis>&lt;acl_name&gt;</emphasis>, this is valid for all clients.
       Also, an ident daemon must be running on all clients. For Linux, install
       the pidentd package for this purpose. For Microsoft Windows, free
       software is available for download from the Internet. To ensure that
       only clients with a successful ident lookup are permitted, define a
       corresponding ACL here:
      </para>
<screen>
acl identhosts ident REQUIRED

http_access allow identhosts
http_access deny all
</screen>
      <para>
       Here, too, replace <emphasis>REQUIRED</emphasis> with a list of
       permitted usernames. Using <emphasis>ident</emphasis> can slow down the
       access time quite a bit, because ident lookups are repeated for each
       request.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
 </section>
 <section xml:id="sec-squid-proxyconfigtrans">
  <title>Configuring a Transparent Proxy</title><indexterm>
  <primary>proxies</primary>
  <secondary>transparent</secondary></indexterm><indexterm>
  <primary>Squid</primary>
  <secondary>transparent proxies</secondary></indexterm>
  <para>
   The usual way of working with proxy servers is the following: the Web
   browser sends requests to a certain port in the proxy server and the proxy
   provides these required objects, whether they are in its cache or not. When
   working in a network, several situations may arise:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     For security reasons, it is recommended that all clients use a proxy to
     surf the Internet.
    </para>
   </listitem>
   <listitem>
    <para>
     All clients must use a proxy, regardless of whether they are aware of it.
    </para>
   </listitem>
   <listitem>
    <para>
     The proxy in a network is moved, but the existing clients need to retain
     their old configuration.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   In all these cases, a transparent proxy may be used. The principle is very
   easy: the proxy intercepts and answers the requests of the Web browser, so
   the Web browser receives the requested pages without knowing from where they
   are coming. As the name indicates, the entire process is done transparently.
  </para>
  <section>
   <title>Configuration Options in /etc/squid/squid.conf</title><indexterm>
   <primary>configuration files</primary>
   <secondary>squid.conf</secondary></indexterm>
   <para>
    To inform squid that it should act as a transparent proxy, use the option
    <systemitem>transparent</systemitem> at the tag
    <systemitem>http_port</systemitem> in the main configuration file
    <filename>/etc/squid/squid.conf</filename>. After restarting squid, the
    only other thing that must be done is to reconfigure the firewall to
    redirect the http port to the port given in
    <systemitem>http_port</systemitem>. In the following squid config line,
    this would be the port 3128.
   </para>
<screen>http_port 3128 transparent</screen>
  </section>
  <section>
   <title>Firewall Configuration with SuSEfirewall2</title><indexterm>
   <primary>Squid</primary>
   <secondary>firewalls and</secondary></indexterm><indexterm>
   <primary>firewalls</primary>
   <secondary>Squid and</secondary></indexterm>
   <para>
    Now redirect all incoming requests via the firewall with help of a port
    forwarding rule to the Squid port. To do this, use the enclosed tool
    &susefirewall;, described in <xref linkend="sec-fire-SuSE-yast"/>. Its
    configuration file can be found in
    <filename>/etc/sysconfig/SuSEfirewall2</filename>. The configuration file
    consists of well-documented entries. To set a transparent proxy, you must
    configure several firewall options:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Device pointing to the Internet:
      <systemitem>FW_DEV_EXT</systemitem>="eth1"
     </para>
    </listitem>
    <listitem>
     <para>
      Device pointing to the network:
      <systemitem>FW_DEV_INT</systemitem>="eth0"
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <indexterm>
    <primary>configuration files</primary>
    <secondary>services</secondary>
    </indexterm> Define ports and services (see
    <filename>/etc/services</filename>) on the firewall that are accessed from
    untrusted (external) networks such as the Internet. In this example, only
    Web services are offered to the outside:
   </para>
<screen>
FW_SERVICES_EXT_TCP="www"
</screen>
   <para>
    Define ports or services (see <filename>/etc/services</filename>) on the
    firewall that are accessed from the secure (internal) network, both via TCP
    and UDP:
   </para>
<screen>
FW_SERVICES_INT_TCP="domain www 3128"
FW_SERVICES_INT_UDP="domain"
</screen>
   <para>
    This allows accessing Web services and Squid (whose default port is
    <option>3128</option>).
<!--rwalter merging-->
    The service <quote>domain</quote> stands for DNS (domain name service).
    This service is commonly used. Otherwise, simply take it out of the above
    entries and set the following option to <literal>no</literal>:
   </para>
<screen>
FW_SERVICE_DNS="yes"
</screen>
   <para>
    The most important option is option number <option>15</option>:
   </para>
   <example xml:id="dat-fw-opt15">
    <title>Firewall Configuration: Option 15</title>
<screen># 15.)
# Which accesses to services should be redirected to a local port on
# the firewall machine?
#
# This option can be used to force all internal users to surf via
# your squid proxy, or transparently redirect incoming webtraffic to
# a secure webserver.
#
# Format: 
# list of &lt;source network&gt;[,&lt;destination network&gt;,&lt;protocol&gt;[,dport[:lport]]
# Where protocol is either tcp or udp. dport is the original
# destination port and lport the port on the local machine to
# redirect the traffic to
#
# An exclamation mark in front of source or destination network
# means everything EXCEPT the specified network
#
# Example: "10.0.0.0/8,0/0,tcp,80,3128 0/0,172.20.1.1,tcp,80,8080"
</screen>
   </example>
   <para>
    The comments above show the syntax to follow. First, enter the IP address
    and the netmask of the internal networks accessing the proxy firewall.
    Second, enter the IP address and the netmask to which these clients send
    their requests. In the case of Web browsers, specify the networks
    <systemitem>0/0</systemitem>, a wild card that means <quote>to
    everywhere.</quote> After that, enter the original port to which these
    requests are sent and, finally, the port to which all these requests are
    redirected. Because Squid supports protocols other than HTTP, redirect
    requests from other ports to the proxy, such as FTP (port 21), HTTPS, or
    SSL (port 443). In this example, Web services (port <option>80</option>)
    are redirected to the proxy port (port <option>3128</option>). If there are
    more networks or services to add, they must be separated by a blank space
    in the respective entry.
   </para>
<screen>
FW_REDIRECT="192.168.0.0/16,0/0,tcp,80,3128"
</screen>
   <para>
    To start the firewall and the new configuration with it, change an entry in
    the <filename>/etc/sysconfig/SuSEfirewall2</filename> file. The entry
    <systemitem>START_FW</systemitem> must be set to <literal>"yes"</literal>.
   </para>
   <para>
    <indexterm>
    <primary>log files</primary>
    <secondary>Squid</secondary>
    </indexterm> <indexterm>
    <primary>Squid</primary>
    <secondary>log files</secondary>
    </indexterm> Start Squid as shown in <xref linkend="sec-squid-start"/>. To
    verify that everything is working properly, check the Squid logs in
    <filename>/var/log/squid/access.log</filename>. <indexterm>
    <primary>ports</primary>
    <secondary>scanning</secondary>
    </indexterm> <indexterm>
    <primary>Squid</primary>
    <secondary>transparent proxies</secondary>
    </indexterm> To verify that all ports are correctly configured, perform a
    port scan on the machine from any computer outside your network. Only the
    Web services (port 80) should be open. To scan the ports with nmap, the
    command syntax is <command>nmap</command>&nbsp;<option>-O
    IP_address</option>.
   </para>
  </section>
 </section>
 <section xml:id="sec-squid-cachemgr">
  <title>cachemgr.cgi</title><indexterm>
  <primary>Squid</primary>
  <secondary>statistics</secondary></indexterm><indexterm>
  <primary>Squid</primary>
  <secondary>cachemgr.cgi</secondary></indexterm>
  <para>
   The cache manager (cachemgr.cgi) is a CGI utility for displaying statistics
   about the memory usage of a running Squid process. It is also a more
   convenient way to manage the cache and view statistics without logging the
   server.
  </para>
  <section>
   <title>Setup</title><indexterm>
   <primary>Squid</primary>
   <secondary>Apache</secondary></indexterm><indexterm>
   <primary>Apache</primary>
   <secondary>Squid</secondary></indexterm>
   <para>
    First, a running Web server on your system is required. Configure Apache as
    described in <xref linkend="cha-apache2"/>. To check if Apache is already
    running, as <systemitem class="username">root</systemitem> enter the
    command <command>rcapache</command>&nbsp;<option>status</option>. If a
    message like this appears:
   </para>
<screen>
Checking for service httpd: OK 
Server uptime: 1 day 18 hours 29 minutes 39 seconds   
</screen>
   <para>
    Apache is running on the machine. Otherwise, enter
    <command>rcapache</command>&nbsp;<option>start</option> to start Apache
    with the &sls; default settings. The last step to set it up is to copy the
    file <filename>cachemgr.cgi</filename> to the Apache directory
    <filename>cgi-bin</filename>. For 32-bit, this works as follows:
   </para>
<screen>cp /usr/lib/squid/cachemgr.cgi /srv/www/cgi-bin/</screen>
   <para>
    In a 64-bit environment, the file <filename>cachemgr.cgi</filename> is
    located below <filename>/usr/lib64/squid/</filename> and the command to
    copy it to the Apache directory is the following:
   </para>
<screen>cp /usr/lib64/squid/cachemgr.cgi /srv/www/cgi-bin/</screen>
  </section>
  <section>
   <title>Cache Manager ACLs in /etc/squid/squid.conf</title><indexterm>
   <primary>Squid</primary>
   <secondary>access controls</secondary></indexterm><indexterm>
   <primary>configuration files</primary>
   <secondary>squid.conf</secondary></indexterm>
   <para>
    There are some default settings in the original file required for the cache
    manager. First, two ACLs are defined, then http_access options use these
    ACLs to grant access from the CGI script to Squid. The first ACL is the
    most important, because the cache manager tries to communicate with Squid
    over the cache_object protocol.
   </para>
<screen>
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255
</screen>
   <para>
    The following rules give Apache the access rights to Squid:
   </para>
<screen>
http_access allow manager localhost
http_access deny manager
</screen>
   <para>
    These rules assume that the Web server and Squid are running on the same
    machine. If the communication between the cache manager and Squid
    originates at the Web server on another computer, include an extra ACL as
    in <xref linkend="dat-acl"/>.
   </para>
   <example xml:id="dat-acl">
    <title>Access Rules</title>
<screen>
acl manager proto cache_object
acl localhost src 127.0.0.1/255.255.255.255
acl webserver src 192.168.1.7/255.255.255.255 # webserver IP
</screen>
   </example>
   <para>
    Then add the rules in <xref linkend="dat-access"/> to permit access from
    the Web server.
   </para>
   <example xml:id="dat-access">
    <title>Access Rules</title>
<screen>
http_access allow manager localhost
http_access allow manager webserver
http_access deny manager
</screen>
   </example>
   <para>
    Configure a password for the manager for access to more options, like
    closing the cache remotely or viewing more information about the cache. For
    this, configure the entry <systemitem>cachemgr_passwd</systemitem> with a
    password for the manager and the list of options to view. This list appears
    as a part of the entry comments in
    <filename>/etc/squid/squid.conf</filename>.
   </para>
   <para>
    Restart Squid every time the configuration file is changed. Do this easily
    with <command>rcsquid</command>&nbsp;<option>reload</option>.
   </para>
  </section>
  <section>
   <title>Viewing the Statistics</title>
   <para>
    Go to the corresponding Web
    site&mdash;<link xlink:href="http://webserver.example.org/cgi-bin/cachemgr.cgi"/>.
    Press <guimenu>continue</guimenu> and browse through the different
    statistics.
<!-- toms 2011-08-25: Link does not work (404)
    More details for each entry shown by the cache manager is in
    the Squid FAQ at
    <ulink url="http://www.squid-cache.org/Doc/FAQ/FAQ-9.html"/>. -->
    <indexterm>
    <primary>Squid</primary>
    <secondary>statistics</secondary>
    </indexterm> <indexterm>
    <primary>Squid</primary>
    <secondary>cachemgr.cgi</secondary>
    </indexterm>
   </para>
  </section>
 </section>
 <section xml:id="sec-squid-squidguard">
  <title>squidGuard</title><indexterm>
  <primary>Squid</primary>
  <secondary>squidGuard</secondary></indexterm>
  <para>
   This section is not intended to explain an extensive configuration of
   squidGuard, only to introduce it and give some advice for using it. For more
   in-depth configuration issues, refer to the squidGuard Web site at
   <link xlink:href="http://www.squidguard.org"/>.
  </para>
  <para>
   squidGuard is a free (GPL), flexible, and fast filter, redirector, and
   access controller plug-in for Squid. It lets you define multiple access
   rules with different restrictions for different user groups on a Squid
   cache. squidGuard uses Squid's standard redirector interface. squidGuard can
   do the following:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Limit Web access for some users to a list of accepted or well-known Web
     servers or URLs.
    </para>
   </listitem>
   <listitem>
    <para>
     Block access to some listed or blacklisted Web servers or URLs for some
     users.
    </para>
   </listitem>
   <listitem>
    <para>
     Block access to URLs matching a list of regular expressions or words for
     some users.
    </para>
   </listitem>
   <listitem>
    <para>
     Redirect blocked URLs to an <quote>intelligent</quote> CGI-based
     information page.
    </para>
   </listitem>
   <listitem>
    <para>
     Redirect unregistered users to a registration form.
    </para>
   </listitem>
   <listitem>
    <para>
     Redirect banners to an empty GIF.
    </para>
   </listitem>
   <listitem>
    <para>
     Use different access rules based on time of day, day of the week, date,
     etc.
    </para>
   </listitem>
   <listitem>
    <para>
     Use different rules for different user groups.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   squidGuard and Squid cannot be used to:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Edit, filter, or censor text inside documents.
    </para>
   </listitem>
   <listitem>
    <para>
     Edit, filter, or censor HTML-embedded script languages, such as JavaScript
     or VBscript.
    </para>
   </listitem>
  </itemizedlist><indexterm>
  <primary>configuration files</primary>
  <secondary>squidguard.conf</secondary></indexterm><indexterm>
  <primary>configuration files</primary>
  <secondary>squid.conf</secondary></indexterm>
  <para>
   Before it can be used, install
   <systemitem class="resource">squidGuard</systemitem>. Provide a minimal
   configuration file as <filename>/etc/squidguard.conf</filename>. Find
   configuration examples in
   <link xlink:href="http://www.squidguard.org/Doc/examples.html"/>. Experiment
   later with more complicated configuration settings.
  </para>
  <para>
   Next, create a dummy <quote>access denied</quote> page or a more or less
   complex CGI page to redirect Squid if the client requests a blacklisted Web
   site. Using Apache is strongly recommended.
  </para>
  <para>
   Now, configure Squid to use squidGuard. Use the following entry in the
   <filename>/etc/squid/squid.conf</filename> file:
  </para>
<screen>
redirect_program /usr/bin/squidGuard
</screen>
  <para>
   Another option called <systemitem>redirect_children</systemitem> configures
   the number of <quote>redirect</quote> (in this case squidGuard) processes
   running on the machine. The more processes you set, the more RAM is
   required. Try low numbers (e.g. 4) first.
  </para>
<screen>
redirect_children 4
</screen>
  <para>
   Last, have Squid load the new configuration by running
   <command>rcsquid</command>&nbsp;<option>reload</option>. Now, test your
   settings with a browser.
  </para>
 </section>
 <section xml:id="sec-squid-calamaris">
  <title>Cache Report Generation with Calamaris</title><indexterm>
  <primary>Squid</primary>
  <secondary>Calamaris</secondary></indexterm><indexterm>
  <primary>Squid</primary>
  <secondary>reports</secondary></indexterm>
  <para>
   Calamaris is a Perl script used to generate reports of cache activity in
   ASCII or HTML format. It works with native Squid access log files. The
   Calamaris home page is located at
   <link xlink:href="http://Calamaris.Cord.de/"/>. This tool does not belong to
   the &sls; default installation scope&mdash;to use it, install the
   <systemitem>calamaris</systemitem> package.
  </para>
  <para>
   Log in as <systemitem class="username">root</systemitem> then enter
   <command>cat access.log | calamaris</command>
   <replaceable>options</replaceable> &gt; reportfile. It is important when
   piping more than one log file that the log files are chronologically ordered
   with older files first. These are some options of the program:
  </para>
  <tip>
   <title>Shell and File Sequences</title>
   <para>
    If you have multiple similar files like <filename>access.log.1</filename>,
    <filename>access.log.2</filename> and so on, the default shell Bash would
    sort those files not in the number sequence when listing
    <filename>access.log.*</filename>. To solve this issue, you may use the
    syntax <filename>access.log.{1..42}</filename> which generates a list of
    files extended with numbers from 1 to 42.
   </para>
  </tip>
  <variablelist>
   <varlistentry>
    <term>-a</term>
    <listitem>
     <para>
      output all available reports
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-w</term>
    <listitem>
     <para>
      output as HTML report
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-l</term>
    <listitem>
     <para>
      include a message or logo in report header
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   More information about the various options can be found in the program's
   manual page with <command>man</command>&nbsp;<option>calamaris</option>.
  </para>
  <para>
   A typical example is:
  </para>
<screen>
cat access.log.{10..1} access.log | calamaris -a -w \ 
&gt; /usr/local/httpd/htdocs/Squid/squidreport.html
</screen>
  <para>
   This puts the report in the directory of the Web server. Apache is required
   to view the reports.
  </para>
  <para os="osuse">
<!--bg: not available in sles -->
   <indexterm>
   <primary>Squid</primary>
   <secondary>reports</secondary>
   </indexterm> <indexterm>
   <primary>Squid</primary>
   <secondary>Calamaris</secondary>
   </indexterm> Another powerful cache report generator tool is SARG (Squid
   Analysis Report Generator). More information, see
   <link xlink:href="http://sarg.sourceforge.net/"/>.
  </para>
 </section>
 <section xml:id="sec-squid-moreinfo">
  <title>For More Information</title>
  <para>
   Visit the home page of Squid at
   <link xlink:href="http://www.squid-cache.org/"/>. Here, find the
   <quote>Squid User Guide</quote> and a very extensive collection of FAQs on
   Squid.
  </para>
  <para>
   Following the installation, a small HOWTO about transparent proxies is
   available in <systemitem class="resource">howtoenh</systemitem> as
   <filename>/usr/share/doc/howto/en/txt/TransparentProxy.gz</filename>. In
   addition, mailing lists are available for Squid at
   <link xlink:href="http://www.squid-cache.org"/>. The archive for this is
   located at
   <link xlink:href="http://www.squid-cache.org/mail-archive/squid-users/"/>.
  </para>
 </section>
</chapter>
