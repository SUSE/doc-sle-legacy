<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter>
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:base="ha_concepts.xml" xml:id="cha-ha-concepts"><title>製品の概要</title><info><abstract>
  <para>
   <phrase role="productnamereg"><phrase os="sles">SUSE® Linux Enterprise High Availability Extension</phrase></phrase>は、オープンソースクラスタ化技術の統合スイートで、可用性の高い物理Linuxクラスタと仮想Linuxクラスタを実装し、SPOF (シングルポイント障害)をなくします。データ、アプリケーション、サービスなどの重要なネットワークリソースの高度な可用性と管理のしやすさを実現します。その結果、ミッションクリティカルなLinuxワークロードに対してビジネスの継続性維持、データ整合性の保護、予期せぬダウンタイムの削減を行います。
  </para>

  <para>
   基本的な監視、メッセージング、およびクラスタリソース管理の機能を標準装備し、個々の管理対象クラスタリソースのフェールオーバー、フェールバック、およびマイグレーション(負荷分散)をサポートします。 </para>
  

  <para>
   この章では、High Availability Extensionの主な製品機能と利点を紹介します。ここには、いくつかのクラスタ例が記載されており、クラスタを設定するコンポーネントについて学ぶことができます。最後のセクションでは、アーキテクチャの概要を示し、クラスタ内の個々のアーキテクチャ層とプロセスについて説明します。
  </para>

  <para>
   High Availabilityクラスタのコンテキストでよく使用される用語については、<xref linkend="gl-heartb"/>を参照してください。
  </para>
 </abstract></info>
 
 
 
 <section xml:id="sec-ha-availability">
  <title>アドオン/拡張としての可用性</title>
  <para>High Availability Extensionは、SUSE Linux Enterprise Server <phrase role="productnumber"><phrase os="sles">11 SP4</phrase></phrase>に対するアドオンとして入手できます。Geo Clustering for SUSE Linux Enterprise High Availability Extensionという、High Availability Extensionの個別の拡張として、地理的に離れたクラスタ(Geoクラスタ)に対するサポートが提供されています。 </para>
 </section>
 
 <section xml:id="sec-ha-features">
  <title>主な機能</title>

  <para>
   <phrase role="productnamereg"><phrase os="sles">SUSE® Linux Enterprise High Availability Extension</phrase></phrase>では、ネットワークリソースの可用性を確保し、管理することができます。以降のセクションでは、いくつかの主要機能に焦点を合わせて説明します。
  </para>

  <section xml:id="sec-ha-features-scenarios">
   <title>広範なクラスタリングシナリオ</title>
   <para>
    High Availability Extensionは次のシナリオをサポートしています。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      アクティブ/アクティブ設定
     </para>
    </listitem>
    <listitem>
     <para>
      アクティブ/パッシブ設定: N+1、N+M、Nから1、NからM
     </para>
    </listitem>
    <listitem>
     <para>
      ハイブリッド物理仮想クラスタ。仮想サーバを物理サーバとともにクラスタ化できます。これによって、サービスの可用性とリソースの使用状況が向上します。
     </para>
    </listitem>
    <listitem>
     <para>
      ローカルクラスタ
     </para>
    </listitem>
    <listitem>
     <para>
      メトロクラスタ(<quote>ストレッチされた</quote>ローカルクラスタ)
     </para>
    </listitem>
    <listitem>
     <para>
      Geoクラスタ(地理的に離れたクラスタ)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    クラスタには、最大32のLinuxサーバを含めることができます。クラスタ内のどのサーバも、クラスタ内の障害が発生したサーバのリソース(アプリケーション、サービス、IPアドレス、およびファイルシステム)を再起動することができます。
   </para>
  </section>

  <section xml:id="sec-ha-features-flexibility">
   <title>柔軟性</title>
   <para>
    High Availability Extensionには、Corosync/OpenAISメッセージングおよびメンバーシップ層のほか、Pacemakerクラスタリソースマネージャが標準装備されています。Pacemakerの使用によって、管理者は継続的にリソースのヘルスとステータスを監視し、依存関係を管理し、柔軟に設定できるルールとポリシーに基づいてサービスを自動的に開始および停止できます。High Availability Extensionでは、ユーザの組織に適した特定のアプリケーションおよびハードウェアインフラストラクチャに合わせて、クラスタのカスタマイズが可能です。時間依存設定を使用して、サービスを特定の時刻に修復済みのノードに自動的にフェールバック(マイグレート)させることができます。
   </para>
  </section>

  <section xml:id="sec-ha-features-storage">
   <title>ストレージとデータレプリケーション</title>
   <para>
    High Availability Extensionでは必要に応じてサーバストレージを自動的に割り当て、再割り当てすることができます。ファイバチャネルまたはiSCSIストレージエリアネットワーク(SAN)をサポートしています。共有ディスクもサポートされていますが、必要要件ではありません。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>には、クラスタ対応のファイルシステムとボリュームマネージャ(OCFS2)、cLVM (clustered Logical Volume Manager)も含まれています。データのレプリケーションでは、DRBD*を使用して、High Availabilityサービスのデータをクラスタのアクティブノードからスタンバイノードへミラーリングできます。さらに、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>では、Sambaクラスタリング技術であるCTDB (Clustered Trivial Database)もサポートしています。
   </para>
  </section>

  <section xml:id="sec-ha-features-virtualized">
   <title>仮想化環境のサポート</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>は、物理Linuxサーバと仮想Linuxサーバの混合クラスタリングをサポートしています。SUSE Linux Enterprise Server <phrase role="productnumber"><phrase os="sles">11 SP4</phrase></phrase>は、オープンソース仮想化ハイパーバイザであるXenと、ハードウェア仮想化拡張機能に基づく、Linuxの仮想化ソフトウェアであるKVM (Kernel-based Virtual Machine)を標準装備しています。High Availability Extension内のクラスタリソースマネージャは、仮想サーバで実行中のサービスと物理サーバで実行中のサービスを認識、監視、および管理できます。ゲストシステムは、クラスタにサービスとして管理されます。
   </para>
  </section>

  <section xml:id="sec-ha-features-geo">
   <title>ローカル、メトロ、およびGeoクラスタのサポート</title>
   <para> <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>は、様々な地理的なシナリオをサポートするように拡張されています。Geo Clustering for SUSE Linux Enterprise High Availability Extensionという、High Availability Extensionの個別の拡張として、地理的に離れたクラスタ(Geoクラスタ)に対するサポートが提供されています。 </para>
   <variablelist>
    <varlistentry>
     <term>ローカルクラスタ</term>
     <listitem>
      <para>
       1つのロケーション内の単一のクラスタ(たとえば、すべてのノードが1つのデータセンターにある)。クラスタはノード間の通信にマルチキャストまたはユニキャストを使用し、フェールオーバーを内部で管理します。ネットワークの遅延時間は無視できます。ストレージは通常、すべてのノードに同時にアクセスされます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>メトロクラスタ</term>
     <listitem>
      <para>
       すべてのサイトがファイバチャネルで接続された、複数の建物またはデータセンターにわたってストレッチできる単一のクラスタ。クラスタはノード間の通信にマルチキャストまたはユニキャストを使用し、フェールオーバーを内部で管理します。ネットワークの遅延時間は通常は短くなります(約20マイルの距離で&lt;5ms)。 ストレージは頻繁にレプリケートされます(ミラーリングまたは同期レプリケーション)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Geoクラスタ(マルチサイトクラスタ)</term>
     <listitem>
      <para>
       それぞれにローカルクラスタを持つ、複数の地理的に離れたサイト。サイトはIPによって交信します。サイト全体のフェールオーバーはより高いレベルのエンティティによって調整されます。Geoクラスタは限られたネットワーク帯域幅および高レイテンシに対応する必要があります。ストレージは同期的にレプリケートされます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    個々のクラスタノード間の地理的距離が大きいほど、クラスタが提供するサービスの高可用性を妨げる可能性のある要因が多くなります。ネットワークの遅延時間、限られた帯域幅およびストレージへのアクセス が長距離クラスタの課題として残ります。
   </para>
  </section>

  <section xml:id="sec-ha-features-ra">
   <title>リソースエージェント</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>には、Apache、IPv4、IPv6、その他多数のリソースを管理するための膨大な数のリソースエージェントが含まれています。またIBM WebSphere Application Serverなどの一般的なサードパーティアプリケーション用のリソースエージェントも含まれています。ご利用の製品に含まれているOpen Cluster Framework (OCF)リソースエージェントの概要は、<xref linkend="sec-ha-manual-config-ocf"/>で説明される<command>crm ra</command>コマンドを使用してください。
   </para>
  </section>

  <section xml:id="sec-ha-features-tools">
   <title>ユーザフレンドリな管理ツール</title>
   <para>
    High Availability Extensionは、クラスタの基本的なインストールとセットアップのほか、効果的な設定および管理に使用できる強力なツールセットを標準装備しています。
   </para>
   <variablelist>
    <varlistentry>
     <term>YaST </term>
     <listitem>
      <para>
       一般的なシステムインストールおよび管理用グラフィカルユーザインタフェース。<xref linkend="sec-ha-installation-add-on"/>に示されているように、YaSTを使用してHigh Availability ExtensionをSUSE Linux Enterprise Serverの上にインストールします。YaSTでは、クラスタまたは個々のコンポーネントの設定に役立つように、High Availabilityカテゴリ内の次のモジュールも提供しています。
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         クラスタ: 基本的なクラスタセットアップ。詳細については、<xref linkend="sec-ha-installation-setup-manual"/>を参照してください。
        </para>
       </listitem>
       <listitem>
        <para>
         DRBD: Distributed Replicated Block Deviceの設定。
        </para>
       </listitem>
       <listitem>
        <para>
         IP負荷分散: Linux仮想サーバによる負荷分散の設定。詳細については、<xref linkend="cha-ha-lvs"/>を参照してください。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pacemaker GUI</term>
     <listitem>
      <para>
       クラスタの設定と管理を容易にするインストール可能なグラフィカルユーザインタフェース。リソースの作成と設定の手順を順を追って支援し、リソースの起動、中止、移行などの管理作業を容易にします。詳細については、<xref linkend="cha-ha-configuration-gui"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>HA Web Konsole (Hawk)</term>
     <listitem>
      <para>
       Linux以外のマシンから、Linuxクラスタを管理できるWebベースのユーザインタフェース。このインタフェースは、システムにグラフィカルユーザインタフェースがない場合も理想的なソリューションです。リソースの作成と設定の手順を順を追って支援し、リソースの起動、中止、移行などの管理作業を容易にします。詳細については、<xref linkend="cha-ha-config-hawk"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>crm</command>シェル
     </term>
     <listitem>
      <para>
       リソースを設定し、すべての監視または管理作業を実行する、統合されたパワフルなコマンドラインインタフェースです。詳細については、<xref linkend="cha-ha-manual-config"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
 </section>
 <section xml:id="sec-ha-benefits">
  <title>利点</title>

  <para>
   High Availability Extensionでは最大 32台のLinuxサーバを可用性の高いクラスタ(HAクラスタ)に設定し、クラスタ内の任意のサーバにリソースをダイナミックに切り替えたり、移動することができます。サーバ障害発生時のリソースの自動マイグレーションの設定ができます。また、ハードウェアのトラブルシューティングやワークロードのバランスをとるために、リソースを手動で移動することもできます。
  </para>

  <para>
   High Availability Extensionは、コモディティコンポーネントによる高可用性を提供しています。アプリケーションと操作をクラスタに統合することによって、運用コストを削減できます。さらにHigh Availability Extensionでは、クラスタ全体を一元管理し、変化するワークロード要件に応じてリソースを調整することもできます(手動でのクラスタの<quote>負荷分散</quote>)。3ノード以上でクラスタを設定すると、複数のノードが<quote>ホットスペア</quote>を共用できて無駄がありません。
  </para>

  <para>
   その他にも重要な利点として、予測できないサービス停止を削減したり、ソフトウェアおよびハードウェアの保守やアップグレードのための計画的なサービス停止を削減できる点が挙げられます。
  </para>

  <para>
   次に、クラスタによるメリットについて説明します。
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     可用性の向上
    </para>
   </listitem>
   <listitem>
    <para>
     パフォーマンスの改善
    </para>
   </listitem>
   <listitem>
    <para>
     運用コストの低減
    </para>
   </listitem>
   <listitem>
    <para>
     スケーラビリティ
    </para>
   </listitem>
   <listitem>
    <para>
     障害回復
    </para>
   </listitem>
   <listitem>
    <para>
     データの保護
    </para>
   </listitem>
   <listitem>
    <para>
     サーバの集約
    </para>
   </listitem>
   <listitem>
    <para>
     ストレージの集約
    </para>
   </listitem>
  </itemizedlist>

  <para>
   共有ディスクサブシステムにRAID を導入することによって、共有ディスクの耐障害性を強化できます。
  </para>

  <para>
   次のシナリオは、High Availability Extensionの利点を紹介するものです。
  </para>

  <bridgehead>クラスタシナリオ例</bridgehead>

  <para>
   サーバ3台でクラスタが設定され、それぞれのサーバにWebサーバをインストールしたと仮定します。クラスタ内の各サーバが、2つのWebサイトをホストしています。各Webサイトのすべてのデータ、グラフィックス、Webページコンテンツは、クラスタ内の各サーバに接続された、共有ディスクサブシステムに保存されています。次の図は、このクラスタのセットアップを示しています。
  </para>

  <figure>
   <title>3サーバクラスタ</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_cluster_example1.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_cluster_example1.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   通常のクラスタ操作では、クラスタ内の各サーバが他のサーバと常に交信し、すべての登録済みリソースを定期的にポーリングして、障害を検出します。
  </para>

  <para>
   Webサーバ1でハードウェアまたはソフトウェアの障害が発生したため、このサーバを利用してインターネットアクセス、電子メール、および情報収集を行っているユーザの接続が切断されたとします。次の図は、Webサーバ1で障害が発生した場合のリソースの移動を表したものです。
  </para>

  <figure>
   <title>1台のサーバに障害が発生した後の3サーバクラスタ</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_cluster_example2.png" width="100%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_cluster_example2.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   WebサイトAがWebサーバ2に、WebサイトBがWebサーバ3に移動します。IPアドレスと証明書もWebサーバ2とWebサーバ3に移動します。
  </para>

  <para>
   クラスタを設定するときに、それぞれのWebサーバがホストしているWebサイトについて、障害発生時の移動先を指定します。先に説明した例では、WebサイトAの移動先としてWebサーバ2が、WebサイトBの移動先としてWebサーバ3が指定されています。このようにして、Webサーバ1によって処理されていたワークロードが、残りのクラスタメンバーに均等に分散され、可用性を維持できます。
  </para>

  <para>
   Webサーバ1で障害が発生すると、High Availability Extensionソフトウェアは次の処理を実行します。
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     障害を検出し、Webサーバ 1が本当に機能しなくなっていることをSTONITHを使用して検証。STONITHは、<quote>Shoot The Other Node In The Head</quote>(他のノードの頭を撃て)の頭字語であり、誤動作しているノードをダウンさせて、それらがクラスタ内に問題を発生させることを防ぎます。
    </para>
   </listitem>
   <listitem>
    <para>
     Webサーバ1にマウントされていた共有データディレクトリを、Webサーバ2およびWebサーバ3に再マウント。
    </para>
   </listitem>
   <listitem>
    <para>
     Webサーバ1で動作していたアプリケーションを、Webサーバ2およびWebサーバ3で再起動。
    </para>
   </listitem>
   <listitem>
    <para>
     IPアドレスをWebサーバ2およびWebサーバ3に移動。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   この例では、フェールオーバープロセスが迅速に実行され、ユーザはWebサイトの情報へのアクセスを数秒程度で回復できます。通常、再度ログインする必要はありません。
  </para>

  <para>
   ここで、Webサーバ1で発生した問題が解決し、通常に操作できる状態に戻ったと仮定します。WebサイトAおよびWebサイトBは、Webサーバ1に自動的にフェールバック(復帰)することも、そのままの状態を維持することもできます。これは、リソースの設定方法によって決まります。Webサーバ1へのマイグレーションは多少のダウンタイムを伴うため、High Availability Extensionではサービス中断がほとんど、またはまったく発生しないタイミングまでマイグレーションを延期することもできます。いずれの場合でも利点と欠点があります。
  </para>

  <para>
   High Availability Extensionは、リソースマイグレーション機能も提供します。アプリケーション、Webサイトなどをシステム管理の必要性に応じて、クラスタ内の他のサーバに移動することができます。
  </para>

  <para>
   たとえば、WebサイトAまたはWebサイトBをWebサーバ1からクラスタ内の他のサーバに手動で移動することができます。これは、Webサーバ1のアップグレードや定期メンテナンスを実施する場合、また、Webサイトのパフォーマンスやアクセスを向上させる場合に有効な機能です。
  </para>
 </section>
 <section xml:id="sec-ha-clusterconfig">
  <title>クラスタ設定: ストレージ</title>

  <para>
   High Availability Extensionでのクラスタ構成には、共有ディスクサブシステムが含まれる場合と含まれない場合があります。共有ディスクサブシステムの接続には、高速ファイバチャネルカード、ケーブル、およびスイッチを使用でき、また設定にはiSCSIを使用することができます。サーバの障害時には、クラスタ内の別の指定されたサーバが、障害の発生したサーバにマウントされていた共有ディスクディレクトリを自動的にマウントします。この機能によって、ネットワークユーザは、共有ディスクサブシステム上のディレクトリに対するアクセスを中断することなく実行できます。
  </para>

  <important>
   <title>cLVMを伴う共有ディスクサブシステム</title>
   <para>
    共有ディスクサブシステムをcLVMと使用する場合、クラスタ内の、アクセスが必要なすべてのサーバにそのサブシステムを接続する必要があります。
   </para>
  </important>

  <para>
   一般的なリソースの例としては、データ、アプリケーション、およびサービスなどがあります。次の図は、一般的なファイバチャネルクラスタの設定を表したものです。
  </para>

  <figure>
   <title>一般的なファイバチャネルクラスタの設定</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_cluster_example3.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_cluster_example3.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   ファイバチャネルは最も高いパフォーマンスを提供しますが、iSCSIを利用するようにクラスタを設定することもできます。iSCSIは低コストなストレージエリアネットワーク(SAN)を作成するための方法として、ファイバチャネルの代わりに使用できます。次の図は、一般的なiSCSIクラスタの設定を表したものです。
  </para>

  <figure>
   <title>一般的なiSCSIクラスタの設定</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_cluster_example4.png" width="100%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_cluster_example4.png" width="100%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   ほとんどのクラスタには共有ディスクサブシステムが含まれていますが、共有ディスクサブシステムなしのクラスタを作成することもできます。次の図は、共有ディスクサブシステムなしのクラスタを表したものです。
  </para>

  <figure>
   <title>共有ストレージなしの一般的なクラスタ設定</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ha_cluster_example5.png" width="80%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ha_cluster_example5.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </section>
 <section xml:id="sec-ha-architecture">
  <title>アーキテクチャ</title>

  <para>
   このセクションでは、High Availability Extensionアーキテクチャの概要を説明します。アーキテクチャコンポーネントと、その相互運用方法について説明します。
  </para>

  <section xml:id="sec-ha-architecture-layers">
   <title>アーキテクチャ層</title>
   <para>
    High Availability Extensionのアーキテクチャは層化されています。<xref linkend="fig-ha-architecture" xrefstyle="FigureXRef"/>に異なる層と関連するコンポーネントを示します。
   </para>
   <figure xml:id="fig-ha-architecture">
    <title>アーキテクチャ</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="ha_cluster_components_arch.png" width="100%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="ha_cluster_components_arch.png" width="100%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <section xml:id="sec-ha-architecture-layers-messaging">
    <title>メッセージングおよびインフラストラクチャ層</title>
    <para>
     プライマリまたは最初の層は、メッセージングおよびインフラストラクチャの層で、Corosync/OpenAIS層とも呼ばれます。この層には、<quote>I'm alive</quote>信号やその他の情報を含むメッセージを送信するコンポーネントが含まれます。High Availability Extensionのプログラムはメッセージングおよびインフラストラクチャ層に常駐しています。
    </para>
   </section>
   <section xml:id="sec-ha-architecture-layers-allocation">
    <title>リソース割り当て層</title>
    <para>
     次の層はリソース割り当て層です。この層は最も複雑で、次のコンポーネントから設定されていいます。
    </para>
    <variablelist>
     <varlistentry xml:id="vle-crm">
      <term>CRM (クラスターリソースマネージャ)</term>
      <listitem>
       <para>
        リソース割り当て層のすべてのアクションは、クラスターリソースマネージャを通過します。リソース割り当て層の他のコンポーネント(または上位層のコンポーネント)による通信の必要性が発生した場合は、ローカルCRM経由で行います。すべてのノードで、CRMは<xref linkend="vle-cib" xrefstyle="select:nopage"/>を維持しています。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vle-cib">
      <term>CIB (クラスタ情報ベース)</term>
      <listitem>
       <para>
        クラスタ情報ベースは、メモリ内でクラスタ全体の設定や現在のステータスをXML形式で表すものです。すべてのクラスタオプション、ノード、リソース、制約、相互関係の定義が含まれます。CIBはすべてのクラスタノードへの更新の同期化も行います。<xref linkend="vle-dc" xrefstyle="select:nopage"/>が維持するマスタCIBがクラスタ内に1つあります。他のすべてのノードにはCIBのレプリカが含まれます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vle-dc">
      <term>指定コーディネータ(DC)</term>
      <listitem>
       <para>
        クラスタ内のCRMはDCとして選択されます。DCは、ノードのフェンシングやリソースの移動など、クラスタ全体におよぶ変更が必要かどうかを判断できる、クラスタ内で唯一のエンティティです。DCは、CIBのマスターコピーが保持されるノードでもあります。その他すべてのノードは、現在のDCから設定とリソース割り当て情報を取得します。DCは、メンバーシップの変更後、クラスタ内のすべてのノードから選抜されます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vle-pe-and-te">
      <term>PE (ポリシーエンジン)</term>
      <listitem>
       <para>
        指定コーディネータがクラスタ全体におよぶ変更を行う(新しいCIBに対応する)ことが必要になるたびに、ポリシーエンジンは現在の状態と設定に基づき、クラスタの次の状態を計算します。PEは(リソース)アクションのリストと、次のクラスタ状態に移るために必要な依存性を含む遷移グラフも作成します。PEは常にDC上で実行されます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vle-lrm">
      <term>LRM(ローカルリソースマネージャ)</term>
      <listitem>
       <para>
        LRMはCRMに代わってローカルリソースエージェントを呼び出します(<xref linkend="sec-ha-architecture-layers-resources"/>を参照)。そのため、操作の開始、停止、監視を行い、結果をCRMに報告します。LRMはそのローカルノード上のすべてのリソース関連情報の信頼できるソースです。

       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
   <section xml:id="sec-ha-architecture-layers-resources">
    <title>リソース層</title>
    <para>
     最も上位の層はリソース層です。リソース層には1つ以上のリソースエージェント(RA)が含まれます。リソースエージェントは、一定の種類のサービス(リソース)を開始、停止、監視するために作成されたプログラム(通常はシェルスクリプト)です。リソースエージェントの呼び出しはLRMだけが行います。サードパーティはファイルシステム内の定義された場所に独自のエージェントを配置して、自社ソフトウェア用に、すぐに使えるクラスタ統合機能を提供することができます。
    </para>
   </section>
  </section>

  <section xml:id="sec-ha-architecture-processflow">
   <title>プロセスフロー</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise High Availability Extension</phrase></phrase>は、PacemakerをCRMとして使用します。 CRMは各クラスタノード上にインスタンスを持つデーモン(<literal>crmd</literal>)として実装されます。Pacemakerは、マスタとして動作するcrmdインスタンスを１つ選択することにより、クラスタのすべての意思決定を一元化します。選択したcrmdプロセス(またはその下のノード)で障害が発生したら、新しいcrmdプロセスが確立されます。
   </para>
   <para>
    クラスタの設定とクラスタ内のすべてのリソースの現在の状態を反映したCIBが、各ノードに保存されます。CIBのコンテンツはクラスタ全体で自動的に同期化されます。
   </para>
   <para>
    クラスタ内で実行するアクションの多くは、クラスタ全体におよぶ変更を伴います。これらのアクションにはクラスタリソースの追加や削除、リソース制約の変更などがあります。このようなアクションを実行する場合は、クラスタ内でどのような変化が発生するのかを理解することが重要です。
   </para>
   <para>
    たとえば、クラスタIPアドレスリソースを追加するとします。そのためには、コマンドラインツールかWebインタフェースを使用してCIBを変更できます。DC上でアクションを実行する必要はなく、クラスタ内の任意のノードでいずれかのツールを使用すれば、DCに反映されます。そして、DCがすべてのクラスタノードにCIBの変更を複製します。
   </para>
   <para>
    CIBの情報に基づき、PEがクラスタの理想的な状態と実行方法を計算し、指示リストをDCに送ります。DCはメッセージング/インフラストラクチャ層を介してコマンドを送信し、他のノードのcrmdピアがこれらのコマンドを受信します。各crmdはLRM(lrmdとして実装)を使用してリソースを変更します。lrmdはクラスタに対応しておらず、リソースエージェント(スクリプト)と直接通信します。
   </para>
   <para>
    すべてのピアノードは操作結果をDCに返送します。DCが、すべての必要な操作がクラスタ内で成功したことを確認すると、クラスタはアイドル状態に戻り、次のイベントを待機します。予定通り実行されなかった操作があれば、CIBに記録された新しい情報を元に、PEを再度呼び出します。
   </para>
   <para>
    場合によっては、共有データの保護や完全なリソース復旧のためにノードの電源を切らなければならないことがあります。このPacemakerにはフェンシングサブシステムとしてstonithdが内蔵されています。STONITHは<quote>Shoot The Other Node In The Head</quote>(他のノードの即時強制終了)の略語で、通常はリモート電源スイッチを使用して実装されます。Pacemakerでは、STONITHデバイスは、その障害を簡単に監視できるように、リソースとしてモデル化(そしてCIB内で設定)されます。ただし、STONITHトポロジの把握はstonithdが担当し、そのクライアントはノードのフェンシングを要求するだけであり、残りの作業はstonithdが実行します。
   </para>
  </section>
 </section>
</chapter>
