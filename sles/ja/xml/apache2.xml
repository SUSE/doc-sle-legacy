<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:base="apache2.xml" xml:id="cha-apache2"><title>Apache HTTPサーバ</title><info><abstract>
  <para>
   Apache HTTPサーバ(Apache)は、世界で 50%を超える市場シェアを持つ、最も広く利用されていWebサーバです(<link xlink:href="http://www.netcraft.com/"/>の調査)。Apacheは、Apache Software Foundation (<link xlink:href="http://www.apache.org/"/>)により開発され、ほとんどのオペレーティングシステムに対応しています。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase>には、Apache version 2.2が付属しています。この章では、Webサーバのインストール、環境設定、設定方法、SSL、CGI、その他のモジュールの使用方法、およびApacheのトラブルシューティング方法について説明します。
  </para>
 </abstract></info>
 <indexterm class="startofrange" xml:id="idx-apache2"> <primary>Apache</primary> </indexterm>
 
 <section xml:id="sec-apache2-quickstart">
  <title>クイックスタート</title><indexterm> <primary>Apache</primary> <secondary>クイックスタート</secondary> </indexterm>

  <para>
   ここでは、Apacheをすばやく簡単に設定、起動する方法について説明します。Apacheをインストールおよび設定するには、<systemitem class="username">root</systemitem>である必要があります。
  </para>

  <section xml:id="sec-apache-quickstart-requirements">
   <title>要件</title>
   <para>
    Apache Webサーバをセットアップする前に、次の要件が満たされていることを確認してください。
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      マシンのネットワークが適切に設定されているか。この項目の詳細については、<xref linkend="cha-basicnet"/>を参照してください。
     </para>
    </listitem>
    <listitem>
     <para>
      マシンの正確なシステム時間は、タイムサーバとの同期により維持されます。これは、HTTPプロトコルの一部が正確な時間に依存するために必要です。この項目の詳細については、<xref linkend="cha-netz-xntp"/>を参照してください。
     </para>
    </listitem>
    <listitem>
     <para>
      最新のセキュリティアップデートがインストールされています。不明な場合は、YaSTオンラインアップデートを実行します。
     </para>
    </listitem>
    <listitem>
     <para>
      ファイアウォールで、デフォルトのWebサーバポート(<literal>80</literal>)を開きます。ポートを開くには、SuSEFirewall2を設定して外部ゾーンで<guimenu>HTTPサーバ</guimenu>サービスを実行できるようにします。これには、YaSTを使用します。詳細については、<xref linkend="sec-fire-SuSE-yast"/>を参照してください。
     </para>
    </listitem>
   </orderedlist>
  </section>

  <section xml:id="sec-apache2-quickstart-installation">
   <title>インストール</title><indexterm> <primary>Apache</primary> <secondary>インストール</secondary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheは、デフォルトではインストールされません。<quote>そのまますぐに</quote>実行できる標準の事前定義された設定を使用してインストールするには、次の手順を使用します。
   </para>
   <procedure>
    <title>デフォルト設定でApacheをインストールする</title>
    <step>
     <para>
      YaSTを起動して、<menuchoice><guimenu>ソフトウェア</guimenu><guimenu>ソフトウェア管理</guimenu></menuchoice>の順に選択します。
     </para>
    </step>
    <step>
     <para>
      <menuchoice><guimenu>フィルタ</guimenu><guimenu>パターン</guimenu></menuchoice>の順に選択し、<guimenu>サーバ機能</guimenu>から<guimenu>WebおよびLAMPサーバ</guimenu>を選択します。
     </para>
    </step>
    <step>
     <para>
      依存関係のあるパッケージのインストールを確認して、インストールプロセスを完了します。
     </para>
    </step>
   </procedure>
   <para>
    このインストールには、<systemitem>apache2-prefork </systemitem>マルチプロセシングモジュール とPHP5モジュールが含まれています。モジュールの詳細については、<xref linkend="sec-apache2-modules"/>を参照してください。
   </para>
  </section>

  <section xml:id="sect-apache-quickstart-start">
   <title>開始</title>
   <para>
    Apacheは、ブート時に自動的に起動することも、手動で起動することもできます。
   </para>
   <procedure>
    <title>Apacheを自動的に起動する</title>
    <step>
     <para>
      Apacheをランレベル<literal>3</literal>および<literal>5</literal>でブート時に自動的に起動するには、次のコマンドを実行します。
     </para>
<screen>chkconfig -a apache2</screen>
    </step>
    <step>
     <para>
      または、YaSTを起動して<menuchoice><guimenu>システム</guimenu><guimenu>システムサービス(ランレベル)</guimenu></menuchoice>の順に選択します。
     </para>
    </step>
    <step>
     <para>
      サービスの<emphasis>［apache2］</emphasis>および<guimenu>有効</guimenu>を検索します。
     </para>
     <para>
      Webサーバがすぐに起動します。
     </para>
    </step>
    <step>
     <para>
      <guimenu>完了</guimenu>をクリックして、変更を保存します。
     </para>
     <para>
      ブート時にランレベル<literal>3</literal>および<literal>5</literal>で自動的にApatcheを起動するようにシステムが設定されます。
     </para>
    </step>
   </procedure>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>でのランレベルの詳細について、およびYaSTランレベルエディタについての説明は、<xref linkend="sec-boot-runlevel-edit"/>を参照してください。
   </para>
   <para>
    シェルを使用してApacheを手動で起動するには、<command>rcapache2 start</command>を実行します。
   </para>
   <procedure>
    <title>Apacheが実行中かどうかチェックする</title>
    <para>
     Apacheの起動時にエラーメッセージが表示されなければ、通常、このWeb serverが実行されています。これをテストするには:
    </para>
    <step>
     <para>
      ブラウザを起動し、<link xlink:href="http://localhost/"/>を開きます。
     </para>
     <para>
      Apacheが立ち上がって稼動している場合は、<quote>It works!</quote>で始まるテストページが表示されます。
     </para>
    </step>
    <step>
     <para>
      このページが表示されない場合は、<xref linkend="sec-apache2-troubleeshooting"/>を参照してください。
     </para>
    </step>
   </procedure>
   <para>
    Webサーバの起動後は、ドキュメントを追加、必要に応じて設定を調整、およびモジュールをインストールして機能を追加することができます。
   </para>
  </section>
 </section>
 <section xml:id="sec-apache2-configuration">
  <title>Apacheの設定</title><indexterm> <primary>Apache</primary> <secondary>環境設定</secondary> </indexterm>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>には、2つの設定オプションがあります。
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手動で設定を行えば細かい点まで調整できますが、YaSTのGUIほど便利ではありません。
  </para>

  <important>
   <title>設定変更後のApacheのリロードまたは再起動</title>
   <para>
    設定の変更は、ほとんどの場合、Apacheをリロード(または再起動)しないと有効になりません。<command>rcapache2 </command> <option>reload</option>を使用してApacheを手動でリロードするか、<xref linkend="sec-apache2-start-stop"/>に示されている再起動オプションの1つを使用します。
   </para>
   <para>
    YaSTでApatcheを設定する場合、これを自動化するには、<xref linkend="sec-apache2-configuration-yast-server-configuration"/>で説明されているように、<guimenu>HTTPサービス</guimenu>を<guimenu>有効</guimenu>に設定します。
   </para>
  </important>

  <section xml:id="sec-apache2-configuration-manually-configfiles">
   <title>Apache設定ファイル</title><indexterm> <primary>Apache</primary> <secondary>環境設定</secondary> <tertiary>ファイル</tertiary> </indexterm>
   <para>
    このセクションでは、Apache設定ファイルの概要を示します。環境設定にYaSTを使用する場合は、これらのファイルを操作する必要はありません。ただし、後で手動設定に切り替える場合に、この情報が役立つことがあります。
   </para>
   <para>
    Apache設定ファイルは、次の2つの場所にあります。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <section xml:id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename>は、ロードするモジュール、インクルードする付加的な設定ファイル、サーバを起動するときのフラグ、コマンドラインに追加するべきフラグなど、Apacheのいくつかのグローバル設定を制御します。このファイルの各設定オプションについては、詳細なドキュメントが存在するので、ここでは説明しません。一般的な目的のWebサーバの場合には、<filename>/etc/sysconfig/apache2</filename>の内容を設定するだけで十分でしょう。
    </para>
   </section>
   <section xml:id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename>には、Apacheのすべての設定ファイルが含まれます。ここでは、各ファイルの目的について説明します。各ファイルには、複数の設定オプション(<emphasis>ディレクティブ</emphasis>)が含まれています。これらのファイルの各設定オプションについては、詳細なドキュメントがあるので、ここでは説明しません。
    </para>
    <para>
     Apache設定ファイルは、次のように編成されます。
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv 
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>「etc/apache2」内のApache設定ファイル</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        各言語に使用する文字セットを指定します。このファイルは、編集しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        他のモジュールによって追加される設定ファイル。これらの設定ファイルは、必要に応じて仮想ホスト設定に含めることができます。その例として、<filename>vhosts.d/vhost.template</filename>を参照してください。設定ファイルを仮想ホスト設定に含めることにより、仮想ホストごとに別のモジュールセットを指定できます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        すべての仮想ホストに対応するグローバル設定で、それぞれ適切なデフォルト値が指定されています。デフォルト値を変更する代わりに、仮想ホスト設定で上書きします。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheによるエラーの対処方法を定義します。すべての仮想ホストに対してこれらのメッセージをカスタマイズするには、このファイルを編集します。カスタマイズしない場合は、仮想ホスト設定内のこれらのディレクティブを上書きします。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        メインのApacheサーバ設定ファイル。このファイルは変更しません。インクルード文およびグローバル設定が含まれています。ここに記載されている設定ファイルのグローバル設定を上書きします。仮想ホスト設定内のホスト固有の設定(ドキュメントルートなど)を変更します。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheを特定のIPアドレスおよびポートにバインドします。名前ベースの仮想ホスティングもこのファイルで設定します。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        Apacheが自動的に不明なファイルのMIMEタイプを判別できるようにするmime_magicモジュール用のデータ。このファイルは、変更しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        システムで認識されるMIMEタイプ(実際には<filename>/etc/mime.types</filename>へのリンク)。このファイルは、編集しないでください。このリスト以外にMIMEタイプを追加する必要がある場合は、<filename>mod_mime-defaults.conf</filename>に追加します。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        デフォルトでインストールされるモジュール用の設定ファイル。詳細については、<xref linkend="sec-apache2-modules"/>を参照してください。オプションのモジュール用の設定ファイルは、<filename>conf.d</filename>ディレクトリ内にあります。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        各MPMの設定ディレクティブ(<xref linkend="sec-apache2-modules-mpm"/>を参照)、およびApacheのパフォーマンスを制御する一般的な設定オプションが含まれています。このファイルを変更する場合は、Webサーバを適切にテストしてください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> and <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        グローバルSSL設定およびSSL証明書データ。詳細については、<xref linkend="sec-apache2-ssl"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        <filename>/etc/sysconfig/apache2</filename>から自動的に生成される設定ファイル。これらのファイルは、いずれも変更しません。その代わりに、<filename>/etc/sysconfig/apache2</filename>を編集します。このディレクトリに、他の設定ファイルを格納しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheを実行する際に使用するユーザおよびグループIDを指定します。このファイルは、変更しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        仮想ホストの設定はこのファイルにあるはずです。このディレクトリには、SSLの有無に関わらず、仮想ホストのテンプレートファイルが格納されます。このディレクトリ内の <filename>.conf </filename>で終わるファイルは、すべて自動的にApache設定に含まれます。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
  </section>

  <section xml:id="sec-apache2-configuration-manually">
   <title>Apacheを手動で設定する</title><indexterm class="startofrange" xml:id="idx-apache2-configuration-manually"> <primary>Apache</primary> <secondary>環境設定</secondary> <tertiary>手動</tertiary> </indexterm>
   <para>
    Apacheを手動設定するには、<systemitem class="username">root</systemitem>ユーザとしてプレーンテキストの設定ファイルを編集する必要があります。
   </para>
   <section xml:id="sec-apache2-configuration-manually-vhost">
    <title>仮想ホスト設定</title><indexterm> <primary> Apache </primary><secondary>環境設定</secondary><tertiary>仮想ホスト</tertiary></indexterm>
    <para>
     仮想ホスト <emphasis>という用語は、同じ物理マシンから複数のURI (universal resource identifiers)のサービスを行えるApacheの機能を指しています。</emphasis>これは、www.example.comとwww.example.netのような複数のドメインを、1台の物理マシン上の単一のWebサーバで保持できることを意味しています。
    </para>
    <para>
     管理の手間(1つのWebサーバを維持すればよい)とハードウェアの費用(ドメインごとの専用のサーバを必要としない)を省くために仮想ホストを使うことは、よく行われています。仮想ホストは名前ベース、IPベース、またはポートベースのいずれかになります。
    </para>
    <para>
     すべての既存仮想ホストをリストするには、コマンド<command>httpd2</command> <option>-S</option>を使用します。デフォルトサーバおよびすべての仮想ホストが、それらのIPアドレスおよびリスニングポートとともにリストに表示されます。リストには、各仮想ホストの設定ファイル内での位置を示すエントリも含まれています。
    </para>
    <para>
     仮想ホストを設定するには、YaSTを使用するか(<xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>で説明)、または設定ファイルを手動で編集します。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheは、デフォルトでは、<filename>/etc/apache2/vhosts.d/</filename>の仮想ホストごとに1つの設定ファイルを使用するようになっています。このディレクトリ内で、拡張子が<filename>.conf</filename>のファイルは、すべて自動的に設定に含まれます。仮想ホストの基本的なテンプレートはこのディレクトリ内に用意されています(<filename>vhost.template</filename>、またはSSLサポートのある仮想ホストの場合は<filename>vhost-ssl.template</filename>)。
    </para>
    <tip>
     <title>常に仮想ホスト設定を作成する</title>
     <para>
      Webサーバに1つのドメインしか存在しない場合でも、常に仮想ホストの設定ファイルを作成することをお勧めします。そうすることによって、ドメイン固有の設定が1つのファイルにまとまるだけでなく、仮想ホストの設定ファイルを移動、削除、または名前変更することによって使用可能な基本設定に常時フォールバックできます。同じ理由で、仮想ホストごとに個別の設定ファイルも作成します。
     </para>
     <para>
      名前ベースの仮想ホストを使用する際、ドメイン名が仮想ホスト設定と一致しない場合に使用されるデフォルト設定を設定することを推奨します。デフォルト仮想ホストは、その設定が最初にロードされるホストです。設定ファイルの順序は、ファイル名で決定されるので、デフォルト仮想ホスト設定のファイル名は、下線文字(<literal>_</literal>)で始めて (たとえば、<filename>_default_vhost.conf</filename>).、そのファイルが最初にロードされるようにします。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem>ブロックには、特定のドメインに適用される情報を記述します。Apacheは、クライアントから定義済みの仮想ホストへの要求を受け取ると、このセクションに記述されているディレクティブを使用します。仮想ホストでは、ほぼすべてのディレクティブを使用できます。Apacheの設定ディレクティブの詳細については、<link xlink:href="http://httpd.apache.org/docs/2.2/mod/quickreference.html"/>を参照してください。
    </para>
    <section xml:id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>名前ベースの仮想ホスト</title>
     <para>
      名前ベースの仮想ホストでは、1つのIPアドレスで複数のWebサイトを運用することができます。Apacheは、クライアントから送られたHTTPヘッダのホストフィールドを使用して、仮想ホスト宣言の1つの、一致する<systemitem>ServerName</systemitem>エントリに要求を接続します。一致する<systemitem>ServerName</systemitem>が見つからない場合には、指定されている最初の仮想ホストがデフォルトとして用いられます。
     </para>
     <para>
      <systemitem>NameVirtualHost</systemitem>ディレクティブは、HTTPヘッダ内のドメイン名を含むクライアントからの要求に関して、どのIPアドレス(オプションとして、どのポート)をリスンすべきかApatcheに指示しますこのオプションは、<filename>/etc/apache2/listen.conf</filename>設定ファイルで設定されます。
     </para>
     <para>
      最初の引数には完全修飾ドメイン名を指定することができますが、IPアドレスを使用することをお勧めします。2番目の引数はポートで、オプションです。デフォルトでは、ポート<systemitem>80</systemitem>が使用され、 <systemitem>Listen </systemitem>ディレクティブで設定されます。
     </para>
     <para>
      ワイルドカード<literal>*</literal>は、IPアドレスとポート番号の両方で使用することができます。その場合、すべてのインタフェースでの要求を受け取ります。IPv6のアドレスは、角カッコの中に記述する必要があります。
     </para>
     <example xml:id="ex-apache2-virtual-hosts-name-based">
      <title>名前ベースの<systemitem>VirtualHost</systemitem>エントリの応用例</title>
<screen># NameVirtualHost <replaceable>IP-address</replaceable><replaceable>[:Port]</replaceable>
NameVirtualHost 192.168.3.100:80
NameVirtualHost 192.168.3.100
NameVirtualHost *:80
NameVirtualHost *
NameVirtualHost [2002:c0a8:364::]:80</screen>
     </example>
     <para>
      <systemitem>VirtualHost</systemitem>開始タグには、名前ベースの仮想ホスト設定で<systemitem>NameVirtualHost</systemitem>を引数として使用して以前に宣言されたIPアドレス(または完全修飾ドメイン名)が採用されます。<systemitem>NameVirtualHost</systemitem>ディレクティブで以前に宣言されたポート番号はオプションです。
     </para>
     <para>
      ワイルドカード<emphasis>*</emphasis>をIPアドレスの代わりに使うこともできます。この構文は、ワイルドカードを<systemitem>NameVirtualHost *</systemitem>として組み合わせて使用する場合にのみ有効です。IPv6アドレスを使用する場合には、アドレスを角カッコの中に記述することが必要です。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-name-based">
      <title>名前ベースの<systemitem>VirtualHost</systemitem>ディレクティブ</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </section>
    <section xml:id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>IPベースの仮想ホスト</title>
     <para>
      この仮想ホスト設定では、1つのコンピュータに対して複数のIPアドレスを設定する必要があります。Apacheの1つのインスタンスが、複数のドメインにホストとしてサービスを提供し、各ドメインに別のIPアドレスが割り当てられることになります。
     </para>
     <para>
      物理サーバは、IPベースの仮想ホストごとに、1つのIPアドレスを持つ必要があります。マシンに複数のネットワークカードがない場合には、仮想ネットワークインタフェース(IPエイリアス)を使用することもできます。
     </para>
     <para>
      次の例では、IP <systemitem class="ipaddress">192.168.3.100</systemitem>のマシンでApacheが実行されており、付加的なIP <systemitem class="ipaddress">192.168.3.101</systemitem>および<systemitem class="ipaddress">192.168.3.102</systemitem>で2つのドメインをホストしています。すべての仮想サーバについて、<systemitem>VirtualHost</systemitem>ブロックが個別に必要です。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-ip-based">
      <title>IPベースの<systemitem>VirtualHost</systemitem>ディレクティブ</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      ここでは、<systemitem>VirtualHost</systemitem>ディレクティブは、<systemitem>192.168.3.100</systemitem>以外のインタフェースに対してのみ指定されています。<systemitem>Listen</systemitem>ディレクティブが<systemitem>192.168.3.100</systemitem>に対しても設定される場合、このインタフェースへのHTTP要求に応答するために別のIPベースの仮想ホストを作成する必要があります。作成しない場合、デフォルトのサーバ設定(<filename>/etc/apache2/default-server.conf</filename>)内のディレクティブが適用されます。
     </para>
    </section>
    <section xml:id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>基本的な仮想ホスト設定</title>
     <para>
      仮想ホストをセットアップするには、少なくとも次のディレクティブが各仮想ホスト設定に含まれている必要があります。オプションについては、<filename>/etc/apache2/vhosts.d/vhost.template</filename>を参照してください。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         ホストに割り当てられている完全修飾ドメイン名。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         Apacheがこのホストにファイルをサービスする際に使用されるディレクトリパス。セキュリティ上の理由から、ファイルシステム全体へのアクセスはデフォルトで禁じられているため、<systemitem>Directory</systemitem>コンテナ内でこのディレクトリを明示的にロック解除する必要があります。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         サーバ管理者の電子メールアドレス。このアドレスは、Apacheが作成するエラーページなどに表示されます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         この仮想ホストに関するエラーログファイル。仮想ホストごとに個別のエラーログファイルを作成する必要はありませんが、エラーのデバッグが簡単にできるため、作成されるのが一般的です。<filename>/var/log/apache2/</filename>はApacheのログファイルのデフォルトディレクトリです。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         この仮想ホストに関するアクセスログファイル。仮想ホストごとに個別のアクセスログファイルを作成する必要はありませんが、ホストごとのアクセス統計を個別に分析できるため、作成されるのが一般的です。<filename>/var/log/apache2/</filename>はApacheのログファイルのデフォルトディレクトリです。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      セキュリティ上の理由から、ファイルシステム全体へのアクセスはデフォルトで禁じられています。したがって、<systemitem>DocumentRoot</systemitem>など、Apacheによりサービスされるファイルを保管したディレクトリを明示的にロック解除する必要があります。
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Order allow,deny
  Allow from all
&lt;/Directory&gt;</screen>
     <para>
      完全な設定ファイルは次のようになります。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-basic-configuration">
      <title>基本的な<systemitem>仮想ホスト</systemitem>設定</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
    Order allow,deny
    Allow from all
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example><indexterm class="endofrange" startref="idx-apache2-configuration-manually"/>
    </section>
   </section>
  </section>



  <xi:include href="apache2_yast_i.xml" parse="xml"/>


 </section>
 <section xml:id="sec-apache2-start-stop">
  <title>Apacheの起動および停止</title><indexterm> <primary>Apache</primary><secondary>起動</secondary></indexterm><indexterm><primary>Apache</primary><secondary>停止</secondary></indexterm>

  <para>
   Apacheは、<xref linkend="sec-apache2-configuration-yast"/>の説明のようにYaSTで設定されると、ブート時にランレベル3および5で起動され、ランレベル0、1、2、および6で停止されます。YaSTのランレベルエディタまたはコマンドラインツールの<command>chkconfig</command>を使用して、この動作を変更することができます。
  </para>

  <para>
   実行中のシステムでApacheを起動、停止、操作するには、initスクリプト<command>/usr/sbin/rcapache2</command>を使用します。initスクリプトの一般的な情報については、<xref linkend="sec-boot-init-skripte"/>を参照してください。<command>rcapache2</command>コマンドでは、次のパラメータが使用されます。
  </para>

  <variablelist>
   <varlistentry>
    <term><option>status</option>
    </term>
    <listitem>
     <para>
      Apacheが起動したかどうかチェックします。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>start</option>
    </term>
    <listitem>
     <para>
      Apacheが実行中でない場合に起動します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>startssl</option>
    </term>
    <listitem>
     <para>
      SSLサポートのあるApacheが実行中でない場合に起動します。SSLサポートについての詳細は、<xref linkend="sec-apache2-ssl"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop</option>
    </term>
    <listitem>
     <para>
      親プロセスを終了して、Apacheを終了します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart</option>
    </term>
    <listitem>
     <para>
      Apacheをいったん停止し、再起動します。Apacheが実行中でなかった場合は、新規に起動します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>try-restart</option>
    </term>
    <listitem>
     <para>
      停止し、すでに実行している場合のみApacheを再起動します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>reload</option>または<option>graceful</option>
    </term>
    <listitem>
     <para>
      フォークしたすべてのApacheプロセスに、シャットダウンする前に要求を完了させて、それからWebサーバを停止します。1つのプロセスが終了するたびに、新たに開始したプロセスで置き換えられるので、最終的にはApacheの完全な<quote>再起動</quote>になります。
     </para>
     <tip>
      <title>運用環境でApacheを再起動する</title>
      <para>
       接続を中断しないでApacheの変更を有効にするには、<command>rcapache2 </command> <option>reload</option>コマンドを使用します。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart-graceful</option>
    </term>
    <listitem>
     <para>
      すべての着信要求をただちに処理する2つ目のウェブサーバを起動します。ウェブサーバの以前のインスタンスは<systemitem>GracefulShutdownTimeout</systemitem>で設定された一定時間、引き続きすべの既存要求を処理します。
     </para>
     <para>
      <command>rcapache2</command> <option>restart-graceful</option>は、新しいバージョンへのアップグレード時、または再起動が必要な設定オプションの変更時に便利です。このオプションを使用すると、サーバのダウンタイムが最小限になります。
     </para>
     <para>
      <systemitem>GracefulShutdownTimeout</systemitem>の設定が必要です。これを設定しないと、<option>restart-graceful</option>を指定しても、通常の再起動が行われます。ゼロに設定した場合、残っている要求がすべて完全に処理されるまで、サーバが無制限に待機します。
     </para>
     <para>
      最初のApacheインスタンスが必要なリソースをすべてクリアできなかった場合、graceful restartは失敗します。この場合、コマンドの結果はgraceful stopとなります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop-graceful</option>
    </term>
    <listitem>
     <para>
      既存要求をの処理を完了できるように、<systemitem>GracefulShutdownTimeout</systemitem>で設定された一定時間の経過後にウェブサーバを停止します。
     </para>
     <para>
      <systemitem>GracefulShutdownTimeout</systemitem>の設定が必要です。これを設定しないと、<option>stop-graceful</option>を指定しても、通常のstopが実行されます。ゼロに設定した場合、残っている要求がすべて完全に処理されるまで、サーバが無制限に待機します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>configtest</option>または<option>extreme-configtest</option>
    </term>
    <listitem>
     <para>
      実行中のWebサーバに影響することなく、設定ファイルの構文をチェックします。このチェックは、サーバが起動、再ロード、または再起動されるたびに強制されるので、通常は、明示的に実行する必要はありません(ただし、設定エラーが検出されると、ウェブサーバの起動/再ロード/再起動は行われません)。<option>extreme-configtest</option>オプションを指定すると、Webサーバがユーザ<systemitem class="username">nobody</systemitem>として起動し、設定を実際にロードするので、より多くのエラーを検出できます。ただし、設定はロードされますが、<systemitem class="username">nobody</systemitem>ではSSL証明書を読み取れないため、SSLセットアップをテストすることはできません。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>probe</option>
    </term>
    <listitem>
     <para>
      再ロードの必要性を検出し(設定が変更されたかどうかを確認)、<command>rcapache2</command>コマンドに必要な引数を提示します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>server-status and full-server-status</option>
    </term>
    <listitem>
     <para>
      それぞれ、簡単または完全ステータス画面を表示します。lynxまたはw3mのいずれかがインストールされ、モジュール<systemitem>mod_status</systemitem>が有効になっている必要があります。これに加え、<literal>status</literal>を<filename>/etc/sysconfig/apache2</filename>ファイルの<systemitem>APACHE_SERVER_FLAGS</systemitem>に追加する必要があります。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>その他のフラグ</title>
   <para>
    rcapache2<command>にその他のフラグを指定すると、これらのフラグはWebサーバを通過します。</command>
   </para>
  </tip>
 </section>
 <section xml:id="sec-apache2-modules">
  <title>モジュールのインストール、有効化、および設定</title><indexterm class="startofrange" xml:id="idx-apache2-modules"> <primary>Apache</primary> <secondary>モジュール</secondary> </indexterm>

  <para>
   Apacheソフトウェアは、モジュール形式で構築されており、一部の主要タスクを除いてはモジュールごとに処理されます。この方法で、HTTPさえもモジュールによって処理されています(http_core)。
  </para>

  <para>
   Apacheのモジュールは、ビルド時にApacheのバイナリに組み込むことも、実行時に動的にロードすることもできます。動的なモジュールのロード方法の詳細については、<xref linkend="sec-apache2-modules-activating"/>を参照してください。
  </para>

  <para>
   Apacheモジュールは、次の4つのカテゴリに分類されます。
  </para>

  <variablelist>
   <varlistentry>
    <term>基本モジュール</term>
    <listitem>
     <para>
      基本モジュールは、デフォルトでApacheにコンパイルされています。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheでは、<systemitem>mod_so</systemitem> (他のモジュールのロードに必要)および<systemitem>http_core</systemitem>のみがコンパイルされています。他のモジュールは、サーバのバイナリに入れる代わりに、ランタイム時に入れるように共有オブジェクトとして利用できます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>拡張モジュール</term>
    <listitem>
     <para>
      一般に、拡張とされているモジュールは、Apache ソフトウェアパッケージに含まれてはいますが、通常、サーバに静的にはコンパイルされていません。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、これらはApacheにランタイムでロードすることができる共有オブジェクトとして利用可能になっています。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部モジュール</term>
    <listitem>
     <para>
      外部とラベルされているモジュールは、公式のApacheのディストリビューションには含まれていません。ただし、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>はそれらのいくつかを提供しています。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>MPM(マルチプロセシングモジュール)</term>
    <listitem>
     <para>
      MPMは、Webサーバへのリクエストを受け取って処理する役割を果たすもので、Webサーバソフトウェアの中核となっています。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="sec-apache2-modules-installing">
   <title>モジュールのインストール</title><indexterm> <primary>Apache </primary><secondary>モジュール </secondary><tertiary>インストール</tertiary> </indexterm>
   <para>
    <xref linkend="sec-apache2-quickstart-installation"/>で説明されているデフォルトインストールを行った場合は、すべての基本モジュールと拡張モジュール、マルチプロセシングモジュール、プリフォークMPM、および外部モジュールの<systemitem>mod_php5</systemitem>と<systemitem>mod_python</systemitem>がすでにインストールされています。
   </para>
   <para>
    YaSTを起動し、<menuchoice><guimenu>ソフトウェア</guimenu><guimenu>ソフトウェア管理</guimenu></menuchoice>の順に選択して、その他の外部モジュールをインストールできます。<menuchoice><guimenu>フィルタ</guimenu><guimenu>検索</guimenu></menuchoice>の順に選択し、<emphasis>［apache］</emphasis>を検索します。他のパッケージの中で、使用可能な外部Apacheモジュールがすべて検索結果のリストに表示されます。
   </para>
  </section>

  <section xml:id="sec-apache2-modules-activating">
   <title>有効化と無効化</title>
   <para>
    特定モジュールの有効化/無効化は、手動で行うか、YaSTを使用します。YaSTでは、<xref linkend="sec-apache2-configuration-yast-wizard"/>で説明されているモジュール設定を使用して、スクリプト言語モジュール(PHP5、Perl、およびPython)を有効または無効にする必要があります。その他のすべてのモジュールは、<xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/>で説明しているように有効化または無効化できます。
   </para>
   <para>
    手動でモジュールを有効化または無効化する場合は、<command>a2enmod</command> <replaceable>mod_foo</replaceable>または<command>a2dismod</command><replaceable>mod_foo</replaceable>コマンドをそれぞれ使用します。<command>a2enmod -l</command>は、すべての現在アクティブなモジュールのリストを出力します。
   </para>
   <important>
    <title>外部モジュール用の設定ファイルを含める</title>
    <para>
     手動で外部モジュールを有効化した場合は、各設定ファイルがすべての仮想ホスト設定にロードされていることを確認します。外部モジュール用の設定ファイルは、<filename>/etc/apache2/conf.d/</filename>内に位置し、デフォルトではロードされません。各仮想ホスト上に同じモジュールが必要な場合は、このディレクトリ内の<filename>*.conf</filename>を含めることができます。必要でない場合は、個々のファイルを含めます。その例として、「<filename>/etc/apache2/vhost.d/vhost.template</filename>」を参照してください。
    </para>
   </important>
  </section>

  <section xml:id="sec-apache2-modules-base-extension">
   <title>基本および拡張モジュール</title><indexterm> <primary>Apache </primary><secondary>モジュール </secondary><tertiary>使用可能</tertiary> </indexterm>
   <para>
    すべての基本および拡張モジュールは、Apacheのマニュアルに詳しく説明されています。ここでは、主要なモジュールについて簡単に説明します。各モジュールの詳細については、<link xlink:href="http://httpd.apache.org/docs/2.2/mod/">http://httpd.apache.org/docs/2.2/mod/</link>を参照してください。
   </para>
   
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       特定のMIMEタイプ(<systemitem>application/pdf</systemitem>など)、特定の拡張子を持つファイル(<filename>.rpm</filename>など)、または特定の要求方法(<systemitem>GET</systemitem>など)が要求された場合に、常にスクリプトを実行する方法を提供します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>Alias</systemitem>および<systemitem>Redirect</systemitem>ディレクティブを提供します。これにより、特定のディレクトリにURIをマップ(<systemitem>Alias</systemitem>)、または要求されたURLを別の場所にリダイレクトできます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       認証モジュールは、<systemitem>mod_auth_basic</systemitem>を使用する基本認証や<systemitem>mod_auth_digest</systemitem>を使用するダイジェスト認証などさまざまな認証方法を提供します。Apache 2.2のダイジェスト認証は実験的なものであると考えなくてはなりません。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem>および<systemitem>mod_auth_digest</systemitem>は、認証プロバイダモジュールの<systemitem>mod_authn_*</systemitem> (たとえば、テキストファイルベースの認証用の<systemitem>mod_authn_file</systemitem>)および認証モジュールの<systemitem>mod_authz_*</systemitem> (たとえば、ユーザ認証用の<systemitem>mod_authz_user</systemitem>)と組み合わせる必要があります。
      </para>
      <para>
       この項目の詳細は、<link xlink:href="http://httpd.apache.org/docs/2.2/howto/auth.html"/>の「<citetitle>Authentication HOWTO</citetitle>」で説明されています。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       Autoindexは、インデックスファイル(<filename>index.html</filename>など)が存在しない場合にディレクトリリストを生成します。これらのインデックスのルックアンドフィールは設定可能です。このモジュールは、デフォルトで有効です。ただし、ディレクトリリストは、デフォルトで<systemitem>Options</systemitem>ディレクティブを経由して無効化されています。仮想ホスト設定でこの設定を上書きします。このモジュール用のデフォルト設定は、<filename>/etc/apache2/mod_autoindex-defaults.conf</filename>に存在します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_cgi</systemitem>は、CGIスクリプトを実行するのに必要です。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       このモジュールを使用して、配信前にファイルタイプを圧縮するようにApacheを設定できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_dir</systemitem>は、<systemitem>DirectoryIndex</systemitem>ディレクティブを提供します。これを使用して、ディレクトリが要求されたときに(デフォルトでは<filename>index.html</filename>)自動的に配信されるファイルを設定できます。ディレクトリ要求に末尾のスラッシュが含まれていない場合は、正しいURLへの自動リダイレクトも提供します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       CGIスクリプトやSSIページに渡す環境を制御します。環境変数を設定、設定解除したり、httpdプロセスを起動したシェルから渡すことができます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_expires</systemitem>を使用すると、<systemitem>Expires</systemitem>ヘッダの送信によって、プロキシとブラウザのキャッシュがドキュメントを更新する頻度を制御できます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_includeは、動的にHTMLページを生成するための基本機能を提供するSSI (Server-Side Includes)を使用できるようにします。</systemitem>このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       http://localhost/server-info/にサーバ設定の包括的な概要を表示します。セキュリティ上の理由から、このURLへのアクセスは常に制限されます。デフォルトでは、<systemitem class="domainname">localhost</systemitem>にのみ、このURLへのアクセスが許可されます。<systemitem>mod_info</systemitem>は、<filename>/etc/apache2/mod_info.conf</filename>で設定されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       このモジュールを使用して、Apacheログファイルの書式を設定できます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       mimeモジュールは、ファイル名の拡張子(HTMLドキュメント用の<systemitem>text/html</systemitem>など)に基づいた、適切なMIMEヘッダを使用してファイルが配信されるようにします。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       コンテンツネゴシエーションに必要です。詳細については、<link xlink:href="http://httpd.apache.org/docs/2.2/content-negotiation.html">http://httpd.apache.org/docs/2.2/content-negotiation.html</link>を参照してください。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_nss</systemitem>
     </term>
     <listitem>
      <para>
       Webサーバとクライアントの間のTLS 1.1およびTLS 1.2プロトコルを介した暗号化された接続を、Mozilla Network Security Servicesライブラリを使用して有効にします。詳細については、<xref linkend="sec-apache2-nss"/>を参照してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_alias</systemitem>の機能を提供しますが、それ以外の機能と柔軟性も提供します。<systemitem>mod_rewrite</systemitem>を使用すると、複数の規則、要求ヘッダなどに基づいてURLをリダイレクトできます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       クライアントから送信されたブラウザ文字列やIPアドレスなどの、クライアントからのリクエスト詳細に基づいて環境変数を設定します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_speling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_speling</systemitem>は、大文字小文字の違いなど、URLの表記エラーの訂正を自動的に試みます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       Webサーバとクライアント間の暗号化接続を有効化します。詳細については、<xref linkend="sec-apache2-ssl"/>を参照してください。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       サーバの動作およびパフォーマンスに関する情報をhttp://localhost/server-status/に表示します。セキュリティ上の理由から、このURLへのアクセスは常に制限する必要があります。デフォルトでは、<systemitem class="domainname">localhost</systemitem>にのみ、このURLへのアクセスが許可されます。<systemitem>mod_status</systemitem>は、<filename>/etc/apache2/mod_status.conf</filename>で設定されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem>は、CGIスクリプトを別のユーザとグループで実行できるようにします。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       <filename>~<replaceable>user</replaceable>/</filename>の下に、ユーザ固有のディレクトリを用意します。<systemitem>UserDir</systemitem>ディレクティブを設定で指定する必要があります。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="sec-apache2-modules-mpm">
   <title>マルチプロセシングモジュール</title><indexterm> <primary>Apache </primary><secondary>モジュール </secondary><tertiary>マルチプロセシング</tertiary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>には、Apacheで使用するための2つの異なるマルチプロセッシングモジュール(MPM)が用意されています。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker"/>
     </para>
    </listitem>
   </itemizedlist>
   <section xml:id="sec-apache2-modules-mpm-prefork">
    <title>プリフォークMPM</title>
    <para>
     プリフォークMPMは、スレッド対応でない、プリフォークWebサーバを実装します。プリフォークMPMは、各要求を分離し、個々の子プロセスの分岐で処理するApacheバージョン 1.xと同じように、このWebサーバを動作させます。これにより、問題のあるリクエストが他のものに影響することがなくなるので、Webサーバのロックアップを避けられます。
    </para>
    <para>
     プロセスベースのアプローチによって安定性がもたらされますが、プリフォークMPMは、もう一方のワーカーMPMよりも多くのシステムリソースを消費します。プリフォークMPMは、UnixベースのオペレーティングシステムでのデフォルトのMPMとみなされています。
    </para>
    <important>
     <title>このドキュメントでのMPM</title>
     <para>
      このドキュメントでは、ApacheがプリフォークMPMで使用されていることを仮定しています。
     </para>
    </important>
   </section>
   <section xml:id="sec-apache2-modules-mpm-worker">
    <title>ワーカーMPM</title>
    <para>
     ワーカーMPMは、マルチスレッド対応のWebサーバを提供します。スレッドとは、<quote>軽い</quote>形態のプロセスです。プロセスよりもスレッドが優れている点は、リソースの消費が少ないことです。ワーカーMPMは、子プロセスを分岐する代わりに、サーバプロセスでスレッドを使用することによってリクエストを処理します。プリフォークした子プロセスはマルチスレッドになります。このアプローチでは、プリフォークMPMの場合よりもシステムリソースの消費が少なくなるので、Apacheの性能が良くなります。
    </para>
    <para>
     主な欠点としては、ワーカーMPMの安定性の問題が挙げられます。スレッドが壊れた場合、プロセスのすべてのスレッドに影響してしまいます。最悪の場合には、サーバがクラッシュすることがあります。特に、ApacheでCGI (Common Gateway Interface)を使用している場合、負荷が大きくなると、スレッドがシステムリソースと通信できなくなり、内部サーバエラーが生じることがあります。ワーカーMPMを使用すべきでないという意見の別の根拠は、利用できるApacheのモジュールのすべてがスレッドセーフになっているわけではなく、そのためワーカーMPMと組み合わせて使用することはできないという点です。
    </para>
    <warning>
     <title>MPMと組み合わせてPHPモジュールを使用する</title>
     <para>
      利用可能なPHPモジュールのすべてがスレッドセーフになっているわけではありません。ワーカーMPMと<systemitem>mod_php</systemitem>は併用しないでください。
     </para>
    </warning>
   </section>
  </section>

  <section xml:id="sec-apache2-modules-external">
   <title>外部モジュール</title><indexterm><primary>Apache</primary><secondary>モジュール</secondary><tertiary>外部</tertiary></indexterm>
   <para>
    ここでは、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>に付属しているすべての外部モジュールを記載しています。
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       <systemitem>mod_php5</systemitem>や<systemitem>mod_perl</systemitem>などのモジュールが処理する個々のCGIスクリプトに対して、AppArmor制限を提供するために、Apacheにサポートを追加します。
      </para>
      <simplelist>
       <member> パッケージ名:<systemitem>apache2-mod_apparmor</systemitem> </member> <member>詳細: <xref linkend="part-aaa"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_auth_kerb</systemitem>により、Kerberos認証がApache Webサーバに提供されます。
      </para>
      <simplelist>
       <member> パッケージ名:<systemitem>apache2-mod_auth_kerb</systemitem> </member> <member>詳細: <link xlink:href="http://modauthkerb.sourceforge.net/configure.html"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_mono</systemitem>を使用すると、サーバでASP.NETページを実行できます。
      </para>
      <simplelist>
       <member>パッケージ名: <systemitem>apache2-mod_mono</systemitem> </member> <member> 環境設定ファイル: <filename>/etc/apache2/conf.d/mod_mono.conf</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_perlは、埋め込まれているインタプリタでPerlスクリプトを実行できるようにします。</systemitem>サーバに埋め込まれている永続的なインタプリタにより、外部インタプリタの起動のオーバーヘッド、およびPerlの起動時間のペナルティを回避できます。
      </para>
      <simplelist>
       <member>パッケージ名: <systemitem>apache2-mod_perl</systemitem> </member> <member>環境設定ファイル: <filename>/etc/apache2/conf.d/mod_perl.conf</filename> </member> <member>詳細: <filename>/usr/share/doc/packages/apache2-mod_perl</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHPは、サーバ側クロスプラットフォームのHTML埋込みスクリプト言語です。
      </para>
      <simplelist>
       <member>パッケージ名: <systemitem>apache2-mod_php5</systemitem> </member> <member>環境設定ファイル: <filename>/etc/apache2/conf.d/php5.conf</filename> </member> <member>詳細: <filename>/usr/share/doc/packages/apache2-mod_php5</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_pythonは、Apache HTTPサーバへのPythonの埋込みができるようにし、Webベースのアプリケーションの設計で、さらに柔軟性を持たせ、パフォーマンスを向上させます。</systemitem>
      </para>
      <simplelist>
       <member>パッケージ名: <systemitem>apache2-mod_python</systemitem> </member> <member>詳細: <filename>/usr/share/doc/packages/apache2-mod_python</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem>により、さまざまな範囲の攻撃からWebアプリケーションを保護するためのファイアウォールがWebアプリケーションに提供されます。さらに、HTTPトラフィックモニタリングおよびリアルタイム分析も可能です。
      </para>
      <simplelist>
       <member>パッケージ名: <systemitem>apache2-mod_security2</systemitem> </member> <member>環境設定ファイル: <filename>/etc/apache2/conf.d/mod_security2.conf</filename> </member> <member>詳細: <filename>/usr/share/doc/packages/apache2-mod_security2</filename> </member><member>マニュアル: <link xlink:href="http://modsecurity.org/documentation/"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>

  <section xml:id="sec-apache2-modules-building-modules">
   <title>コンパイル</title><indexterm><primary>Apache</primary><secondary>モジュール</secondary><tertiary>作成</tertiary></indexterm>
   <para>
    上級ユーザは、カスタムのモジュールを記述してApacheを拡張することができます。Apache用のモジュールを開発したり、サードパーティのモジュールをコンパイルしたりするには、<systemitem>apache2-devel</systemitem>パッケージ、および対応する開発ツールが必要です。<systemitem>apache2-devel</systemitem>には、Apache用の追加モジュールのコンパイルに必要な<command>apxs2</command>ツールも含まれています。
   </para>
   <para>
    <command>apxs2</command>は、ソースコードからモジュールをコンパイルし、インストールすることを可能にします(設定ファイルへの必要な変更も含みます)。これは、実行時にApacheにロードされる、<emphasis>ダイナミック共有オブジェクト</emphasis> (DSO)を作成します。
   </para>
   <para>
    <command>apxs2</command>バイナリは、<filename>/usr/sbin</filename>の下層にあります
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename>—MPMと共に動作する拡張モジュールを構築するのに適しています。インストール場所は<filename>/usr/lib/apache2</filename>です。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename>—プリフォークMPMモジュールに適しています。インストール場所は<filename>/usr/lib/apache2-prefork</filename>です。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename>—ワーカーMPMモジュールに適しています。インストール場所は<filename>/usr/lib/apache2-worker</filename>です。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    次のコマンドで、ソースコードからモジュールをインストールして、アクティブにします。
   </para>
<screen>cd /path/to/module/source; apxs2 -cia
    <replaceable>mod_foo</replaceable>.c</screen>
   <para>
    ここで、<option>-c</option>はモジュールをコンパイルし、<option>-i</option>はモジュールをインストールし、<option>-a</option>はモジュールをアクティブにします。<command>apxs2</command>のその他のオプションについては、<systemitem>apxs2(1)</systemitem> manページを参照してください。
   </para><indexterm class="endofrange" startref="idx-apache2-modules"/>
  </section>
 </section>
 <section xml:id="sec-apache2-cgi">
  <title>CGIスクリプトの実行</title><indexterm> <primary>Apache</primary> <secondary>CGIスクリプト</secondary> </indexterm>

  <para>
   ApacheのCGI (Common Gateway Interface)により、通常CGIスクリプトとして呼ばれるスクリプトまたはプログラムを含んだ動的コンテンツを作成できます。CGIスクリプトは、どのプログラム言語でも作成できます。通常、PerlまたはPHPなどのスクリプト言語が使用されます。
  </para>

  <para>
   ApacheがCGIスクリプトで作成されたコンテンツを配信できるようにするには、<systemitem>mod_cgi</systemitem>を有効にする必要があります。<systemitem>mod_alias</systemitem>も必要です。デフォルトでは、両モジュールとも有効化されています。モジュールの有効化の詳細については、<xref linkend="sec-apache2-modules-activating"/>を参照してください。
  </para>

  <warning>
   <title>CGIセキュリティ</title>
   <para>
    サーバがCGIスクリプトを実行できるようになると、潜在的なセキュリティホールが発生します。詳細については、<xref linkend="sec-apache2-security"/>を参照してください。
   </para>
  </warning>

  <section xml:id="sec-apache2-cgi-configuration">
   <title>Apacheの設定</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、CGIスクリプトの実行は、<filename>/srv/www/cgi-bin/</filename>ディレクトリ内でのみ許可されています。この場所は、すでにCGIスクリプトを実行するように設定されています。仮想ホスト設定を作成しておらず(<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください)、ホスト固有のディレクトリにスクリプトを配置する場合は、このディレクトリのロックを解除し、設定する必要があります。
   </para>
   <example xml:id="ex-apache2-cgi-configuration">
    <title>VirtualHost CGIの設定</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co xml:id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co xml:id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co xml:id="co-apache2-cgi-handler"/>
 Order allow,deny<co xml:id="co-apache2-cgi-order"/>
 Allow from all
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       このディレクトリ内のすべてのファイルをCGIスクリプトとして処理するようにApacheに指示します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       CGIスクリプトの実行を有効化します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       .plおよび.cgiの拡張子が付いたファイルをCGIスクリプトとして処理するようにサーバに指示します。必要に応じて調整します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       <systemitem>Order</systemitem>ディレクティブと<systemitem>Allow</systemitem>ディレクティブは、デフォルトのアクセス状態と、許可および拒否のディレクティブが評価される順序を制御します。この場合、<quote>deny</quote>文の前に<quote>allow</quote>文が評価され、ユニバーサルアクセスが有効になります。
      </para>
     </callout>
    </calloutlist>
   </example>
  </section>

  <section xml:id="sec-apache2-cgi-example-script">
   <title>テストスクリプトの実行</title>
   <para>
    CGIプログラミングは通常のプログラミングとは異なり、CGIプログラムとスクリプトの前に<literal>Content-type: text/html</literal>などのMIMEタイプヘッダを記述する必要があります。このヘッダはクライアントに送信されるので、クライアントは、受信したコンテンツによってコンテンツの種類を識別します。次に、このスクリプトの出力は、クライアント(通常はWebブラウザ)が認識できる形式(たいていの場合はHTML、プレーンテキスト、画像など)でなければなりません。
   </para>
   <para>
    Apacheパッケージの一部として、<filename>/usr/share/doc/packages/apache2/test-cgi</filename>内に簡単なテストスクリプトが含まれています。このスクリプトは、いくつかの環境変数の内容をプレーンテキストとして出力します。このスクリプトを<filename>/srv/www/cgi-bin/</filename>か、仮想ホストのスクリプトディレクトリ<filename>/srv/www/www.example.com/cgi-bin/</filename>のいずれかにコピーし、「<filename>test.cgi</filename>」という名前を付けます。
   </para>
   <para>
    Webサーバがアクセスできるファイルは、<systemitem class="username">root</systemitem>ユーザが所有している必要があります。詳細については、<xref linkend="sec-apache2-security"/>を参照してください。Webサーバは別のユーザ名で実行しているので、CGIスクリプトはworld-executableおよびworld-readableである必要があります。CGIディレクトリに移動し、<command>chmod 755 test.cgi</command>コマンドを使用して適切なパーミッションを適用します。
   </para>
   <para>
    次に、<literal>http://localhost/cgi-bin/test.cgi</literal>または<literal>http://www.example.com/cgi-bin/test.cgi</literal>を呼び出します。<quote>CGI/1.0 test script report</quote>を参照してください。
   </para>
  </section>

  <section xml:id="sec-apache2-cgi-troubleshooting">
   <title>CGIトラブルシューティング</title>
   <para>
    テストプログラムの出力の代わりにエラーメッセージが表示される場合は、次を確認します。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGIトラブルシューティング</title>
    <listitem>
     <para>
      設定を変更した後、サーバを再ロードしましたか? rcapache2 probe<command>を使用して確認します。</command>
     </para>
    </listitem>
    <listitem>
     <para>
      カスタムCGIディレクトリを設定した場合、適切に設定されていますか?不明な場合は、デフォルトのCGIディレクトリの<filename>/srv/www/cgi-bin/</filename>内にあるスクリプトを実行し、<literal>http://localhost/cgi-bin/test.cgi</literal>を呼び出します。
     </para>
    </listitem>
    <listitem>
     <para>
      ファイルのパーミッションは正しいですか?CGIディレクトリに移動して、<command>ls -l test.cgi</command>を実行します。その出力が次で始まっているかどうかを確認します。
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      そのスクリプトにプログラミングエラーがないかどうか確認します。<filename>test.cgi</filename>を変更しなかった場合は該当しませんが、独自のプログラムを使用する場合は、必ず、プログラミングエラーがないかどうか確認してください。
     </para>
    </listitem>
   </itemizedlist>
  </section>
 </section>
 <section xml:id="sec-apache2-ssl">
  <title>SSLをサポートするセキュアWebサーバのセットアップ</title><indexterm class="startofrange" xml:id="idx-apache2-ssl"> <primary>Apache</primary> <secondary>SSL</secondary> </indexterm>

  <para>
   クレジットカード情報などの機密データをWebサーバやクライアント間で送信する場合は必ず、認証を使用して、安全で、暗号化された接続の確立を推奨します。<systemitem>mod_sslは、クライアントとWebサーバ間のHTTP通信にセキュアソケットレイヤ(SSL)プロトコルとトランスポートレイヤセキュリティ(TLS)プロトコルを使用して、強力な暗号化を行います。</systemitem>SSL/TSLを使用することにより、Webサーバとクライアント間でプライベートな接続が確立されます。データの整合性が保証され、クライアントとサーバ間で相互認証ができるようになります。
  </para>
  
  <para>
   この目的で、サーバは、URLに対するリクエストに応答する前に、サーバの有効な識別情報を含むSSL証明書を送ります。これにより、サーバが唯一の正当な通信相手であることが保証されます。加えて、この証明書は、クライアントとサーバの間の暗号化された通信が、重要な内容がプレーンテキストとして見られる危険なしに、情報を転送できることを保証します。
  </para>

  <para>
   <systemitem>mod_sslは、SSL/TSLプロトコル自体は実装しませんが、ApacheとSSLライブラリ間のインタフェースとして機能します。</systemitem><phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、OpenSSLライブラリが使用されます。OpenSSLは、Apacheとともに自動的にインストールされます。
  </para>
  <note>
   <title>TLS 1.0より後のTLSバージョン</title>
   <para>
    OpenSSLライブラリは、TLS 1.0までのTLSバージョンをサポートしていますが、TLS 1.1や1.2などの新しいバージョンはサポートしていません。<systemitem>apache2-mod_nss</systemitem>パッケージの<systemitem>mod_nss</systemitem>は、Mozilla Network Security Servicesライブラリを使用してTLS 1.1と1.2を提供しています。詳細については、<xref linkend="sec-apache2-nss"/>を参照してください。
   </para>
  </note>
  <para>
   Apacheで<systemitem>mod_ssl</systemitem>を使用した場合の最も明白な効果は、URLのプレフィックスが<literal>http://</literal>ではなく<literal>https://</literal>となることです。
  </para>

  <tip>
   <title>証明書サンプル</title>
   <para>
    パッケージ<systemitem class="resource">apache2-example-certificates</systemitem>をインストールすると、架空会社<quote>Snake Oil</quote>の証明書のサンプルを入手できます。
   </para>
  </tip>

  <section xml:id="sec-apache2-ssl-certificate">
   <title>SSL証明書の作成</title><indexterm> <primary>Apache</primary><secondary>SSL</secondary><tertiary>SSL証明書の作成</tertiary> </indexterm>
   <para>
    SSL/TSLをWebサーバで使用するには、SSL証明書を作成する必要があります。この証明書は、両者が互いに相手を識別できるように、Webサーバとクライアント間の認証に必要です。証明書の整合性を確認するには、すべてのユーザが信用する者によって署名される必要があります。
   </para>
   <para>
    3種類の証明書を作成することができます。テストの目的のみの<quote>ダミー証明書</quote>、あらかじめ定義されている信用する一部のユーザグループ用の自己署名付き証明書、および公的な独立団体のCA (Certificate Authority)によって署名される証明書です。
   </para>
   <para>
    証明書の作成には、基本的に2つのステップで行うことができます。はじめに、CAの秘密鍵が生成され、次に、この鍵を使用してサーバ証明書が署名されます。
   </para>
   <tip>
    <title>詳細情報</title>
    <para>
     SSL/TSLの概念および定義の詳細については、<link xlink:href="http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html</link>を参照してください。
    </para>
   </tip>
   <section xml:id="sec-apache2-ssl-certificate-dummy">
    <title><quote>ダミー</quote>証明書の作成</title>
    <para>
     ダミー証明書の生成は簡単です。<command>/usr/bin/gensslcert</command>スクリプトを呼び出すだけです。次のファイルを作成または上書きします。<command>gensslcert</command>のオプションのスイッチを使用して、証明書を微調整します。詳細は、<command>/usr/bin/gensslcert</command> <option>-h</option>を呼び出してください。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/root/.mkcert.cfg</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     <filename>ca.crt</filename>のコピーは、ダウンロード用に<filename>/srv/www/htdocs/CA.crt</filename>にも配置されます。
    </para>
    <important>
     <title>テスト専用</title>
     <para>
      ダミー証明書は、実働システム上では使用しないでください。テストの目的のみで使用してください。
     </para>
    </important>
   </section>
   <section xml:id="sec-apache2-ssl-certificate-custom">
    <title>自己署名付き証明書の作成</title>
    <para>
     イントラネットまたは定義されている一部のユーザグループ用にセキュアWebサーバをセットアップするとき、独自のCA (Certificate Authority)を通じて証明書に署名するので\'8f\'5c分な場合があります。
    </para>
    <para>
     自己署名付き証明書の作成手順は、対話形式の9つのステップで構成されています。<filename>/usr/share/doc/packages/apache2</filename>ディレクトリに移動し、次のコマンドを実行します。<command>/mkcert.sh make</command> <option>--no-print-directory /usr/bin/openssl /usr/sbin/ custom</option>このディレクトリ以外からこのコマンドを実行しないでください。プログラムは、一連のプロンプトを表示します。この一部には、ユーザ入力が必要なものもあります。
    </para>
    <procedure xml:id="pro-apache2-ssl-certificate-custom">
     <title><command>mkcert.sh</command>を使用した自己署名付き証明書の作成</title>
     <step>
      <para>
       <literal>証明書を使用してシグネチャアルゴリズムを決定します </literal>
      </para>
      <para>
       一部の古いブラウザでDSAを使用すると問題があるため、RSA (デフォルトの<keycap>R</keycap>)を選択します。
      </para>
     </step>
     <step>
      <para>
       <literal>CA用RSA秘密鍵を生成(1024ビット)</literal>
      </para>
      <para>
       操作の必要はありません。
      </para>
     </step>
     <step>
      <para>
       <literal>CAへのX.509証明書署名要求を生成</literal>
      </para>
      <para>
       ここで、CAの識別名を作成します。このとき、国名または組織名など、いくつかの質問に答える必要があります。ここで入力した内容が証明書に含まれるため、有効なデータを入力します。すべての質問に答える必要はありません。該当しない、または空白のままにする場合は、<quote>.</quote>を使用します。一般名は、CA自体の名前です。<replaceable>My company</replaceable> CAなど、意味のある名前を選択します。
      </para>
      <important>
       <title>CAの一般名</title>
       <para>
        CAの一般名はサーバの一般名と異なる名前にする必要があるため、この手順では完全修飾ホスト名は選択しないでください。
       </para>
      </important>
     </step>
     <step>
      <para>
       <literal>CAによる署名用のX.509証明書を生成</literal>
      </para>
      <para>
       証明書バージョン<keycap>3</keycap>を選択します(デフォルト)。
      </para>
     </step>
     <step>
      <para>
       <literal>SERVER用のRSA秘密鍵を生成(1024ビット)</literal>
      </para>
      <para>
       操作の必要はありません。
      </para>
     </step>
     <step>
      <para>
       <literal>SERVERへのX.509証明書署名要求を生成</literal>
      </para>
      <para>
       ここで、サーバの鍵の識別名を作成します。質問は、CAの識別名で答えたものとほぼ同じです。ここで入力するデータがWebサーバに適用されますが、CAのデータと同一である必要はありません(サーバが別の場所に位置する場合など)。
      </para>
      <important>
       <title>一般名の選択</title>
       <para>
        ここで入力する一般名は、セキュアサーバの完全修飾ホスト名(www.example.comなど)である必要があります。完全修飾ホスト名でない場合、Webサーバへのアクセス時、証明書がサーバと一致していないという警告がブラウザに表示されます。
       </para>
      </important>
     </step>
     <step>
      <para>
       <literal>独自のCAによる署名付きX.509証明書を生成</literal>
      </para>
      <para>
       証明書バージョン<keycap>3</keycap>を選択します(デフォルト)。
      </para>
     </step>
     <step>
      <para>
       <literal>セキュリティ用パスフレーズのあるCAのRSA秘密鍵の暗号化</literal>
      </para>
      <para>
       CAの秘密鍵をパスワードで暗号化することをお勧めします。そのため、<keycap>Y</keycap>を選択し、パスワードを入力します。
      </para>
     </step>
     <step>
      <para>
       <literal>セキュリティ用パスフレーズのあるSERVERのRSA秘密鍵の暗号化</literal>
      </para>
      <para>
       秘密鍵をパスワードで暗号化すると、Webサーバを起動するたびにこのパスワードを入力するよう求められます。このため、Webサーバのブートおよび再起動時にサーバを自動的に起動するのが難しくなります。したがって、一般的に、この質問には<keycap>N</keycap>と答えます。パスワードで暗号化しないと鍵は保護されないため、この鍵へのアクセスは許可されたユーザのみに限定する必要があることに注意してください。
      </para>
      <important>
       <title>サーバ鍵の暗号化</title>
       <para>
        サーバ鍵をパスワードで暗号化する場合は、<systemitem>/etc/sysconfig/apache2</systemitem>の<filename>APACHE_TIMEOUT</filename>の値を増やします。値を増やさないと、サーバを起動しようとする試みが停止する前に、パスフレーズを入力するのに十分な時間がなくなります。
       </para>
      </important>
     </step>
    </procedure>
    <para>
     スクリプトの結果ページに、生成された鍵と証明書のリストが表示されます。スクリプトの出力とは異なり、ファイルはローカルディレクトリの<filename>conf</filename>内ではなく、適切な場所である、<filename>/etc/apache2/</filename>内に生成されます。
    </para>
    <para>
     最後のステップとして、Webブラウザ内の認識および信用されたCAのリストに含まれるように、ユーザがアクセスできる場所に<filename>/etc/apache2/ssl.crt/ca.crt</filename>からCA証明書ファイルをコピーします。コピーしない場合、ブラウザは、この証明書が不明な認証局から発行されたものであると見なします。証明書は1年間有効です。
    </para>
    <important>
     <title>自己署名付き証明書</title>
     <para>
      自己署名付き証明書は、CA (Certificate Authority)として認識および信用するユーザによってアクセスされるWebサーバ上でのみ使用します。自己署名付き証明書をパブリックショップなどで使用することはお勧めしません。
     </para>
    </important>
   </section>
   <section xml:id="sec-apache2-ssl-certificate-official">
    <title>公式に署名された証明書の取得</title>
    <para>
     証明書に署名する公式なCA (Certificate Authority)は、多数存在します。証明書は、信用のあるサードパーティによって署名されるため、完全に信用できます。通常、一般に運営されているセキュアWebサーバでは、証明書が公式に署名されます。
    </para>
    <para>
     最も良く知られている公式なCAには、Thawte (<link xlink:href="http://www.thawte.com/"/>)またはVerisign (<link xlink:href="http://www.verisign.com"/>)があります。これらや、その他のCAは、すべてのブラウザにすでにコンパイルされているため、これらのCAによって署名された証明書は、ブラウザによって自動的に許可されます。
    </para>
    <para>
     公式に署名された証明書を要求するとき、CAに証明書を送信しません。代わりに、CSR (Certificate Signing Request)を発行します。CSRを作成するには、<command>/usr/share/ssl/misc/CA.sh -newreq</command>スクリプトを呼び出します。
    </para>
    <para>
     はじめに、スクリプトは、CSRの暗号化に使用されているパスワードを問い合わせてきます。その後、識別名を入力するよう求められます。このとき、国名または組織名など、いくつかの質問に答える必要があります。ここで入力した内容が証明書に含まれ、確認されるため、有効なデータを入力します。すべての質問に答える必要はありません。該当しない、または空白のままにする場合は、<quote>.</quote>を使用します。一般名は、CA自体の名前です。<replaceable>My company</replaceable> CAなど、意味のある名前を選択します。最後に、チャレンジパスワードおよび代替の企業名を入力する必要があります。
    </para>
    <para>
     スクリプトを呼び出したディレクトリでCSRを検索します。ファイルには、<filename>newreq.pem</filename>という名前が付きます。
    </para>
   </section>
  </section>

  <section xml:id="sec-apache2-ssl-configuration">
   <title>SSLサポートのあるApacheの設定</title><indexterm> <primary>Apache</primary><secondary>SSL</secondary><tertiary>SSLサポートのあるApacheの設定</tertiary> </indexterm>
   <para>
    Webサーバ側のSSLとTLS要求用のデフォルトのポートは 443です。ポート 80をリスンする<quote>通常</quote>のApacheと、ポート 443をリスンするSSL/TL対応のApacheとの間に競合は生じません。通常、ポート80とポート443への要求はそれぞれ別の仮想ホストが処理し、別の仮想サーバに送られます。
   </para>
   <important>
    <title>ファイアウォール設定</title>
    <para>
     ポート443でSSL対応のApache用のファイアウォールを開くことを忘れないでください。ファイアウォールは、<xref linkend="sec-fire-SuSE-yast"/>で説明されているように、YaSTを使用して設定できます。
    </para>
   </important>
   <para>
    SSLモジュールはグローバルサーバ設定でデフォルトで有効になっています。ホストで無効にされている場合は、コマンド<command>a2enmod ssl</command>で有効にします。最終的にSSLを有効にするには、サーバをフラグ<quote>SSL</quote>で起動する必要があります。このためには、<command>a2enflag SSL</command>を呼び出します。サーバ証明書をパスワードで暗号化している場合は、<filename>/etc/sysconfig/apache2</filename>で<systemitem>APACHE_TIMEOUT</systemitem>の値を増やし、Apacheの起動時にパスフレーズを入力するのに十分な時間が与えられるようにします。これらの変更を適用するため、サーバを再起動します。再ロードでは不十分です。
   </para>
   <para>
    仮想ホスト設定ディレクトリには、SSL固有ディレクティブが詳細に記述されている<filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>テンプレートが含まれています。一般的な仮想ホスト設定については、<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください。
   </para>
   <para>
    始めるには、テンプレートを<filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename>にコピーして編集します。次のディレクティブの値を調整するだけです。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <section xml:id="sec-apache2-ssl-configuration-name-based">
    <title>名前ベースの仮想ホストとSSL</title>
    <para>
     IPアドレスが1つだけのサーバで、複数のSSL対応の仮想ホストを実行することはできません。名前ベースの仮想ホスティングでは、要求されたサーバ名をApacheが知っている必要があります。SSL接続の問題は、SSL接続が(デフォルトの仮想ホストの使用により)確立された後でのみ、そのような要求の読み込みが可能なことです。その結果、証明書がサーバ名に一致しないという警告メッセージが表示されます。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、SNI (Server Name Indication)と呼ばれるSSLプロトコルの拡張を組み込んでおり、仮想ドメインの名前をSSLネゴシエーションの一部として送信することで、この問題を解決します。これにより、サーバが正しい仮想ドメインに早く<quote>切り替わり</quote>、ブラウザに正しい証明書を提示することが可能になります。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、SNIはデフォルトで有効になっています。名前ベースの仮想ホストをSSLで使用可能にするには、<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>で説明されているようにサーバを設定します (ただし、SSLでは、ポート<literal>80</literal>ではなく、ポート<literal>443</literal>を使用)。
    </para>
    <important>
     <title>SNIブラウザのサポート</title>
     <para>
      SNIは、クライアント側でもサポートされる必要があります。SNIは、ほとんどのブラウザでサポートされていますが、モバイルハードウェアの一部のブラウザやWindows* XP上のInternet ExplorerとSafariにはSNIのサポートがありません。詳細については、<link xlink:href="http://en.wikipedia.org/wiki/Server_Name_Indication"/>を参照してください。
     </para>
     <para>
      ディレクティブ<systemitem>SSLStrictSNIVHostCheck</systemitem>を使用して、SNIに非対応のブラウザを処理する方法を設定しますSNI非対応ブラウザは、サーバ設定で<literal>on</literal>に設定されると、すべての仮想ホストに関して拒否されます。<systemitem>VirtualHost</systemitem>ディレクティブ内で<literal>on</literal>に設定されると、この特定のホストへのアクセスが拒否されます。
     </para>
     <para>
      サーバ設定で<literal>off</literal>に設定されると、サーバはSNIサポートがないかのように動作します。SSL要求は、(ポート443に対して)定義された<emphasis>最初の</emphasis>仮想ホストによって処理されます。
     </para>
    </important><indexterm class="endofrange" startref="idx-apache2-ssl"/>
   </section>
  </section>
 </section>
 <section xml:id="sec-apache2-nss">
  <title>NSSをサポートするセキュアWebサーバのセットアップ</title>
  <indexterm class="startofrange" xml:id="idx-apache2-nss"> <primary>Apache</primary> <secondary>NSS</secondary> </indexterm>
  <para>
   <systemitem>mod_nss</systemitem>モジュールは、トランスポート層セキュリティ(TLS)プロトコルのバージョン1.1と1.2を使用して強化暗号を実現します。これは、Apacheの<systemitem>mod_ssl</systemitem>では提供されていない機能です。
  </para>
  <para>
   <systemitem>apache2</systemitem>パッケージのSSL/TLSサポートは通常、<systemitem>mod_ssl</systemitem>によって提供されます。このapacheモジュールは、OpenSSL暗号化ライブラリを使用してSSL/TLSを提供します。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase>で使用するOpenSSLライブラリバージョンは、TLS 1.0のみをサポートしています。TLS 1.1および1.2をサポートするバージョンは、SLE <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase>に付属するさまざまなパッケージとの互換性がありません。別の方法として、<systemitem>mozilla-nss</systemitem>パッケージが提供するMozilla Network Security Servicesライブラリを利用できます。
  </para>
  <note>
   <title>SSLv2のサポート</title>
   <para>
    SSLv2は、<systemitem>mod_nss</systemitem>ではサポートされていません。SSLv2プロトコルが必要な場合は、<systemitem>mod_ssl</systemitem>を使用する必要があります。
   </para>
  </note>
  <para>
   <systemitem>mod_ssl</systemitem>と<systemitem>mod_nss</systemitem>は、両方とも同時に初期化できますが、プロトコルハンドラ(<systemitem>mod_ssl</systemitem>の<literal>SSLEngine on</literal>、<systemitem>mod_nss</systemitem>の<literal>NSSEngine on</literal>)をグローバルスコープで、または<systemitem>VirtualHost</systemitem>設定のディレクティブブロックのコンテキストで同時に有効にすることはできません。
  </para>
  <para>
   1つの<systemitem>VirtualHost</systemitem>セクションのみで<literal>NSSEngine</literal>ディレクティブが<literal>on</literal>に設定されている場合、Apacheがリスンするポートで、このセクションが他のすべての<systemitem>VirtualHost</systemitem>宣言(コンテキスト内で<literal>SSLEngine</literal>が<literal>on</literal>に設定されているものなど)よりも優先されます。同じIPアドレスとポート上の複数のVirtualHostで、両方のモジュールの操作を同時に実行することはできません。<systemitem>mod_nss</systemitem>と<systemitem>mod_ssl</systemitem>の両方を使用する暗号化された接続のサポートが必要な場合は、複数のIPアドレスの使用と、サーバ暗号化モジュールとIPアドレスとのバインドの設定を検討してください。両方の暗号化モジュールを同時に使用する必要がない場合は、どちらのモジュールを使用するか決定して、もう一方は無効にしておくことをお勧めします。
  </para>
  <para>
   <systemitem>mmod_nss</systemitem>では、データベースフォーマットのサーバ証明書、CA証明書、および秘密鍵が使用されるため、既存のmod_sslベースの証明書を<systemitem>mmod_nss</systemitem>用に変換する必要があります。<systemitem>apache2-mod_nss</systemitem>パッケージには、このタスク用のperlスクリプト<filename>/usr/sbin/mod_nss_migrate.pl</filename>が含まれています。このスクリプトは、新しいデータベースを作成します。
  </para>
  <para>
   NSSデータベースに格納されている証明書をリストするには、次のコマンドを使用します。
  </para>
  <screen>certutil -d /etc/apache2/mod_nss.d -L</screen>
  <para>
   NSSデータベース管理ユーティリティ<command>certutil</command>の詳細については、<command>certutil --help</command>を使用する際に表示される情報を参照してください。
  </para>
  <para>
   <systemitem>mod_nss</systemitem>パッケージに付属するデフォルトの環境設定ファイルは、<filename>/etc/apache2/conf.d/mod_nss.conf</filename>です。詳細については、ファイル内のコメントを参照してください。
  </para>
  <indexterm class="endofrange" startref="idx-apache2-ssl"/>
 </section>
 <section xml:id="sec-apache2-security">
  <title>セキュリティ問題の回避</title><indexterm> <primary>Apache</primary> <secondary>セキュリティ</secondary> </indexterm>
  <para>
   公共のインターネットに公開しているWebサーバについては、管理面での不断の努力が求められます。ソフトウェアと、偶然の設定ミスの両方に関連したセキュリティの問題が発生することは避けられません。それらに対処するためのいくつかのヒントを紹介します。
  </para>

  <section xml:id="sec-apache2-security-up-to-date">
   <title>最新版のソフトウェア</title>
   <para>
    Apacheソフトウェアに脆弱性が見つかると、SUSEからセキュリティ上の勧告が出されます。これには、脆弱性を修正するための指示が含まれているので、可能な限り早期の適用が必要です。SUSEセキュリティ通知は、次の場所から入手できます。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Webページ</title>
      <para>
       <link xlink:href="http://www.novell.com/linux/security/securitysupport.html"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>メーリングリストのアーカイブ</title>
      <para>
       <link xlink:href="http://lists.opensuse.org/opensuse-security-announce/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>RSSフィード</title>
      <para>
       <link xlink:href="http://www.novell.com/linux/security/suse_security.xml"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="sec-apache2-security-permissions">
   <title>DocumentRootの許可</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のデフォルトでは、<systemitem>DocumentRoot</systemitem>ディレクトリの<filename>/srv/www/htdocs</filename>およびCGIディレクトリの<filename>/srv/www/cgi-bin</filename>の所有者はユーザおよびグループの<systemitem>root</systemitem>になっています。これらのパーミッションは変更しないでください。ディレクトリにすべてのユーザが書き込み可能な場合、どのユーザもそれらのディレクトリにファイルを格納できます。その後これらのファイルは、Apacheにより<systemitem>wwwrun</systemitem>のパーミッションで実行されます。その結果、意図しない仕方で、ユーザがファイルシステムのリソースにアクセスできるようになる可能性があります。<filename>/srv/www</filename>のサブディレクトリを使用して仮想ホストの<systemitem>DocumentRoot</systemitem>およびCGIディレクトリを配置し、このユーザおよびグループの<systemitem class="username">root</systemitem>がディレクトリとファイルの所有者であることを確認します。
   </para>
  </section>

  <section xml:id="sec-apache2-security-filesystem">
   <title>ファイルシステムアクセス</title>
   <para>
    デフォルトでは、ファイルシステム全体へのアクセスは、<filename>/etc/apache2/httpd.conf</filename>で定義されています。これらのディレクティブは決して上書きしないでください。ただし、Apacheが読み込む必要のあるすべてのディレクトリに対するアクセスは有効にしてください。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>を参照してください。このためには、パスワードまたはシステム設定ファイルなど重要なファイルは外部から読み取ることができないことを確認します。
   </para>
  </section>

  <section xml:id="sec-apache2-security-cgi">
   <title>CGIスクリプト</title>
   <para>
    Perl、PHP、SSIまたは他のプログラミング言語によるインタラクティブなスクリプトは、事実上、任意のコマンドを実行できるため、一般的なセキュリティの問題が存在します。サーバから実行されるスクリプトは、サーバの管理者が信用するソースからのみインストールされる必要があります。一般的には、ユーザが独自のスクリプトを実行できる環境は適切ではありません。また、すべてのスクリプトに対してセキュリティ監査を行うこともお勧めします。
   </para>
   <para>
    スクリプトの管理をできるだけ簡単にするため、CGIスクリプトの実行をグローバルに許可するのではなく、通常、特定のディレクトリに制限されています。設定には、ディレクティブの<systemitem>ScriptAlias</systemitem>および<systemitem>Option ExecCGI</systemitem>が使用されます。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のデフォルト設定では、任意の場所からのCGIスクリプトの実行は許可されていません。
   </para>
   <para>
    すべてのCGIスクリプトは同一のユーザとして実行するため、異なるスクリプトが互いに競合する可能性があります。suEXECモジュールは、CGIスクリプトを別のユーザとグループで実行できるようにします。
   </para>
  </section>

  <section xml:id="sec-apache2-security-users">
   <title>ユーザディレクトリ</title>
   <para>
    ユーザディレクトリを(<systemitem>mod_userdir</systemitem>または<systemitem>mod_rewrite</systemitem>を使用して)有効化する場合は、 <filename>.htaccess</filename>ファイルを許可しないことをお勧めします。これらのファイルは、ユーザによるセキュリティ設定の上書きを可能にするからです。<systemitem>AllowOverRide</systemitem>ディレクティブを使用して、少なくとも、ユーザの操作を制限する必要があります。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、<filename>.htaccess</filename>ファイルはデフォルトで有効化されていますが、ユーザは<systemitem>mod_userdir</systemitem>を使用するときにいずれの<systemitem>Option</systemitem>ディレクティブも上書きすることは許可されていません(<filename>/etc/apache2/mod_userdir.conf</filename>設定ファイルを参照してください)。
   </para>
  </section>
 </section>
 <section xml:id="sec-apache2-troubleeshooting">
  <title>トラブルシューティング</title><indexterm> <primary>Apache</primary> <secondary>トラブルシューティング</secondary></indexterm>

  <para>
   Apacheが起動しないと、Webページにアクセスすることはできず、ユーザがWebサーバに接続することもできないので、問題の原因を見つけ出すことは重要です。次に、エラーが説明されている場所とチェックすべき重要事項について説明します。
  </para>

  <variablelist>
   <varlistentry>
    <term><command>rcapache2</command>の出力
    </term>
    <listitem>
     <para>
      Webサーバをバイナリの<filename>/usr/sbin/httpd2</filename>で起動/停止する代わりに、<command>rcapache2</command>スクリプトを使用します(<xref linkend="sec-apache2-start-stop"/>参照)。このスクリプトは、エラーを詳細に説明し、設定エラーを修正するコツやヒントも提供します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ログファイルと冗長性レベル</term>
    <listitem>
     <para>
      致命的エラーと致命的でないエラーの両方について、Apacheログファイル(主に、デフォルトで<filename>/var/log/apache2/error_log</filename>にあるエラーログファイル)をチェックしてください。さらに、ログファイルにさらに詳細な情報を記録することが必要な場合には、<systemitem>LogLevel</systemitem>ディレクティブで、記録されるメッセージの詳細を制御することができます。
     </para>
     <tip>
      <title>簡単なテスト</title>
      <para>
       <command>tail -F /var/log/apache2/</command> <replaceable>my_error_log</replaceable>コマンドで、Apacheのログメッセージを確認します。それから、<command>rcapache2 restart</command>を実行します。そして、ブラウザでの接続をもう一度試みて、出力を確認してください。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ファイアウォールとポート</term>
    <listitem>
     <para>
      よくある間違いで、サーバのファイアウォール設定でApache用のポートを開けていないことがあります。YaSTでApacheを設定する場合には、この点を扱うための別のオプションが存在します(<xref linkend="sec-apache2-configuration-yast"/>を参照してください)。Apacheを手動で設定する場合は、YaSTのファイアウォールモジュールを使用してHTTPとHTTPS用のファイアウォールポートを開きます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   このようにしても、エラーを特定できない場合には、<link xlink:href="http://httpd.apache.org/bug_report.html"/>の、オンラインのApacheバグデータベースをチェックしてください。加えて、<link xlink:href="http://httpd.apache.org/userslist.html"/>のメーリングリストで、Apacheのユーザコミュニティに参加することができます。
  </para>
 </section>
 <section xml:id="sec-apache2-more-information">
  <title>詳細情報</title>

  <para>
   apache2-doc<systemitem>パッケージには、ローカルインストールおよび参照用にそれぞれローカライズされている完全なApacheマニュアルが含まれています。</systemitem>これは、デフォルトではインストールされません。このマニュアルを最も素早くインストールするには、<command>zypper in apache2-doc</command>コマンドを使用します。Apacheマニュアルは、インストールされると、<link xlink:href="http://localhost/manual/"/>から表示できるようになります。また、Webの<link xlink:href="http://httpd.apache.org/docs-2.2/"/>からもアクセスできます。SUSE固有の設定に関するヒントについては、<filename>/usr/share/doc/packages/apache2/README.*</filename>ディレクトリを参照してください。
  </para>

  <section xml:id="sec-apache2-more-information-apache22">
   <title>Apache 2.2</title>
   <para>
    Apache 2.2の新機能のリストは、<link xlink:href="http://httpd.apache.org/docs/2.2/new_features_2_2.html"/>を参照してください。バージョン2.0から2.2へのアップグレード情報も<link xlink:href="http://httpd.apache.org/docs-2.2/upgrading.html"/>で参照できます。
   </para>
  </section>

  <section xml:id="sec-apache2-more-information-modules">
   <title>Apacheモジュール</title>
   <para>
    <xref linkend="sec-apache2-modules-external"/>で簡単に説明されている外部Apacheモジュールの詳細は、次の場所で入手できます。
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       <link xlink:href="http://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mod-auth_kerb</term>
     <listitem>
      <para>
       <link xlink:href="http://modauthkerb.sourceforge.net/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.mono-project.com/Mod_mono"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://perl.apache.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>

  <section xml:id="sec-apache2-more-information-cgi">
   <title>開発</title>
   <para>
    Apacheモジュールの開発、またはApache Webサーバプロジェクトへの参加に関する情報については、次を参照してください。
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache開発情報</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache開発者ドキュメント</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/docs/2.2/developer/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PerlおよびCを使用したApacheモジュールの作成 </term>
     <listitem>
      <para>
       <link xlink:href="http://www.modperl.com/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>





  <section xml:id="sec-apache2-more-information-miscellaneous-sources">
   <title>その他の情報源</title>
   <para>
    <phrase os="sles;sled"><phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheに固有な問題が発生した場合は、Technical Information Search (<link xlink:href="http://www.novell.com/support"/>)を参照してください。</phrase>Apacheの沿革は、<link xlink:href="http://httpd.apache.org/ABOUT_APACHE.html"/>で参照できます。このページでは、Apacheというサーバ名の由来についても説明しています。
   </para><indexterm class="endofrange" startref="idx-apache2"/>
  </section>
 </section>
</chapter>
