<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha-libvirt-config">
 <title>Configuring Virtual Machines</title>
 <para></para>
<!-- fs 2010-11-19: TBD
 <sect1 id="sec-kvm-configuring-machine">
  <title>Modifying Existing Virtual Machine Configurations with &vmm;</title>
  <para></para>
 </sect1>
-->
<!--

Transition from fully virtualized to paravirtualized

Disk:
.....
Change:

<disk type='block' device='disk'>
...
<target dev='hda' bus='ide'/>
<address type='drive' controller='0' bus='0' unit='0'/>
...
</disk>

to

<disk type='block' device='disk'>
...
<target dev='vda' bus='virtio'/>
...
</disk>

only for SLES after having installed the drivers! For win, first create a
dummy disk to install the drivers, change config only after the drivers have
been installed, otherwise Windows will not boot!


NIC:
.....
* use VMM !!

- add virtio NIC device
and remove old fully virtualized once the virtio one has successfully been activated

-->
 <abstract>
  <para>
   &vmm;'s <guimenu>Details</guimenu> view offers in-depth information about
   the &vmguest;'s complete configuration and hardware equipment. Using this
   view, you can also change the guest configuration or add and modify
   virtual hardware. To access this view, open the guests console in &vmm;
   and either choose <menuchoice> <guimenu>View</guimenu>
   <guimenu>Details</guimenu></menuchoice> from the menu, or click the
   blue information icon in the toolbar.
  </para>
 </abstract>
 <figure>
  <title><guimenu>Details</guimenu> View of a &vmguest;</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata fileref="libvirt_vmm_details.png" width="75%" format="PNG"/>
   </imageobject>
   <imageobject role="html">
    <imagedata fileref="libvirt_vmm_details.png" width="75%" format="PNG"/>
   </imageobject>
  </mediaobject>
 </figure>

 <sect1 id="sec-libvirt-config-tablet">
  <title>Enabling Seamless and Synchronized Cursor Movement</title>

  <para>
   When you click within a &vmguest;'s console with the mouse, the cursor is
   captured by the console window and cannot be used outside the console
   unless it is explicitly released (by pressing <keycombo>
   <keycap function="alt"/> <keycap function="control"/> </keycombo> ). To
   prevent the console from grabbing the key and to enable seamless cursor
   movement between host and guest instead, add a tablet to the &vmguest;.
  </para>

  <para>
   Adding a tablet has the additional advantage of synchronizing the cursor
   movement between &vmhost; and &vmguest; when using a graphical
   environment on the guest. With no tablet configured on the guest, you
   will often see two cursor symbols with one dragging behind the other.
  </para>

  <procedure>
   <step>
    <para>
     Double-click a &vmguest; entry in the &vmm; to open its console and
     switch to the <guimenu>Details</guimenu> view with <menuchoice>
     <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add Hardware</guimenu> and choose
     <guimenu>Input</guimenu> and then <guimenu>EvTouch USB Graphics
     Tablet</guimenu> in the pop-up window. Proceed with
     <guimenu>Finish</guimenu>.
    </para>
   </step>
   <step>
    <para>
     If you try to add the tablet while the guest is still running, you will
     be asked whether to enable the tablet after the next reboot. Confirm
     with <guimenu>Yes</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Once you (re)start the &vmguest;, the tablet is available in the
     &vmguest;.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec-libvirt-config-cdrom" condition="kvm4x86">
  <title>Adding a CD/DVD-ROM Device with &vmm;</title>

  <para>
   &kvm; supports CD or DVD-ROMs in &vmguest; either by directly accessing a
   physical drive on the &vmhost; or by accessing ISO images. To create an
   ISO image from an existing CD or DVD, use <command>dd</command>:
  </para>

<screen>dd if=/dev/<replaceable>cd_dvd_device</replaceable> of=my_distro.iso bs=2048</screen>

  <para>
   To add a CD/DVD-ROM device to your &vmguest;, proceed as follows:
  </para>

  <procedure>
   <step>
    <para>
     Double-click a &vmguest; entry in the &vmm; to open its console and
     switch to the <guimenu>Details</guimenu> view with <menuchoice>
     <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add Hardware</guimenu> and choose
     <guimenu>Storage</guimenu> in the pop-up window. Proceed with
     <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Change the <guimenu>Device Type</guimenu> to <guimenu>IDE
     CDROM</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Select <guimenu>Select Managed or Other Existing Storage</guimenu>.
    </para>
    <substeps>
     <step>
      <para>
       To assign the device to a physical medium, enter the path to the
       &vmhost;'s CD/DVD-ROM device (for example,
       <filename>/dev/cdrom</filename>) next to the
       <guimenu>Browse</guimenu> button. Alternatively you may use the
       <guimenu>Browse</guimenu> button to open a file browser and then
       click <guimenu>Browse Local</guimenu> to select the device. Assigning
       the device to a physical medium is only possible when the &vmm; was
       started on the &vmhost;.
      </para>
     </step>
     <step>
      <para>
       To assign the device to an existing image, click
       <guimenu>Browse</guimenu> to choose an image from a storage pool. If
       the &vmm; was started on the &vmhost;, you may alternatively choose
       an image from another location on the file system by clicking
       <guimenu>Browse Local</guimenu>. Select an image and close the file
       browser with <guimenu>Choose Volume</guimenu>.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Proceed with <guimenu>Forward</guimenu> to review the settings. Apply
     them with <guimenu>Finish</guimenu>, <guimenu>Yes</guimenu>, and
     <guimenu>Apply</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Reboot the &vmguest; to make the new device
     available.<phrase condition="kvm4x86"> For further information also see
     <xref linkend="sec-libvirt-config-cdrom-media-change"/>.</phrase>
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec-libvirt-config-floppy" condition="kvm4x86">
  <title>Adding a Floppy Device with &vmm;</title>

  <para>
   Currently &kvm; only supports the use of floppy disk images&mdash;using a
   physical floppy drive is not supported. Create a floppy disk image from
   an existing floppy using <command>dd</command>:
  </para>

<screen>dd if=/dev/fd0 of=/var/lib/libvirt/images/floppy.img</screen>

  <para>
   To create an empty floppy disk image use one of the following commands:
  </para>

  <variablelist>
   <varlistentry>
    <term>Raw Image</term>
    <listitem>
<screen>dd if=/dev/zero of=/var/lib/libvirt/images/floppy.img bs=512 count=2880</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>FAT Formatted Image</term>
    <listitem>
<screen>mkfs.msdos -C /var/lib/libvirt/images/floppy.img 1440</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To add a floppy device to your &vmguest; proceed as follows:
  </para>

  <procedure>
   <step>
    <para>
     Double-click a &vmguest; entry in the &vmm; to open its console and
     switch to the <guimenu>Details</guimenu> view with <menuchoice>
     <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add Hardware</guimenu> and choose
     <guimenu>Storage</guimenu> in the pop-up window. Proceed with
     <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Change the <guimenu>Device Type</guimenu> to <guimenu>Floppy
     Disk</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Choose <guimenu>Select Managed or Other Existing Storage</guimenu> and
     click <guimenu>Browse</guimenu> to choose an existing image from a
     storage pool. If &vmm; was started on the &vmhost;, you may
     alternatively choose an image from another location on the file system
     by clicking <guimenu>Browse Local</guimenu>. Select an image and close
     the file browser with <guimenu>Choose Volume</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Proceed with <guimenu>Forward</guimenu> to review the settings. Apply
     them with <guimenu>Finish</guimenu>, <guimenu>Yes</guimenu>, and
     <guimenu>Apply</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Reboot the &vmguest; to make the new device
     available.<phrase condition="kvm4x86"> For further information also see
     <xref linkend="sec-libvirt-config-cdrom-media-change"/>.</phrase>
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec-libvirt-config-cdrom-media-change" condition="kvm4x86">
  <title>Ejecting and Changing Floppy or CD/DVD-ROM Media with &vmm;</title>

  <para>
   Regardless of whether you are using the &vmhost;'s physical CD/DVD-ROM
   device or an ISO/floppy image, before you can change the media or image
   of an existing device in the &vmguest;, you first need to
   <literal>disconnect</literal> the media from the guest.
  </para>

  <procedure>
   <step>
    <para>
     Double-click a &vmguest; entry in the &vmm; to open its console and
     switch to the <guimenu>Details</guimenu> view with <menuchoice>
     <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Choose the Floppy or CD/DVD-ROM device and <quote>eject</quote> the
     media by clicking <guimenu>Disconnect</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To <quote>insert</quote> a new media, click <guimenu>Connect</guimenu>.
    </para>
    <substeps>
     <step>
      <para>
       If using the &vmhost;'s physical CD/DVD-ROM device, first change the
       media in the device (this may require unmounting it on the &vmhost;
       before it can be ejected). Then choose <guimenu>CD-ROM or
       DVD</guimenu> and select the device from the drop-down list.
      </para>
     </step>
     <step>
      <para>
       If using an ISO image, choose <guimenu>ISO image Location</guimenu>
       and select an image by clicking <guimenu>Browse</guimenu>. When
       connecting from a remote host, you may only choose images from
       existing storage pools.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to finish. The new media can now be
     accessed in the &vmguest;.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec-libvirt-config-pci">
  <title>Adding a PCI Device with &vmm;</title>

  <para>
   You can add PCI devices to guests using the graphical
   <command>virt-manager</command> tool. Once the PCI device is assigned to
   one &vmguest;, it cannot be used by another one unless re-assigned. The
   following procedure adds a USB controller to a virtualized guest.
  </para>

  <procedure>
   <step>
    <para>
     Double-click a &vmguest; entry in the &vmm; to open its console and
     switch to the <guimenu>Details</guimenu> view with <menuchoice>
     <guimenu>View</guimenu> <guimenu>Details</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add Hardware</guimenu> and choose the <guimenu>PCI Host
     Device</guimenu> category in the left pane. A list of host PCI devices
     appears in the right part of the window.
    </para>
   </step>
   <step>
    <para>
     From the list of available PCI devices, choose the USB controller to
     assign to the &vmguest;. It may read for example <literal>USB2 Enhanced
     Host Controller</literal>. Confirm with <guimenu>Finish</guimenu>.
     <guimenu>Finish</guimenu>.
    </para>
    <tip>
     <para>
      You cannot assign a PCI device live to a running &vmguest;. If you are
      trying to add a PCI device to a running machine, the &vmm; will ask if
      you want to assign the PCI device after the next &vmguest; shutdown.
      Confirm with <guimenu>Yes</guimenu>, and after you reboot the
      &vmguest;, the device assignment will be finished.
     </para>
    </tip>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec-libvirt-config-pci-virsh">
  <title>Adding a PCI Device with <command>virsh</command></title>

  <para>
   To dedicate and assign a PCI device to &vmguest; with
   <command>virsh</command>, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     Identify the PCI device.
    </para>
    <para>
     Use the <command>virsh nodedev-list</command> or <command>lspci
     -n</command> commands to identify the PCI device designated for
     pass-through to &vmguest;.
    </para>
    <para>
     The following command lists available PCI devices only:
    </para>
<screen>virsh nodedev-list | grep pci</screen>
    <para>
     Note that PCI devices are identified by a string in the following
     format (<literal>8086</literal> is a variable that represents Intel
     architecture, and **** stands for a four-digit hexadecimal code
     specific to each device):
    </para>
<screen>pci_8086_****</screen>
    <para>
     Remember the PCI device number&mdash;you will need it in future steps.
    </para>
   </step>
   <step>
    <para>
     Gather the information about the domain, bus, and function:
    </para>
<screen># virsh nodedev-dumpxml pci_8086_1d26
&lt;device>
  &lt;name>pci_8086_1d26&lt;/name>
  &lt;parent>computer&lt;/parent>
  &lt;driver>
    &lt;name>ehci_hcd&lt;/name>
  &lt;/driver>
  &lt;capability type='pci'>
    &lt;domain>0&lt;/domain>
    &lt;bus>0&lt;/bus>
    &lt;slot>29&lt;/slot>
    &lt;function>0&lt;/function>
    &lt;product id="0x1d26">Patsburg USB2 Enhanced Host Controller #1&lt;/product>
    &lt;vendor id="0x8086">Intel Corporation&lt;/vendor>
    &lt;capability type='virt_functions'>
    &lt;/capability>
  &lt;/capability>
&lt;/device></screen>
   </step>
   <step>
    <para>
     Detach the device from the host system prior to attaching it to
     &vmguest;.
    </para>
<screen># virsh nodedev-detach pci_8086_1d26 
  Device pci_8086_1d26 detached</screen>
   </step>
   <step>
    <para>
     Convert the bus, slot, and function value from decimal to hexadecimal,
     and prepend '0x' to tell the system that the value is hexadecimal. In
     our example, bus = 0, slot = 29, and function = 0. Their hexadecimal
     values are:
    </para>
<screen># printf %x 0
0
# printf %x 29
1d</screen>
    <para>
     Bus and function hexadecimal numbers are '0x00', while slot number is
     '0x1d'.
    </para>
   </step>
   <step>
    <para>
     Run <command>virsh edit</command> on your domain, and add the following
     device entry in the <literal>&lt;devices></literal> section.
    </para>
<screen>&lt;hostdev mode='subsystem' type='pci' managed='no'>
  &lt;source>
    &lt;address domain='0x0000' bus='0x00' slot='0x1d' function='0x00'/>
  &lt;/source>
&lt;/hostdev></screen>
    <tip id="tip-libvirt-config-pci-virsh-managed">
     <title>'managed' vs. 'unmanaged'</title>
     <para>
      <systemitem>libvirt</systemitem> recognizes two modes for handling PCI
      devices: they can be either 'managed' or 'unmanaged'. In the managed
      case, <systemitem>libvirt</systemitem> will handle all the details of
      unbinding the device from the existing driver if needed, resetting the
      device, binding it to <systemitem>pci-stub</systemitem> before
      starting the domain, etc. When the domain is terminated or the device
      is removed from the domain, <systemitem>libvirt</systemitem> will
      unbind from <systemitem>pci-stub</systemitem> and rebind to the
      original driver in the case of a managed device. If the device is
      unmanaged, the user must take care to ensure all of these management
      aspects of the device are done before assigning it to a domain, and
      after the device is no longer used by the domain.
     </para>
     <para>
      In our example, the <literal>managed='no'</literal> option means that
      the device is 'unmanaged', and we need to take care of the related
      driver with the <command>virsh nodedev-detach</command> and
      <command>virsh nodedev-attach</command> commands. To switch the device
      mode to 'managed', replace the snippet with
      <literal>managed='yes'</literal>, and skip the remaining steps (apart
      from starting the guest).
     </para>
    </tip>
   </step>
   <step>
    <para>
     Once the &vmguest; system is ready to use the PCI device, tell the host
     to stop using it. First check what driver the host system is using for
     the PCI device.
    </para>
<screen># readlink /sys/bus/pci/devices/0000\:00\:1d.0/driver
../../../bus/pci/drivers/pci-stub</screen>
   </step>
   <step>
    <para>
     In our case, the <literal>pci-stub</literal> driver is loaded, so you
     can start the virtual machine. It will be able to use the PCI device
     automatically.
    </para>
<screen># virsh start sles11</screen>
    <tip>
     <para>
      When using a multi-function PCI device that does not support FLR
      (function level reset) or PM (power management) reset, you need to
      detach all its functions from the &vmhost;. The device must be reset
      for security reasons, and without FLR or PM reset, you must reset the
      whole device. <systemitem>libvirt</systemitem> will refuse to do this
      if a function of the device is still in use by the &vmhost; or another
      &vmguest;.
     </para>
     <para>
      You can safely detach a device function from the &vmguest; with the
      <command>virsh nodedev-detach</command> command.
     </para>
    </tip>
    <tip>
     <para>
      If your PCI device is not 'managed', and the driver controlling the
      PCI device is not <literal>pci-stub</literal>, you have to detach it
      from the device first:
     </para>
<screen>virsh nodedev-detach pci_8086_1d26</screen>
    </tip>
    <tip>
     <para>
      If you are running SELinux on your host, you need to disable it for
      now with
     </para>
<screen># setsebool -P virt_use_sysfs 1</screen>
     <para>
      and then start the virtual machine.
     </para>
    </tip>
   </step>
  </procedure>
 </sect1>

 <sect1 id="sec-libvirt-config-io">
  <title>Adding SR-IOV Devices</title>
  <para>
   Single Root I/O Virtualization (SR-IOV) capable PCIe devices are able to
   replicate their resources, so they appear to be multiple devices. Each of
   these "pseudo-devices" can be assigned to a &vmguest;.
  </para>
  <para>
   SR-IOV is an industry specification that was created by the Peripheral
   Component Interconnect Special Interest Group (PCI-SIG) consortium. It
   introduces physical functions (PF) and virtual functions (VF). PFs are full
   PCIe functions used to manage and configure the device. PFs also have the
   ability to move data. VFs lack the configuration and management
   part&mdash;they only have the ability to move data and a reduced set of
   configuration functions. Since VFs do not have all PCIe functions, the host
   operating system or the hypervisor must support SR-IOV in order to be able
   to access and initialize VFs.  The theoretical maximum for VFs is 256 per
   device (consequently the maximum for a dual port Ethernet card would be
   512). In practice this maximum is much lower, since each VF consumes
   resources.
  </para>

  <sect2 id="sec-libvirt-config-io-requirements">
   <title>Requirements</title>
   <para>
    The following requirements must be met in order to be able to use SR-IOV:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      An SR-IOV-capable network card (as of &productname; &productnumber;
      only network cards support SR-IOV)
     </para>
    </listitem>
    <listitem>
     <para>
      .n x86_64 host supporting hardware virtualization (AMD-V or Intel VT-x),
      see <xref linkend="sec-kvm-requires-hardware"/> for more information
     </para>
    </listitem>
    <listitem>
     <para>
      a chipset that supports device assignment (AMD-Vi or Intel VT-d)
     </para>
    </listitem>
    <listitem>
     <para>
      libvirt-0.9.10 or better
     </para>
    </listitem>
    <listitem>
     <para>
      SR-IOV drivers must be loaded and configured on the host system
     </para>
    </listitem>
    <listitem>
     <para>
      iommu enabled in the hypervisor (e.g. <literal>intel_iommu=on</literal>
      on the linux commandline of the host)
     </para>
    </listitem>
    <listitem>
     <para>
      a list of the PCI addresses of the VF(s) that will be assigned to
      &vmguest;s
     </para>
    </listitem>
   </itemizedlist>

   <tip>
    <title>Checking if a Device is SR-IOV Capable</title>
    <para>
     The information whether a device is SR-IOV capable can be obtained from
     it's PCI descriptor by running <command>lspci</command>. A device that
     supports SR-IOV reports a capability similar to the following:
    </para>
    <screen>Capabilities: [160 v1] Single Root I/O Virtualization (SR-IOV)</screen>
   </tip>
  </sect2>
  
  <sect2 id="sec-libvirt-config-io-config">
   <title>Load and configure the SR-IOV Host drivers</title>
   <para>
    In order to be able to access and initialize VFs, an SR-IOV capable driver
    has to be loaded on the host system. <!-- See <xref linkend="???"/> for a
    list of supported cards and theit corresponding drivers. --> 
   </para>
   <procedure>
    <step>
     <para>
      Before loading the driver, make sure the card is properly detected by
      running <command>lspci</command>. The following example shows the lspci
      output for the dual port Intel 82576NS network card:
     </para>
     <screen>~ > sudo /sbin/lspci | grep 82576
01:00.0 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
01:00.1 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
04:00.0 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
04:00.1 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)</screen>
     <para>
      In case the card is not detected, it is likely that the hardware
      virtualization support in the BIOS/EFI has not been enabled.
     </para>
    </step>
    <step>
     <para>
      Check whether the SR-IOV driver is already loaded by running
      <command>lsmod</command>. In the following example a check for the igb
      driver (for the Intel 82576NS network card) returns a result. That means
      the driver is already loaded. If the command returns nothing, the driver
      is not loaded.
     </para>
     <screen>~ > sudo /sbin/lsmod | egrep "^igb "
igb                   185649  0</screen>
    </step>
    <step>
     <para>
      Skip this step if the driver is already loaded.
     </para>
     <para>
      If the SR-IOV driver is not yet loaded, the non-SR-IOV driver needs to
      be removed first, before loading the new driver. Use
      <command>rmmod</command> to unload a driver. The following examples
      unload the non-SR-IOV driver for the Intel 82576NS network card:
     </para>
     <screen>sudo /sbin/rmmod igbvf</screen>
     <para>
      Load the SR-IOV driver subsequently using the
      <command>modprobe</command> command:
     </para>
     <screen>sudo /sbin/modprobe igb</screen>
    </step>
    <step>
     <para>
      Configure the driver by adding the number of VFs you would like to make
      available and&mdash;if necessary&mdash; by blacklisting the non-SR-IOV
      driver:
     </para>
     <screen>sudo echo -e "options igb max_vfs=8\nblacklist igbvf" >> /etc/modprobe.d/50-igb/</screen>
     <para>
      Make sure to replace the example values <literal>igb</literal>,
      <literal>igbvf</literal> and <literal>50-igb</literal> by values
      appropriate for your driver.
     </para>
    </step>
    <step>
     <para>
      Now make sure the driver is loaded on boot. Edit
      <filename>/etc/sysconfig/kernel</filename> and add the driver to
      <envar>MODULES_LOADED_ON_BOOT</envar>:
     </para>
     <screen>MODULES_LOADED_ON_BOOT="igb"</screen>
     <para>
      Make sure to replace the example value <literal>igb</literal> by a value
      appropriate for your driver.
     </para>
    </step>
    <step>
     <para>
      Reboot the machine and check if the SR-IOV driver is loaded by
      re-running the lspci command from the first step of this procedure. If
      the SR-IOV driver was loaded successfully you should see additional
      lines for the VFs:
     </para>
     <screen>01:00.0 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
01:00.1 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
01:10.0 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
01:10.1 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
01:10.2 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
[...]
04:00.0 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
04:00.1 Ethernet controller: Intel Corporation 82576NS Gigabit Network Connection (rev 01)
04:10.0 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
04:10.1 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
04:10.2 Ethernet controller: Intel Corporation 82576 Virtual Function (rev 01)
[...]</screen>
    </step>
   </procedure>    
  </sect2>

  <sect2 id="sec-libvirt-config-io-attach">
   <title>Adding a VF network device to an Existing &vmguest;</title>
   <para>
    Once the SR-IOV hardware is properly set up on the &vmhost;, you can add
    VFs to &vmguest;s. In order to do so, you need to collect some data first.
   </para>
   <procedure>
    <para>
     Note: The following procedure is using example data. Make sure to replace
     it by appropriate data from your setup.
    </para>
    <step>
     <para>
      Use the <command>virsh nodedev-list</command> command to get the PCI
      address of the VF you you want to assign and it's corresponding
      PF. Numerical values from the lspci output shown in <xref
      linkend="sec-libvirt-config-io-config"/> (for example
      <literal>01:00.0</literal> or <literal>04:00.1</literal>) are
      transformed by adding the prefix "pci_0000_" and by replacing colons and
      dots with underscores.  So a PCI ID listed as "04:00.0" by lspci is
      listed as "pci_0000_04_00_0" by virsh.  The following example lists the
      PCI IDs for the second port of the Intel 82576NS network card:
     </para>
     <screen>~ > virsh nodedev-list | grep 0000_04_
pci_0000_04_00_0
pci_0000_04_00_1
pci_0000_04_10_0
pci_0000_04_10_1
pci_0000_04_10_2
pci_0000_04_10_3
pci_0000_04_10_4
pci_0000_04_10_5
pci_0000_04_10_6
pci_0000_04_10_7
pci_0000_04_11_0
pci_0000_04_11_1
pci_0000_04_11_2
pci_0000_04_11_3
pci_0000_04_11_4
pci_0000_04_11_5</screen>
     <para>
      The first two entries represent the PFs whereas the other entries
      represent the VFs.
     </para>
    </step>
    <step>
     <para>
      Get more data that will be needed by running the command <command>virsh
      nodedev-dumpxml</command> on the PCI ID of the VF you want to add:
     </para>
<screen>~ > virsh nodedev-dumpxml pci_0000_04_10_0
&lt;device>
  &lt;name>pci_0000_04_10_0&lt;/name>
  &lt;parent>pci_0000_00_02_0&lt;/parent>
  &lt;capability type='pci'>
    &lt;domain>0&lt;/domain>
    &lt;bus>4&lt;/bus>
    &lt;slot>16&lt;/slot>
    &lt;function>0&lt;/function>
    &lt;product id="0x10ca">82576 Virtual Function&lt;/product>
    &lt;vendor id="0x8086">Intel Corporation&lt;/vendor>
    &lt;capability type='phys_function'>
      &lt;address domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    &lt;/capability>
  &lt;/capability>
&lt;/device></screen>
     <para>
      The following data is needed for the next step:
     </para>
     <itemizedlist>
      <listitem>
       <para>
	&lt;domain>0&lt;/domain>
       </para>
      </listitem>
      <listitem>
       <para>
	&lt;bus>4&lt;/bus>
       </para>
      </listitem>
      <listitem>
       <para>
	&lt;slot>16&lt;/slot>
       </para>
      </listitem>
      <listitem>
       <para>
	&lt;function>0&lt;/function>
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Create a temporary XML file (for example
      <filename>/tmp/vf-interface.xml</filename> containing the data
      necessary to add a VF network device to an existing &vmguest;. The
      minimal content of the file needs to look like the following:
     </para>
     <screen>&lt;interface type='hostdev'><co id="sriov-iface"/>
 &lt;source>
  &lt;address type='pci' domain='0' bus='11' slot='16' function='0'2/><co id="sriov-data"/>
 &lt;/source>
&lt;/interface></screen>
     <calloutlist>
      <callout arearefs="sriov-iface">
       <para>
	VFs do not get a fixed MAC address, it changes everytime the host
	reboots.  When adding network devices the <quote>traditional</quote>
	way with &lt;hostdev>, it would require to reconfigure the &vmguest;'s
	network device after each reboot of the host, because of the MAC
	address change.  To avoid this kind of problems, libvirt introduced
	the <quote>interface type='hostdev'</quote> directive, which sets up
	network specific data <emphasis>before</emphasis> assigning the device.
       </para>
      </callout>
      <callout arearefs="sriov-data">
       <para>
	Specify the data you acquired in the previous step here.
       </para>
      </callout>
     </calloutlist>
    </step>
    <step>
     <para>
      In case a device is already attached to the host, it cannot be attached
      to a guest. To make it available for guests, detach it from the host first:
     </para>
     <screen>virsh nodedev-detach pci_0000_04_10_0</screen>
    </step>
    <step>
     <para>
      Last, add the VF interface to an existing &vmguest;:
     </para>
     <screen>virsh attach-device <replaceable>GUEST</replaceable> /tmp/vf-interface.xml --<replaceable>OPTION</replaceable></screen>
     <para>
      <replaceable>GUEST</replaceable> needs to be replace by the domain name,
      id or uuid of the &vmguest; and --<replaceable>OPTION</replaceable> can
      be one of the following:
     </para>
     <variablelist>
      <varlistentry>
       <term><option>--persistent</option></term>
       <listitem>
	<para>
	  This option will always add the device to the domain's persistent
	  XML. In addition, if the domain is running, it will be hotplugged.
	</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>--config</option></term>
       <listitem>
	<para>
	 This option will only affect the persistent XML, even if the domain
	 is running., The device will only show up in the guest on next boot
	</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>--live</option></term>
       <listitem>
	<para>
	 This option will only affect a running domain. If the domain is
	 inactive, the operation will fail.  The device is not persisted in
	 the XML and won't be available in the guest on next boot.
	</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>--current</term>
       <listitem>
	<para>
	 This option affects the current state of the domain. If the domain is
	 inactive, the device is added to the persistent XML and will be
	 available on next boot. If the domain is active, the device is
	 hotplugged but not added to the persistent XML.
	</para>
       </listitem>
      </varlistentry>
     </variablelist>

     <para>
      To detach a VF interface, use the <command>virsh detach-device</command>
      command which also takes the options listed above.
     </para>
    </step>
   </procedure>
  </sect2>
  
  
 </sect1>

 <sect1 id="sec-kvm-managing-clock">
  <title>Clock Settings</title>

  <para>
   Keeping the correct time in a &vmguest; is one of the more difficult
   aspects of virtualization. Keeping the correct time is especially
   important for network applications and is also a prerequisite to do a
   live migration of a &vmguest;.
  </para>

  <tip>
   <title>Time Keeping on the &vmhost;</title>
   <para>
    It is strongly recommended to ensure the &vmhost; keeps the correct time
    as well, for example, by utilizing NTP (see
    <xref linkend="cha-netz-xntp"/> for more information).
   </para>
  </tip>

  <sect2 id="sec-kvm-managing-clock-kvm">
   <title>Using <systemitem>kvm_clock</systemitem></title>
   <para>
    &kvm; provides a paravirtualized clock which is currently supported by
    <phrase os="osuse">&opensuse;,</phrase> &sls; 10 SP3 and newer and
    RedHat Enterprise Linux 5.4 and newer via the
    <systemitem>kvm_clock</systemitem> driver. It is strongly recommended to
    use <systemitem>kvm_clock</systemitem> when available.
   </para>
   <para>
    Use the following command inside a &vmguest; running Linux to check
    whether the driver <systemitem>kvm_clock</systemitem> has been loaded:
   </para>
<screen>~ # dmesg | grep kvm-clock
[    0.000000] kvm-clock: cpu 0, msr 0:7d3a81, boot clock
[    0.000000] kvm-clock: cpu 0, msr 0:1206a81, primary cpu clock
[    0.012000] kvm-clock: cpu 1, msr 0:1306a81, secondary cpu clock
[    0.160082] Switching to clocksource kvm-clock</screen>
   <para>
    To check which clock source is currently used, run the following command
    in the &vmguest;. It should output <literal>kvm-clock</literal>:
   </para>
<screen>cat /sys/devices/system/clocksource/clocksource0/current_clocksource</screen>
   <important>
    <title><literal>kvm-clock</literal> and NTP</title>
    <para>
     When using <literal>kvm-clock</literal>, it is not recommended to use
     NTP in the &vmguest;, as well. Using NTP on the &vmhost;, however, is
     still recommended.
    </para>
   </important>
  </sect2>

  <sect2 id="sec-kvm-managing-clock-other">
   <title>Other Time Keeping Methods</title>
   <para>
    The paravirtualized <literal>kvm-clock</literal> is currently not
    available for &sls; 9 and Windows operating systems. For Windows, use
    the <literal>Windows Time Service Tools</literal> for time
    synchronization (see
    <ulink
     url="http://technet.microsoft.com/en-us/library/cc773263%28WS.10%29.aspx"/>
    for more information).
   </para>
   <para>
    Correct time keeping in &sls; 9 SP4 can be achieved by using special
    boot parameters:
   </para>
   <simplelist>
    <member><emphasis>32-bit Kernel:</emphasis><literal>clock=pmtmr</literal>
    </member>
    <member><emphasis>64-bit Kernel:</emphasis><literal>ignore_lost_ticks</literal>
    </member>
   </simplelist>
  </sect2>
 </sect1>
</chapter>
