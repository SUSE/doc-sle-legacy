<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.kvm.io">
 <title>I/O Virtualization</title>
 <para>
  &vmguest;s not only share CPU and memory resources of the host system, but
  also the I/O subsystem. Because software I/O virtualization techniques
  deliver less performance than bare metal, hardware solutions, that deliver
  almost "native" performance have been developed recently. &productname;
  supports the following I/O virtualization techniques:
 </para>
 <variablelist>
  <varlistentry>
   <term>Full Virtualization</term>
   <listitem>
    <para>
     Fully virtualized drivers emulate widely supported real devices, which
     can be used with an existing driver in the &vmguest;. Since the physical
     device on the &vmhost; may differ from the emulated one, the hypervisor
     needs to process all I/O operations before handing them over to the
     physical device. Therefore all I/O operations need to traverse two
     software layers, a process that not only significantly impacts I/O
     performance, but also consumes CPU time.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Paravirtualization</term>
   <listitem>
    <para>
     Paravirtualization allows a direct communication between the hypervisor
     and the &vmguest;. With less overhead involved, performance is much
     better than with full virtualization. However, paravirtualization
     requires either the guest operating system to be modified to support the
     paravirtualization API or paravirtualized drivers. See <xref
     linkend="sec.kvm.requires.guests.virt_drivers"/> for a list of guest
     operating systems supporting parvirtualization.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Direct Assignment via PCI-Passthrough</term>
   <listitem>
    <para>
     Directly assigning a PCI device to a &vmguest; (PCI passthrough) avoids
     performance issues caused by avoiding any emulation in peformance
     critical paths. With PCI passthough, a &vmguest; can directly access the
     real hardware using a native driver getting almost native
     performance. This method does not allow to share devices&mdash;each
     device can only be assigned to a single &vmguest;. PCI-Passthrough needs
     to be supported by the &vmhost; CPU, chipset and the BIOS/EFI. The
     &vmguest; needs to be equipped with drivers for the device. See <xref
     linkend="sec.libvirt.config.pci"/> or <xref
     linkend="sec.libvirt.config.pci.virsh"/> for setup instructions.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Single Root I/O Virtualization (SR-IOV)</term>
   <listitem>
    <para>
     The latest I/O virtualization technique, SR-IOV combines the benefits of
     the aforementioned techniques&mdash; performance and the ability to share
     a device with several &vmguest;s. SR-IOV requires special I/O devices,
     which are capable of replicating resources, so they appear as multiple
     separate devices. Each such "pseudo" device can be directly used by a
     single guest. However, for network cards for example the number of
     concurrent queues that can be used is reduced, potentially reducing
     performance for the &vmguest; compared to paravirtualized drivers. On the
     &vmhost; SR-IOV must be supported by the I/O device, the CPU and chipset,
     the BIOS/EFI and the hypervisor. <!-- fs 2014-02-21: no list available
     ATM &productname; supports the SRV-IOV capable network cards listed below
     -->. See <xref linkend="sec.libvirt.config.io"/> for setup instructions.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <important>
  <title>I/O Virtualization and Live Migration</title>
  <para>
   Live migration is currently not supported when using devices with PCI
   passthrough or SR-IOV. In case live migration needs to be supported, you
   need to use software virtualization (paravirtualization or full
   Virtualization).
  </para>
 </important>
</chapter>
