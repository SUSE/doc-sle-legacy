<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.tuning.multikernel">
 <title>Installing Multiple Kernel Versions</title>
 <abstract>
  <para>
   &productname; supports the parallel installation of multiple kernel
   versions. When installing a second kernel, a boot entry and an initrd are
   automatically created, so no further manual configuration is needed. When
   rebooting the machine, the newly added kernel is available as an
   additional boot option.
  </para>

  <para>
   Using this functionality, you can safely test kernel updates while being
   able to always fall back to the proven former kernel. To do so, do not
   use the update tools (such as the &yast; Online Update or the updater
   applet), but instead follow the process described in this chapter.
  </para>
 </abstract>
 <warning>
<!-- cannot think of a better heading... -->
  <title>Support Entitlement</title>
  <para>
   Please be aware that you loose your entire support entitlement for the
   machine when installing a self-compiled or a third-party kernel. Only
   kernels shipped with &productname; and kernels delivered via the official
   update channels for &productname; are supported.
  </para>
 </warning>
 <tip>
  <title>Check Your Bootloader Configuration Kernel</title>
  <para>
   It is recommended to check your boot loader config after having installed
   another kernel in order to set the default boot entry of your choice. See
   <xref linkend="sec.boot.yast2.config"/> for more information. To change
   the default append line for new kernel installations, adjust
   <filename>/etc/sysconfig/bootloader</filename> prior to installing a new
   kernel. For more information refer to
   <xref linkend="sec.grub.sysconfig"/>.
  </para>
 </tip>
 <sect1 id="cha.tuning.multikernel.enable">
  <title>Enabling and Configuring Multiversion Support</title>

  <para>
   Installing multiple versions of a software package (multiversion support)
   is not enabled by default. To enable this feature, proceed as follows:
  </para>

  <procedure>
   <step>
    <para>
     Open <filename>/etc/zypp/zypp.conf</filename> with the editor of your
     choice as &rootuser;.
    </para>
   </step>
   <step>
    <para>
     Search for the string <literal>multiversion</literal>. To enable
     multiversion for all kernel packages capable of this feature, uncomment
     the following line
    </para>
    <screen># multiversion = provides:multiversion(kernel)</screen>
   </step>
   <step>
    <para>
     To restrict multiversion support to certain kernel flavors, add the
     package names as a comma-separated list, to the
     <literal>multiversion</literal> option in
     <filename>/etc/zypp/zypp.conf</filename>&mdash;for example
    </para>
    <screen>multiversion = kernel-default,kernel-default-base,kernel-source</screen>
   </step>
   <step>
    <para>
     Save your changes.
    </para>
   </step>
  </procedure>

  <sect2 id="cha.tuning.multikernel.enable.keep">
   <title>Automatically Deleting Unused Kernels</title>
   <para>
    When frequently testing new kernels with multiversion support enabled,
    the boot menu quickly becomes confusing. Since a
    <filename>/boot</filename> usually has got limited space you also might
    run into trouble with <filename>/boot</filename> overflowing. While you
    may delete unused kernel versions manually with &yast; or Zypper (as
    described below), you can also configure
    <systemitem class="library">libzypp</systemitem> to automatically delete
    kernels no longer used. By default no kernels are deleted.
   </para>
   <procedure>
    <step>
     <para>
      Open <filename>/etc/zypp/zypp.conf</filename> with the editor of your
      choice as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Search for the string <literal>multiversion.kernels</literal> and
      activate this option by uncommenting the line. This option takes a
      comma separated list of the following values
     </para>
     <formalpara>
      <title><literal><replaceable>2.6.32.12-0.7 </replaceable></literal>:</title>
      <para>
       keep the kernel with the specified version number
      </para>
     </formalpara>
     <formalpara>
      <title><literal>latest</literal>:</title>
      <para>
       keep the kernel with the highest version number
      </para>
     </formalpara>
     <formalpara>
      <title><literal>latest-N</literal>:</title>
      <para>
       keep the kernel with the Nth highest version number
      </para>
     </formalpara>
     <formalpara>
      <title><literal>running</literal></title>
      <para>
       keep the running kernel
      </para>
     </formalpara>
     <formalpara>
      <title><literal>oldest</literal></title>
      <para>
       keep the kernel with the lowest version number (the one that was
       originally shipped with &productname;)
      </para>
     </formalpara>
     <formalpara>
      <title><literal>oldest+N</literal></title>
      <para>
       keep the kernel with the Nth lowest version number
      </para>
     </formalpara>
     <para>
      Here are some examples
     </para>
     <variablelist>
      <varlistentry>
       <term><literal>multiversion.kernels = latest,running</literal>
       </term>
       <listitem>
        <para>
         Keep the latest kernel and the one currently running one. This is
         similar to not enabling the multiversion feature at all, except
         that the old kernel is removed <emphasis>after the next
         reboot</emphasis> and not immediately after the installation.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>multiversion.kernels = latest,latest-1,running</literal>
       </term>
       <listitem>
        <para>
         Keep the last two kernels and the one currently running.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>
         multiversion.kernels = latest,running,<replaceable>3.0.rc7-test</replaceable></literal>
       </term>
       <listitem>
        <para>
         Keep the latest kernel, the one currently running and
         <replaceable>3.0.rc7-test</replaceable>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <tip>
      <title>Keep the <literal>running</literal> Kernel</title>
      <para>
       Unless using special setups, you probably always want to keep the
       <literal>running</literal> kernel.
      </para>
     </tip>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 id="cha.tuning.multikernel.yast">
  <title>Installing/Removing Multiple Kernel Versions with &yast;</title>

  <procedure>
   <step>
    <para>
     Start &yast; and open the software manager via <menuchoice>
     <guimenu>Software</guimenu> <guimenu>Software Mannagment</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     List all packages capable of providing multiple versions by choosing
     <menuchoice> <guimenu>View</guimenu> <guimenu>Package Groups</guimenu>
     <guimenu>Multiversion Packages</guimenu> </menuchoice>.
    </para>
    <figure>
     <title>The &yast; Software Manager - Multiversion View</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_sw_multiversion.png" width="90%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="yast2_sw_multiversion.png" width="90%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </figure>
   </step>
   <step>
    <para>
     Select a package and open its <guimenu>Version</guimenu> tab in the
     bottom pane on the left.
    </para>
   </step>
   <step>
    <para>
     To install a package, click its check box. A green check mark indicates
     it is selected for installation.
    </para>
    <para>
     To remove an already installed package (marked with a white check
     mark), click its check box until a red <literal>X</literal> indicates it
     is selected for removal.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Accept</guimenu> to start the installation.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="cha.tuning.multikernel.zypper">
  <title>Installing/Removing Multiple Kernel Versions with zypper</title>

  <procedure>
   <step>
    <para>
     Use the command <command>zypper se -s 'kernel*'</command> to display a
     list of all kernel packages available:
    </para>
    <screen><?dbsuse-fo font-size="7pt"?>S | Name           | Type       | Version         | Arch   | Repository        
--+----------------+------------+-----------------+--------+-------------------
v | kernel-default | package    | 2.6.32.10-0.4.1 | x86_64 | Alternative Kernel
i | kernel-default | package    | 2.6.32.9-0.5.1  | x86_64 | (System Packages) 
  | kernel-default | srcpackage | 2.6.32.10-0.4.1 | noarch | Alternative Kernel
i | kernel-default | package    | 2.6.32.9-0.5.1  | x86_64 | (System Packages)
...</screen>
   </step>
   <step>
    <para>
     Specify the exact version when installing:
    </para>
    <screen>zypper in kernel-default-2.6.32.10-0.4.1</screen>
   </step>
   <step>
    <para>
     When uninstalling a kernel, use the commands <command>zypper se -si
     'kernel*'</command> to list all kernels installed and <command>zypper
     rm <replaceable>PACKAGENAME-VERSION</replaceable></command> to remove
     the package.
    </para>
   </step>
  </procedure>
 </sect1>
</chapter>
