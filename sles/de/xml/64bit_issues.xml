<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:base="64bit_issues.xml" xml:id="cha-64bit"><title>32-Bit- und 64-Bit-Anwendungen in einer 64-Bit-Systemumgebung</title><info/>
 <indexterm> <primary>64-Bit-Linux</primary> </indexterm>
 <para>
  <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> ist für <phrase os="sles">verschiedene</phrase> 64-Bit-Plattformen verfügbar. Das bedeutet jedoch nicht unbedingt, dass alle enthaltenen Anwendungen bereits auf 64-Bit-Plattformen portiert wurden. <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> unterstützt die Verwendung von 32-Bit-Anwendungen in einer 64-Bit-Systemumgebung. Dieses Kapitel bietet einen kurzen Überblick darüber, wie diese Unterstützung auf <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>-64-Bit-Plattformen implementiert ist. Es wird erläutert, wie 32-Bit-Anwendungen ausgeführt werden (Laufzeitunterstützung) und wie 32-Bit-Anwendungen kompiliert werden sollten, damit sie sowohl in 32-Bit- als auch in 64-Bit-Systemanwendungen ausgeführt werden können. Außerdem finden Sie Informationen zur Kernel-API und es wird erläutert, wie 32-Bit-Anwendungen unter einem 64-Bit-Kernel ausgeführt werden können.
 </para>
 <para>
  <phrase os="sles"><phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> für die 64-Bit-Plattformen ia64, ppc64, System z und x86_64</phrase> ist so ausgelegt, dass vorhandene 32-Bit-Anwendungen <quote>ohne Änderungen in der 64-Bit-Umgebung ausführbar sind.</quote> <phrase os="sles">Die entsprechenden 32-Bit-Plattformen sind 86 für ia64, ppc für ppc64 und x86 für x86_64.</phrase> Diese Unterstützung bedeutet, dass Sie weiterhin Ihre bevorzugten 32-Bit-Anwendungen verwenden können und nicht warten müssen, bis ein entsprechender 64-Bit-Port verfügbar ist.<phrase os="sles"> Das aktuelle ppc64-System führt die meisten Anwendungen im 32-Bit-Modus aus, es können aber auch 64-Bit-Anwendungen ausgeführt werden.</phrase>
 </para>
 <section xml:id="sec-64bit-runt">
  <title>Laufzeitunterstützung</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Laufzeitunterstützung</secondary> </indexterm>

  <important>
   <title>Konflikte zwischen Anwendungsversionen</title>
   <para>
    Wenn eine Anwendung sowohl für 32-Bit- als auch für 64-Bit-Umgebungen verfügbar ist, führt die parallele Installation beider Versionen zwangsläufig zu Problemen. Entscheiden Sie sich in diesen Fällen für eine der beiden Versionen und installieren und verwenden Sie nur diese.
   </para>
   <para>
    Eine Ausnahme von dieser Regel ist PAM (Pluggable Authentication Modules). Während des Authentifizierungsprozesses verwendet <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> PAM (austauschbare Authentifizierungsmodule) als Schicht für die Vermittlung zwischen Benutzer und Anwendung. Auf einem 64-Bit-Betriebssystem, das auch 32-Bit-Anwendungen ausführt, ist es stets erforderlich, beide Versionen eines PAM-Moduls zu installieren.
   </para>
  </important>

  <para>
   Für eine korrekte Ausführung benötigt jede Anwendung eine Reihe von Bibliotheken. Leider sind die Namen für die 32-Bit- und 64-Bit-Versionen dieser Bibliotheken identisch. Sie müssen auf andere Weise voneinander unterschieden werden.
  </para>

  <para>
   Um die Kompatibilität mit der 32-Bit-Version aufrechtzuerhalten, werden die Bibliotheken am selben Ort im System gespeichert wie in der 32-Bit-Umgebung. Die 32-Bit-Version von <filename>libc.so.6</filename> befindet sich sowohl in der 32-Bit- als auch in der 64-Bit-Umgebung unter <filename>/lib/libc.so.6</filename>.
  </para>

  <para>
   Alle 64-Bit-Bibliotheken und Objektdateien befinden sich in Verzeichnissen mit dem Namen <filename>lib64</filename>. Die 64-Bit-Objektdateien, die sich normalerweise unter <filename>/lib</filename> und <filename>/usr/lib</filename> befinden, werden nun unter <filename>/lib64</filename> und <filename>/usr/lib64</filename> gespeichert. Unter <filename>/lib</filename> und <filename>/usr/lib</filename> ist also Platz für die 32-Bit-Bibliotheken, sodass der Dateiname für beide Versionen unverändert bleiben kann.
  </para>

  <para>
   Unterverzeichnisse von 32-Bit-Verzeichnissen namens <filename>/lib</filename>, deren Dateninhalt nicht von der Wortgröße abhängt, werden nicht verschoben. Das Schema entspricht LSB (Linux Standards Base) und FHS (File System Hierarchy Standard).
  </para>

  <para os="sles" arch="ipf">
   Die 64-Bit-Bibliotheken für ia64 befinden sich in Standard-<filename>lib</filename>-Verzeichnissen. Es gibt weder ein Verzeichnis <filename>lib64</filename> noch ein Verzeichnis <filename>lib32</filename>. ia64 führt den 32-Bit-x86-Code unter einer Emulation aus. Eine Reihe von Basisbibliotheken wird unter <filename>/emul/ia32-linux/lib</filename> und <filename>/emul/ia32-linux/usr/lib</filename> installiert.
  </para>


 </section>
 <section xml:id="sec-64bit-devel">
  <title>Software-Entwicklung</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Software-Entwicklung</secondary> </indexterm>

  <para os="sles">
   Alle 64-Bit-Architekturen unterstützen die Entwicklung von 64-Bit-Objekten. Der Grad der Unterstützung für die 32-Bit-Kompilierung ist von der Architektur abhängig. Dies sind die verschiedenen Implementierungsoptionen für die Toolkette von GCC (GNU Compiler-Sammlung) und Binutils, die den Assembler <command>as</command> und den Linker <command>ld</command> umfassen:
  </para>

  <variablelist os="sles">
   <varlistentry>
    <term>Doppelarchitektur-Compiler</term>
    <listitem>
     <para>
      Mit einer Doppelarchitektur-Entwicklungstoolkette können sowohl 32-Bit- als auch 64-Bit-Objekte erstellt werden. Eine Doppelarchitektur-Entwicklungswerkzeugkette (Biarch Development Toolchain) ermöglicht die Erstellung von 32-Bit- und 64-Bit-Objekten. Das Kompilieren von 64-Bit-Objekten gehört bei fast allen Plattformen zum Standard. 32-Bit-Objekte können erstellt werden, wenn spezielle Flags verwendet werden. Dieses spezielle Flag ist <option>-m32</option> für GCC. Die Flags für die Binutils sind architekturabhängig, aber GCC überträgt die richtigen Flags an die Linker und Assembler. Zurzeit ist eine Doppelarchitektur-Entwicklungstoolkette für amd64 (unterstützt die Entwicklung von x86- und amd64-Anweisungen), System z und ppc64 vorhanden. 32-Bit-Objekte werden in der Regel auf der ppc64-Plattform erstellt. Zur Erstellung von 64-Bit-Objekten muss das Flag <literal>-m64</literal> verwendet werden.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Keine Unterstützung</term>
    <listitem>
     <para>
      <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet keine Unterstützung für die direkte Entwicklung von 32-Bit-Software auf allen Plattformen. Zur Entwicklung von Anwendungen für x86 unter ia64 müssen Sie die entsprechende 32-Bit-Version von <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> verwenden.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  

  <para>
   Alle Header-Dateien müssen in architekturunabhängiger Form geschrieben werden. Die installierten 32-Bit- und 64-Bit-Bibliotheken müssen eine API (Anwendungsprogrammschnittstelle) aufweisen, die zu den installierten Header-Dateien passt. Die normale <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>-Umgebung ist gemäß diesem Prinzip konzipiert. Bei manuell aktualisierten Bibliotheken müssen Sie diese Probleme selbst lösen.
  </para>
 </section>
 <section xml:id="sec-64bit-biarch">
  <title>Software-Kompilierung auf Doppelarchitektur-Plattformen</title>

  <para>
   Um bei einer Doppelarchitektur Binärdateien für die jeweils andere Architektur zu entwickeln, müssen die entsprechenden Bibliotheken für die zweite Architektur zusätzlich installiert werden. Diese Pakete heißen <systemitem class="resource">rpmname-32bit</systemitem><phrase os="sles"> oder <systemitem class="resource">rpmname-x86</systemitem> (für ia64), wenn die zweite Architektur eine 32-Bit-Architektur ist, oder <systemitem class="resource">rpmname-64bit</systemitem>, wenn die zweite Architektur eine 64-Bit-Architektur ist</phrase>. Außerdem benötigen Sie die entsprechenden Header und Bibliotheken aus den <systemitem class="resource">rpmname-devel</systemitem>-Paketen und die Entwicklungsbibliotheken für die zweite Architektur aus <systemitem class="resource">rpmname-devel-32bit</systemitem><phrase os="sles"> oder <systemitem class="resource">rpmname-devel-64bit</systemitem></phrase>.
  </para>

  <para os="sles">
   Zum Kompilieren eines Programms, das <command>libaio</command> auf einem System verwendet, dessen zweite Architektur eine 32-Bit-Architektur ist (x86_64 oder System z), benötigen Sie beispielsweise die folgenden RPMs:
  </para>

  <variablelist os="sles">
   <varlistentry>
    <term>libaio-32bit</term>
    <listitem>
     <para>
      32-Bit-Laufzeitpaket
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel-32bit</term>
    <listitem>
     <para>
      Header und Bibliotheken für die 32-Bit-Entwicklung
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio</term>
    <listitem>
     <para>
      64-Bit-Laufzeitpaket
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel</term>
    <listitem>
     <para>
      Header und Bibliotheken für die 64-Bit-Entwicklung
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Die meisten Open Source-Programme verwenden eine <command>autoconf</command>-basierte Programmkonfiguration. Um mit <command>autoconf</command> ein Programm für die zweite Architektur zu konfigurieren, überschreiben Sie die normalen Compiler- und Linker-Einstellungen von <command>autoconf</command>, indem Sie das Skript <command>configure</command> mit zusätzlichen Umgebungsvariablen ausführen.
  </para>

  <para>
   Das folgende Beispiel bezieht sich auf ein x86_64-System mit x86 als zweiter Architektur. <phrase os="sles">Beispiele für ppc64 mit ppc als Zweitarchitektur wären ähnlich. Dieses Beispiel gilt nicht für ia64-Systeme, wo Sie keine 32-Bit-Pakete erstellen können.</phrase>
  </para>

  <procedure>
   <step>
    <para>
     Verwenden Sie den 32-Bit-Compiler:
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Weisen Sie den Linker an, 32-Bit-Objekte zu verarbeiten (verwenden Sie stets <command>gcc</command> als Linker-Frontend):
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Legen Sie den Assembler für die Erstellung von 32-Bit-Objekten fest:
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step>
    <para>
     Geben Sie die Linker-Flags an, wie zum Beispiel den Standort von 32-Bit-Bibliotheken:
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step>
    <para>
     Geben Sie den Standort für die 32-Bit-Objektcode-Bibliotheken an:
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step>
    <para>
     Geben Sie den Standort für die 32-Bit-X-Bibliotheken an:
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   Nicht alle diese Variablen werden für jedes Programm benötigt. Passen Sie sie an das entsprechende Programm an.
  </para>

  <para os="sles">
   Ein <command>configure</command>-Aufruf zur Kompilierung einer nativen 32-Bit-Anwendung auf x86_64<phrase os="sles">, ppc64 oder System z</phrase> könnte beispielsweise wie folgt aussehen:
  </para>

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </section>
 <section xml:id="sec-64bit-kernel">
  <title>Kernel-Spezifikationen</title><indexterm> <primary>64-Bit-Linux</primary> <secondary>Kernel-Spezifikationen</secondary> </indexterm>

  <para>
   Die 64-Bit-Kernel für x86_64<phrase os="sles">, ppc64 und System z</phrase> bieten sowohl eine 64-Bit- als auch eine 32-Bit-Kernel-ABI (binäre Anwendungsschnittstelle). Letztere ist mit der ABI für den entsprechenden 32-Bit-Kernel identisch. Das bedeutet, dass die 32-Bit-Anwendung mit dem 64-Bit-Kernel auf die gleiche Weise kommunizieren kann wie mit dem 32-Bit-Kernel.
  </para>

  <para>
   Die 32-Bit-Emulation der Systemaufrufe für einen 64-Bit-Kernel unterstützt nicht alle APIs, die von Systemprogrammen verwendet werden. Dies hängt von der Plattform ab. Aus diesem Grund müssen einige wenige Anwendungen, wie beispielsweise <command>lspci</command>, auf <phrase os="sles">Nicht-ppc64-Plattformen als 64-Bit-Programme kompiliert werden, damit sie ordnungsgemäß funktionieren. Bei IBM-System z sind nicht alle ioctls in der 32-Bit-Kernel-ABI verfügbar</phrase>.
  </para>

  <para>
   Ein 64-Bit-Kernel kann nur 64-Bit-Kernel-Module laden, die speziell für diesen Kernel kompiliert wurden. 32-Bit-Kernel-Module können nicht verwendet werden.
  </para>

  <tip>
   <title>Kernel-ladbare Module</title>
   <para>
    Für einige Anwendungen sind separate, Kernel-ladbare Module erforderlich. Wenn Sie vorhaben, eine solche 32-Bit-Anwendung in einer 64-Bit-Systemumgebung zu verwenden, wenden Sie sich an den Anbieter dieser Anwendung und an SUSE, um sicherzustellen, dass die 64-Bit-Version des Kernel-ladbaren Moduls und die kompilierte 32-Bit-Version der Kernel-API für dieses Modul verfügbar sind.
   </para>
  </tip>
 </section>
</chapter>
