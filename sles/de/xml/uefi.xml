<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:base="uefi.xml" xml:id="cha-uefi"><title>UEFI (Unified Extensible Firmware Interface)</title><info/>
 

 <para>
  Die UEFI (Unified Extensible Firmware Interface) bildet die Schnittstelle zwischen der Firmware, die sich auf der Systemhardware befindet, allen Hardware-Komponenten des Systems und dem Betriebssystem.
 </para>

 <para>
  UEFI wird auf PC-Systemen immer stärker verbreitet und ersetzt allmählich das bisherige PC-BIOS. UEFI bietet beispielsweise echte Unterstützung für 64-Bit-Systeme und ermöglicht das sichere Booten (<quote>Secure Boot</quote>, Firmware-Version 2.3.1c oder höher erforderlich), eine der zentralen Funktionen dieser Schnittstelle. Nicht zuletzt stellt UEFI auf allen x86-Plattformen eine Standard-Firmware bereit.
 </para>

 <para>
  UEFI eröffnet außerdem die folgenden Vorteile:
 </para>

 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    Booten von großen Festplatten (mehr als 2 TiB) mithilfe einer GUID-Partitionstabelle (GPT).
   </para>
  </listitem>
  <listitem>
   <para>
    CPU-unabhängige Architektur und Treiber.
   </para>
  </listitem>
  <listitem>
   <para>
    Flexible Vor-OS-Umgebung mit Netzwerkfunktionen.
   </para>
  </listitem>
  <listitem>
   <para>
    CSM (Compatibility Support Module) zur Unterstützung des Bootens älterer Betriebssysteme über eine PC-BIOS-ähnliche Emulation.
   </para>
  </listitem>
 </itemizedlist>

 <para>
Weitere Informationen finden Sie unter <link xlink:href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"/>. Die nachfolgenden Abschnitte sollen keinen allgemeinen Überblick über UEFI liefern, sondern sie weisen lediglich darauf hin, wie bestimmte Funktionen in SUSE Linux Enterprise implementiert sind.
 </para>

 <section xml:id="sec-uefi-secboot">
  <title>Secure Boot</title>

  

  <para>
   Bei UEFI bedeutet die Absicherung des Bootstrapping-Prozesses, dass eine Vertrauenskette aufgebaut wird. Die <quote>Plattform</quote> ist die Grundlage dieser Vertrauenskette; im SUSE Linux Enterprise-Kontext bilden die Hauptplatine und die On-Board-Firmware diese <quote>Plattform</quote>. Anders gesagt ist dies der Hardware-Hersteller, und die Vertrauenskette erstreckt sich von diesem Hardware-Hersteller zu den Komponentenherstellern, den Betriebssystemherstellern usw.
  </para>

  <para>
Das Vertrauen wird durch die Verschlüsselung mit öffentlichen Schlüsseln ausgedrückt. Der Hardware-Hersteller integriert einen sogenannten Plattformschlüssel (Platform Key, PK) in die Firmware, der die Grundlage für das Vertrauen legt. Das Vertrauensverhältnis zu Betriebssystemherstellern und anderen Dritten wird dadurch dokumentiert, dass ihre Schlüssel mit dem PK signiert werden.
  </para>
  <para>
Zum Gewährleisten der Sicherheit wird schließlich verlangt, dass die Firmware erst dann einen Code ausführt, wenn dieser Code mit einem dieser <quote>verbürgten</quote> Schlüssel signiert ist – ein OS-Bootloader, ein Treiber im Flash-Speicher einer PCI-Express-Karte oder auf der Festplatte oder auch eine Aktualisierung der Firmware selbst.
  </para>
  <para>
Wenn Sie Secure Boot nutzen möchten, muss der OS-Loader also in jedem Fall mit einem Schlüssel signiert sein, der für die Firmware als verbürgt gilt, und der OS-Loader muss überprüfen, ob der zu ladende Kernel ebenfalls verbürgt ist.
  </para>
  <para>

In die UEFI-Schlüsseldatenbank können KEKs (Key Exchange Keys) aufgenommen werden. Auf diese Weise können Sie auch andere Zertifikate nutzen, sofern diese mit dem privaten Teil des PK signiert sind.

  </para>

  <section>
   <title>Implementation unter SUSE Linux Enterprise</title>
   
   <para>
    Standardmäßig wird der KEK (Key Exchange Key) von Microsoft installiert.
   </para>

   <note>
    <title>GUID-Partitionstabelle (GPT) erforderlich</title>
    <para>
     Für die Secure Boot-Funktion ist eine GUID-Partitionstabelle (GPT) erforderlich, die die bisherige Partitionierung per MBR (Master Boot Record) ersetzt.
    </para>
    <para>
     Wenn YaST während der Installation den EFI-Modus feststellt, wird versucht, eine GPT-Partition zu erstellen. UEFI erwartet die EFI-Programme auf einer FAT-formatierten ESP (EFI-Systempartition).
    </para>
   </note>

   

   <para>
Zur Unterstützung von UEFI Secure Boot ist im Wesentlichen ein Bootloader mit einer digitalen Signatur erforderlich, den die Firmware als verbürgten Schlüssel erkennt. Zum Vorteil für SUSE Linux Enterprise-Kunden gilt dieser Schlüssel für die Firmware von vornherein als verbürgt, ohne dass der Benutzer manuell eingreifen müsste.
   </para>
   <para>
Hierzu gibt es zwei Möglichkeiten. Die erste Möglichkeit ist die Zusammenarbeit mit Hardware-Herstellern, sodass diese einen SUSE-Schlüssel zulassen, mit dem dann der Bootloader signiert wird. Die zweite Möglichkeit besteht darin, das Windows Logo Certification-Programm von Microsoft zu durchlaufen, damit der Bootloader zertifiziert wird und Microsoft den SUSE-Signierschlüssel anerkennt (also mit dem KEK von Microsoft signiert). Bislang wurde der Loader für SUSE vom UEFI Signing Service (in diesem Fall von Microsoft) signiert.
   </para>
   

  <figure xml:id="fig-uefi-secure-boot-mok2">
   <title>UEFI: Secure Boot-Vorgang</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="uefi-secure-boot-mok2.png" width="50%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="uefi-secure-boot-mok2.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>

   <para>
    In der Implementierungsschicht nutzt SUSE den <systemitem>shim</systemitem>-Loader. Durch diese elegante Lösung werden rechtliche Probleme vermieden, und der Zertifizierungs- und Signierungsschritt wird erheblich vereinfacht. Der <systemitem>shim</systemitem>-Loader lädt einen Bootloader wie ELILO oder GRUB 2 und überprüft diesen Loader; der Bootloader wiederum lädt ausschließlich Kernels, die mit einem SUSE-Schlüssel signiert sind. SUSE bietet diese Funktion ab SLE11 SP3 in Neuinstallationen, in denen UEFI Secure Boot aktiviert ist.
   </para>

   
   
   

   <para>
    Es gibt zwei Typen von verbürgten Benutzern.
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
Erstens: Benutzer, die die Schlüssel besitzen. Der PK (Platform Key) ermöglicht nahezu alle Aktionen. Der KEK (Key Exchange Key) ermöglicht dieselben Aktionen wie ein PK, mit der Ausnahme, dass der PK hiermit nicht geändert werden kann.
     </para>
    </listitem>
    <listitem>
     <para>
Zweitens: Benutzer mit physischem Zugang zum Computer. Ein Benutzer mit physischem Zugang kann den Computer neu booten und UEFI konfigurieren.
     </para>
    </listitem>
   </itemizedlist>

<para>
UEFI bietet zwei Arten von Variablen für die Anforderungen dieser Benutzer:
</para>


   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
Die ersten Variablen werden als <quote>Authenticated Variables</quote> (authentifizierte Variablen) bezeichnet. Diese Variablen können sowohl innerhalb des Bootvorgangs (in der sogenannten Boot Services Environment) und im laufenden Betriebssystem aktualisiert werden, jedoch nur dann, wenn der neue Wert der Variable mit demselben Schlüssel signiert ist wie der bisherige Wert. Zudem können diese Variablen nur an einen Wert mit einer höheren Seriennummer angehängt oder in einen Wert mit einer höheren Seriennummer geändert werden.
     </para>
    </listitem>
    <listitem>
     <para>
Die zweiten Variablen sind die sogenannten <quote>Boot Services Only Variables</quote> (Variablen für Boot-Services). Diese Variablen stehen jedem Code zur Verfügung, der während des Bootvorgangs ausgeführt wird. Nach Abschluss des Bootvorgangs und vor dem Starten des Betriebssystems muss der Bootloader den Aufruf <literal>ExitBootServices</literal> auslösen. Anschließend sind diese Variablen nicht mehr zugänglich, und das Betriebssystem kann nicht mehr darauf zugreifen.
     </para>
    </listitem>
   </itemizedlist>

   <para>
Die verschiedenen UEFI-Schlüssellisten sind vom ersten Typ, da es damit möglich ist, die Schlüssel, Treiber und Firmware-Fingerabdrücke online zu aktualisieren, hinzuzufügen und in Schwarze Listen einzutragen. Der zweite Variablentyp, also die <quote>Boot Services Only Variables</quote>, unterstützt die Implementierung von Secure Boot auf sichere, Open Source-freundliche und damit GPLv3-kompatible Weise.
   </para>
   <para>
SUSE startet mit <systemitem>shim</systemitem>, einem kleinen, einfachen EFI-Bootloader, der ursprünglich von Fedora entwickelt wurde. Der Loader ist mit einem durch den SUSE-KEK signierten Zertifikat sowie mit einem von Microsoft ausgegebenen Zertifikat signiert, auf dessen Grundlage die KEKs in der UEFI-Schlüsseldatenbank im System zur Verfügung stehen.
   </para>
   <para>
Damit kann <systemitem>shim</systemitem> geladen und ausgeführt werden.
   </para>
   <para>
Anschließend überprüft <systemitem>shim</systemitem>, ob der zu ladende Bootloader verbürgt ist. In der Standardsituation verwendet <systemitem>shim</systemitem> ein unabhängiges SUSE-Zertifikat, das in diesen Loader integriert ist. Darüber hinaus ermöglicht <systemitem>shim</systemitem> das <quote>Registrieren</quote> weiterer Schlüssel, die Vorrag vor dem SUSE-Standardschlüssel erhalten. Im Folgenden werden diese Schlüssel als MOKs (<quote>Machine Owner Keys</quote>) bezeichnet.
   </para>
   <para>
Danach überprüft und bootet der Bootloader den Kernel, und der Kernel überprüft und bootet seinerseits die Module.
   </para>
  </section>

  <section>
   <title>MOK (Machine Owner Key)</title>


<para>
 Wenn der Benutzer (der <quote>Machine Owner</quote>, also der Eigentümer des Computers) eine Komponente im Bootvorgang ersetzen möchte, müssen MOKs (Machine Owner Keys) verwendet werden. Das Werkzeug <systemitem>mokutils</systemitem> hilft beim Signieren der Komponenten und beim Verwalten der MOKs.
</para>
<para>
Der Registrierungsvorgang beginnt mit dem Neubooten des Computers und dem Unterbrechen des Bootvorgangs (z. B. durch Drücken einer Taste), wenn <systemitem>shim</systemitem> geladen wird. <systemitem>shim</systemitem> geht dann in den Registrierungsmodus über, und der Benutzer kann den SUSE-Standardschlüssel durch Schlüssel aus einer Datei auf der Bootpartition ersetzen. Auf Wunsch des Benutzers kann <systemitem>shim</systemitem> dann einen Hash dieser Datei berechnen und das Ergebnis in einer <quote>Boot Services Only</quote>-Variable ablegen. Damit ist <systemitem>shim</systemitem> in der Lage, Änderungen an der Datei zu erkennen, die außerhalb der Boot-Services vorgenommen wurden; so wird eine Manipulation der Liste der benutzergenehmigten MOKs unterbunden.
</para>
<para>
Diese Vorgänge laufen zum Zeitpunkt des Bootens ab – nunmehr wird nur überprüfter Code ausgeführt. Daher kann nur ein Benutzer, der direkt an der Konsole sitzt, die Schlüssel des Computereigentümers verwenden. Bei Malware oder bei einem Hacker mit Fernzugriff auf das Betriebssystem ist dies nicht möglich, da Hacker und Malware lediglich die Datei ändern können, nicht jedoch den Hash, der in der <quote>Boot Services Only</quote>-Variable gespeichert ist.
</para>
<para>Nach dem Laden und Überprüfen durch <systemitem>shim</systemitem> ruft der Bootloader wiederum <systemitem>shim</systemitem> auf, um den Kernel zu überprüfen. So wird eine Duplizierung des Prüfcodes vermieden. <systemitem>shim</systemitem> greift hierzu auf dieselbe MOK-Liste zu und teilt dem Bootloader mit, ob der Kernel geladen weden kann.</para>

<para>
Auf diese Weise können Sie Ihren eigenen Kernel oder Bootloader installieren. Sie müssen lediglich einen neuen Schlüsselsatz installieren und im Rahmen Ihrer physischen Anwesenheit beim ersten Neubooten bestätigen. Es gibt nicht nur einen MOK, sondern eine ganze MOK-Liste. Aus diesem Grund kann <systemitem>shim</systemitem> die Schlüssel von verschiedenen Herstellern als verbürgt betrachten, sodass auch Dual-Boot- und Multi-Boot-Funktionen mit dem Bootloader möglich sind.
</para>
  </section>

  <section>
   <title>Booten eines benutzerdefinierten Kernels</title>

   <para>
    Die folgenden Ausführungen beruhen auf <link xlink:href="http://en.opensuse.org/openSUSE:UEFI#Booting_a_custom_kernel"/>.
   </para>
   <para>
    Secure Boot verhindert nicht die Nutzung eines selbst kompilierten Kernels. Sie müssen den Kernel mit Ihrem eigenen Zertifikat signieren und dieses Zertifikat für die Firmware oder den MOK bekanntgeben.
   </para>

   <procedure>
    <step>
     <para>
      Erstellen Sie einen benutzerdefinierten X.509-Schlüssel und ein entsprechendes Zertifikat für die Signierung:
     </para>

     <screen>openssl req -new -x509 -newkey rsa:2048 -keyout key.asc \
  -out cert.pem -nodes -days 666 -subj "/CN=$USER/"</screen>

    <para>
     
     Weitere Informationen zum Erstellen von Zertifikaten finden Sie unter <link xlink:href="http://en.opensuse.org/openSUSE:UEFI_Image_File_Sign_Tools#Create_Your_Own_Certificate"/>.
    </para>
    </step>

    <step>
     <para>
      Verpacken Sie den Schlüssel und das Zertifikat als PKCS#12-Struktur:
     </para>
     <screen>openssl pkcs12 -export -inkey key.asc -in cert.pem \
  -name kernel_cert -out cert.p12</screen>
    </step>

    <step>
     <para>
      Generieren Sie eine NSS-Datenbank für <command>pesign</command>:
     </para>

     <screen>certutil -d . -N</screen>
    </step>

    <step>
     <para>
      Importieren Sie den Schlüssel und das Zertifikat aus PKCS#12 in die NSS-Datenbank:
     </para>

     <screen>pk12util -d . -i cert.p12</screen>
    </step>

    <step>
     <para>
      <quote>Authentifizieren</quote> Sie den Kernel mit der neuen Signatur mithilfe von <command>pesign</command>:
     </para>
     <screen>pesign -n . -c kernel_cert -i arch/x86/boot/bzImage \
  -o vmlinuz.signed -s</screen>
    </step>
    <step>
     <para>
Listen Sie die Signaturen im Kernel-Image auf:
     </para>

     <screen>pesign -n . -S -i vmlinuz.signed</screen>
     <para>
Zu diesem Zeitpunkt können Sie den Kernel wie gewohnt in <filename>/boot</filename> installieren. Der Kernel besitzt nun eine benutzerdefinierte Signatur, sodass das Zertifikat zum Signieren in die UEFI-Firmware oder in den MOK importiert werden muss.
     </para>
    </step>
    <step>
     <para>
      Konvertieren Sie das Zertifikat zum Importieren in die Firmware oder den MOK in das DER-Format: 
     </para>

     <screen>openssl x509 -in cert.pem -outform der -out cert.der</screen>
    </step>
    <step>
     <para>
      Kopieren Sie das Zertifikat aus Gründen des einfacheren Zugriffs in die ESP:
     </para>
     <screen>sudo cp cert.der /boot/efi/</screen>
    </step>
    <step>
     <para>
      Mit <command>mokutil</command> wird die MOK-Liste automatisch gestartet.
     </para>
     
     
     

     <para>
      Zum manuellen Starten des MOK gehen Sie alternativ wie folgt vor:
     </para>

     <substeps performance="required">
      <step>
       <para>
        Booten Sie den Computer neu
       </para>
      </step>
      <step>
       <para>
        Drücken Sie im GRUB -Menü die Taste „<literal>c</literal>“.
       </para>
      </step>
      <step>
       <para>
        Typ:
       </para>
       <screen>chainloader $efibootdir/MokManager.efi
boot</screen>
      </step>
      <step>
       <para>
        Wählen Sie <guimenu>Enroll key from disk (Schlüssel von Festplatte registrieren)</guimenu>.
       </para>
      </step>
      <step>
       <para>
        Navigieren Sie zur Datei <filename>cert.der</filename>, und drücken Sie die <keycap>Eingabetaste</keycap>.
       </para>
      </step>
      <step>
       <para>
        Registrieren Sie den Schlüssel gemäß den Anweisungen. In der Regel drücken Sie hierzu „<literal>0</literal>“ und dann zum Bestätigen „<literal>j</literal>“.
       </para>
       <para>
        Alternativ können Sie einen neuen Schlüssel über das Firmware-Menü in die Signaturdatenbank aufnehmen.
       </para>
      </step>
     </substeps>


    </step>
   </procedure>


  </section>

  <section>
   <title>Verwenden von Nicht-Inbox-Treibern</title>
   <para>
    Das Hinzufügen von Nicht-Inbox-Treibern (also Treiber, die nicht in SLE inbegriffen sind) wird nach dem Booten in die Installation mit aktiviertem Secure Boot nicht unterstützt. Der Signierschlüssel für SolidDriver/PLDP gilt standardmäßig nicht als vertrauenswürdig.
   </para>
   <para>
    Es ist jedoch mit zwei Methoden möglich, Treiber von Drittanbietern bei der Installation mit aktiviertem Secure Boot zu nutzen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Fügen Sie die erforderlichen Schlüssel vor der Installation mithilfe von Firmware-/Systemverwaltungswerkzeugen in die Firmware-Datenbank ein. Diese Option ist von der jeweils verwendeten Hardware abhängig. Weitere Informationen erhalten Sie bei Ihrem Hardware-Händler.
     </para>
    </listitem>
    <listitem>
     <para>
      Verwenden Sie ein bootfähiges Treiber-ISO-Image von <link xlink:href="https://drivers.suse.com/"/> oder von Ihrem Hardware-Händler, mit dem die erforderlichen Schlüssel beim ersten Starten in die MOK-Liste eingetragen werden.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    So tragen Sie die Treiberschlüssel mit dem bootfähigen Treiber-ISO-Image in die MOK-Liste ein:
   </para>
   <procedure>
    <step>
     <para>
      Brennen Sie das ISO-Image auf eine leere CD/DVD.
     </para>
    </step>
    <step>
     <para>
      Starten Sie die Installation. Booten Sie hierzu von der neuen CD/DVD und halten Sie dabei die standardmäßigen SUSE Linux Enterprise-Medien bzw. die URL zu einem Netzwerkinstallationsserver bereit.
     </para>
     <para>
      Wenn Sie eine Netzwerkinstallation vornehmen, geben Sie die URL der Netzwerkinstallationsquelle mit der Option <option>install=</option> in die Bootbefehlszeile ein.
     </para>
     <para>
      Bei einer Installation von optischen Speichermedien bootet das Installationsprogramm zunächst vom Treiber-Kit; anschließend werden Sie aufgefordert, den ersten Datenträger für SUSE Linux Enterprise einzulegen.
     </para>
    </step>
    <step>
     <para>
      Bei der Installation wird ein initrd mit aktualisierten Treibern herangezogen.
     </para>
    </step>
   </procedure>
   <para>
    Weitere Informationen finden Sie unter <link xlink:href="https://drivers.suse.com/doc/Usage/Secure_Boot_Certificate.html"/>.
   </para>
  </section>

  <section>
   <title>Einschränkungen</title>
   <para>Beim Booten im Secure Boot-Modus gelten die folgenden Einschränkungen:</para>

<itemizedlist mark="bullet" spacing="normal">
 <listitem>
  <para>
   
   Hybridisierte ISO-Images werden auf UEFI-Systemen nicht als bootfähig erkannt. In SP3 wird daher das UEFI-Booten von USB-Geräten nicht unterstützt.
  </para>
 </listitem>
<listitem>
 <para>
Um zu gewährleisten, dass Secure Boot nicht einfach umgangen werden kann, sind einige Kernelfunktionen beim Ausführen unter Secure Boot deaktiviert.
</para>
</listitem>


<listitem>
 <para>Der Bootloader, der Kernel und die Kernelmodule müssen signiert sein.</para>
</listitem>
<listitem>
 <para>kexec und kdump sind deaktiviert.</para>
</listitem>
<listitem>
 <para>Der Ruhezustand (Suspend on Disk) ist deaktiviert.</para>
</listitem>
<listitem>
 <para>Der Zugriff auf <filename>/dev/kmem</filename> und <filename>/dev/mem</filename> ist nicht möglich, auch nicht als Root-Benutzer.
 </para>
</listitem>
<listitem>
 <para>Der Zugriff auf den E/A-Anschluss ist nicht möglich, auch nicht als Root-Benutzer. Alle X11-Grafiktreiber müssen einen Kerneltreiber verwenden.</para>
</listitem>
<listitem>
<para>Der PCI-BAR-Zugriff über sysfs ist nicht möglich.</para></listitem>
<listitem><para><literal>custom_method</literal> in ACPI ist nicht verfügbar.</para></listitem>
<listitem>
 <para>debugfs für das Modul asus-wmi ist nicht verfügbar.</para>
</listitem>
<listitem>
 <para>Der Parameter <literal>acpi_rsdp</literal> hat keine Auswirkungen auf den Kernel.</para>
</listitem>
</itemizedlist>
  

  </section>
 </section>
 <section xml:id="sec-uefi-moreinfo">
  <title>Weiterführende Informationen</title>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
<link xlink:href="http://www.uefi.org"/> – UEFI-Homepage mit den aktuellen UEFI-Spezifikationen.
    </para>
   </listitem>
   <listitem>
    <para>
     Blogeinträge von Olaf Kirch und Vojtěch Pavlík (das obige Kapitel ist stark auf diese Einträge gestützt):
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-plan/"/></para>
     </listitem>
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-overview/"/></para>
     </listitem>
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-details/"/></para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
<link xlink:href="http://en.opensuse.org/openSUSE:UEFI"/> – UEFI mit openSUSE.
    </para>
   </listitem>
  </itemizedlist>
 </section>

</chapter>
