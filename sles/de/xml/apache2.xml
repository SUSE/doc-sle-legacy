<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="apache2.xml" id="cha-apache2">
 <title>Der HTTP-Server Apache</title><indexterm class="startofrange" id="idx-apache2"> <primary>Apache</primary> </indexterm>
 <abstract>
  <para>
   Mit einem Marktanteil von mehr als 50 % ist der Apache HTTP-Server (Apache) laut einer <ulink url="http://www.netcraft.com/"/>-Umfrage im der weltweit am häufigsten eingesetzte Webserver. Der von Apache Software Foundation (<ulink url="http://www.apache.org/"/>) entwickelte Apache-Server läuft auf fast allen Betriebssystemen. <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> umfasst Apache, Version 2.2. In diesem Kapitel erfahren Sie, wie Apache installiert, konfiguriert und eingerichtet wird. Sie lernen SSL, CGI und weitere Module kennen und erfahren, wie Sie bei Problemen mit dem Webserver vorgehen.
  </para>
 </abstract>
 <sect1 id="sec-apache2-quickstart">
  <title>Kurzanleitung</title><indexterm> <primary>Apache</primary> <secondary>Schnelleinführung</secondary> </indexterm>

  <para>
   In diesem Abschnitt erfahren Sie, wie Sie Apache in kürzester Zeit installieren und einrichten. Zur Installation und Konfiguration von Apache müssen Sie als <systemitem class="username">root</systemitem>-Benutzer angemeldet sein.
  </para>

  <sect2 id="sec-apache-quickstart-requirements">
   <title>Anforderungen</title>
   <para>
    Vergewissern Sie sich, dass folgende Voraussetzungen erfüllt sind, bevor Sie den Apache-Webserver einrichten:
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      Das Netzwerk des Computers ist ordnungsgemäß konfiguriert. Weitere Informationen zu diesem Thema finden Sie unter <xref linkend="cha-basicnet"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Durch Synchronisierung mit einem Zeitserver ist sichergestellt, dass die Systemzeit des Computers genau ist. Die exakte Uhrzeit ist für Teile des HTTP-Protokolls nötig. Weitere Informationen zu diesem Thema finden Sie unter <xref linkend="cha-netz-xntp"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Die neuesten Sicherheitsaktualisierungen sind installiert. Falls Sie sich nicht sicher sind, führen Sie YaST-Online-Update aus.
     </para>
    </listitem>
    <listitem>
     <para>
      In der Firewall ist der Standardport des Webservers ( <literal>80</literal>) geöffnet. Lassen Sie dazu in SUSEFirewall2 den Service <guimenu>HTTP-Server</guimenu> in der externen Zone zu. Dies können Sie mithilfe von YaST erledigen. Weitere Informationen finden Sie in <xref linkend="sec-fire-SuSE-yast"/>.
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 id="sec-apache2-quickstart-installation">
   <title>Installation</title><indexterm> <primary>Apache</primary> <secondary>installieren</secondary> </indexterm>
   <para>
    Apache ist in der Standardinstallation von <phrase role="productname"> <phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> nicht enthalten. Zum Installieren von Apache mit einer vordefinierten Standardkonfiguration <quote/> gehen Sie wie folgt vor:
   </para>
   <procedure>
    <title>Installation von Apache mit der Standardkonfiguration</title>
    <step performance="required">
     <para>
      Starten Sie YaST, und wählen Sie <menuchoice> <guimenu>Software</guimenu> <guimenu>Software installieren oder löschen</guimenu> </menuchoice>.
     </para>
    </step>
    <step performance="required">
     <para>
      Wählen Sie <menuchoice><guimenu>Filter</guimenu> <guimenu>Schemata</guimenu></menuchoice> und dann <guimenu>Web and LAM Server</guimenu> in <guimenu>Serverfunktionen</guimenu> aus.
     </para>
    </step>
    <step performance="required">
     <para>
      Bestätigen Sie die Installation der abhängigen Pakete, um den Installationsvorgang abzuschließen.
     </para>
    </step>
   </procedure>
   <para>
    Hierzu zählt sowohl das Multiprocessing-Modul (MPM) <systemitem>apache2-prefork</systemitem> als auch das Modul PHP5. Weitere Informationen zu Modulen erhalten Sie unter <xref linkend="sec-apache2-modules"/>.
   </para>
  </sect2>

  <sect2 id="sect-apache-quickstart-start">
   <title>Start</title>
   <para>
    Sie können Apache automatisch beim Booten oder manuell starten.
   </para>
   <procedure>
    <title>Automatisches Starten von Apache</title>
    <step performance="required">
     <para>
      Um sicherzustellen, dass Apache beim Booten des Computers in den Runlevels <literal>3</literal> und <literal>5</literal> automatisch gestartet wird, führen Sie das folgende Kommando aus:
     </para>
<screen>chkconfig -a apache2</screen>
    </step>
    <step performance="required">
     <para>
      Sie können auch YaST starten und <menuchoice> <guimenu>System</guimenu> <guimenu>Systemdienste (Runlevel)</guimenu> </menuchoice> auswählen.
     </para>
    </step>
    <step performance="required">
     <para>
      Suchen Sie dann nach <emphasis>apache2</emphasis> und aktivieren Sie den Service. <guimenu/>
     </para>
     <para>
      Der Webserver wird sofort gestartet. 
     </para>
    </step>
    <step performance="required">
     <para>
      Speichern Sie die Änderungen mit <guimenu>Beenden</guimenu>.
     </para>
     <para>
      Das System ist so konfiguriert, dass Apache beim Booten des Computers automatisch in den Runlevels <literal>3</literal> und <literal>5</literal> gestartet wird.
     </para>
    </step>
   </procedure>
   <para>
    Weitere Informationen zu den Runlevels in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> und eine Beschreibung des YaST-Runlevel-Editors finden Sie in <xref linkend="sec-boot-runlevel-edit"/>.
   </para>
   <para>
    Über die Shell starten Sie Apache manuell mit dem Kommando <command>rcapache2 start</command>.
   </para>
   <procedure>
    <title>Überprüfen, ob Apache ausgeführt wird</title>
    <para>
     Werden beim Starten von Apache keine Fehlermeldungen angezeigt, bedeutet dies im Normalfall, dass der Webserver ausgeführt wird. So überprüfen Sie, ob Apache ausgeführt wird:
    </para>
    <step performance="required">
     <para>
      Starten Sie einen Webbrowser und öffnen Sie <ulink url="http://localhost/"/>. 
     </para>
     <para>
      Wenn Apache ausgeführt wird, wird eine Testseite mit der Meldung <quote>It works!</quote> angezeigt.
     </para>
    </step>
    <step performance="required">
     <para>
      Wenn diese Seite nicht angezeigt wird, lesen Sie den Abschnitt <xref linkend="sec-apache2-troubleeshooting"/>.
     </para>
    </step>
   </procedure>
   <para>
    Nachdem der Webserver nun läuft, können Sie eigene Dokumente hinzufügen, die Konfiguration an Ihre Anforderungen anpassen und weitere Module mit den benötigten Funktionen installieren.
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-configuration">
  <title>Konfigurieren von Apache</title><indexterm> <primary>Apache</primary> <secondary>konfigurieren</secondary> </indexterm>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet zwei Konfigurationsoptionen:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Bei der manuellen Konfiguration können Sie mehr Details einstellen, allerdings müssen Sie ohne den Komfort der Bedienoberfläche von YaST zurechtkommen.
  </para>

  <important>
   <title>Neuladen oder -starten von Apache nach Konfigurationsänderungen</title>
   <para>
    Damit Konfigurationsänderungen wirksam werden, ist in den meisten Fällen ein erneutes Laden (in einigen Fällen auch ein Neustart) von Apache erforderlich. Laden Sie Apache mit <command>rcapache2 <option>reload</option></command> neu oder verwenden Sie eine der in <xref linkend="sec-apache2-start-stop"/> beschriebenen Neustartoptionen.
   </para>
   <para>
    Wenn Sie Apache mit YaST konfigurieren, kann dieser Schritt automatisch ausgeführt werden. Stellen Sie dazu <guimenu>HTTP-Service</guimenu> auf <guimenu>Aktiviert</guimenu> ein, wie in <xref linkend="sec-apache2-configuration-yast-server-configuration"/> beschrieben.
   </para>
  </important>

  <sect2 id="sec-apache2-configuration-manually-configfiles">
   <title>Apache-Konfigurationsdateien</title><indexterm> <primary>Apache </primary> <secondary>konfigurieren </secondary> <tertiary>Dateien</tertiary> </indexterm>
   <para>
    Dieser Abschnitt enthält eine Übersicht über die Apache-Konfigurationsdateien. Wenn Sie die Konfiguration mit YaST vornehmen, müssen Sie diese Dateien nicht bearbeiten. Die Informationen können jedoch nützlich sein, wenn Sie später auf die manuelle Konfiguration umstellen möchten.
   </para>
   <para>
    Die Konfigurationsdateien von Apache befinden sich in zwei verschiedenen Verzeichnissen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> steuert einige globale Einstellungen von Apache, beispielsweise die zu ladenden Module, die einzuschließenden Konfigurationsdateien, die beim Serverstart zu verwendenden Flags sowie Flags, die der Kommandozeile hinzugefügt werden sollen. Die Konfigurationsoptionen dieser Datei sind hinreichend dokumentiert und werden daher an dieser Stelle nicht näher erläutert. Für die Konfigurationsanforderungen eines typischen Webservers dürften die Einstellungen der Datei <filename>/etc/sysconfig/apache2</filename> ausreichen.
    </para>
   </sect3>
   <sect3 id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> enthält alle Konfigurationsdateien für Apache. In diesem Abschnitt wird der Zweck jeder einzelnen Datei erklärt. Jede Datei enthält mehrere Konfigurationsoptionen (auch als <emphasis>Direktiven</emphasis> bezeichnet).  Die Konfigurationsoptionen dieser Dateien sind hinreichend dokumentiert und werden daher an dieser Stelle nicht näher erläutert.
    </para>
    <para>
     Die Apache-Konfigurationsdateien gliedern sich wie folgt:
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv 
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>Apache-Konfigurationsdateien in /etc/apache2/</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        In dieser Datei ist festgelegt, welche Zeichensätze für die verschiedenen Sprachen verwendet werden. Bearbeiten Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        Dies sind Konfigurationsdateien anderer Module. Bei Bedarf können die Konfigurationsdateien in Ihre virtuellen Hostkonfigurationen eingeschlossen werden. Beispiele finden Sie in <filename>vhosts.d/vhost.template. </filename> Sie können damit unterschiedliche Modulsätze für verschiedene virtuelle Hosts bereitstellen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Datei enthält eine globale Konfiguration für virtuelle Hosts mit vernünftigen Standardeinstellungen. Statt die Werte in dieser Datei zu ändern, sollten Sie sie in der virtuellen Hostkonfiguration überschreiben.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Datei legt fest, wie Apache auf Fehler reagiert. Wenn Sie die Meldungen für alle virtuellen Hosts ändern möchten, können Sie diese Datei bearbeiten. Anderenfalls sollten Sie die entsprechenden Direktiven in den virtuellen Hostkonfigurationen überschreiben.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        Dies ist die Hauptkonfigurationsdatei des Apache-Servers. Diese Datei sollten Sie nicht bearbeiten. Sie enthält in erster Linie Include-Anweisungen und globale Einstellungen. Globale Einstellungen können Sie in den entsprechenden in diesem Abschnitt aufgelisteten Konfigurationsdateien ändern. Host-spezifische Einstellungen wie DocumentRoot (absoluter Pfad) ändern Sie in der virtuellen Hostkonfiguration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Datei bindet Apache an bestimmte IP-Adressen und Ports. Außerdem konfiguriert diese Datei das namensbasierte virtuelle Hosting. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        Diese Datei enthält Daten für das Modul mime_magic, mit dessen Hilfe Apache den MIME-Typ unbekannter Dateien ermittelt. Ändern Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        Diese Datei enthält die dem System bekannten MIME-Typen (genau genommen ist diese Datei eine Verknüpfung mit <filename>/etc/mime.types</filename>). Bearbeiten Sie diese Datei nicht. MIME-Typen, die hier nicht aufgelistet sind, sollten Sie der Datei <filename>mod_mime-defaults.conf</filename> hinzufügen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        Dies sind die Konfigurationsdateien der in der Standardinstallation enthaltenen Module. Weitere Informationen hierzu erhalten Sie unter <xref linkend="sec-apache2-modules"/>. Die Konfigurationsdateien optionaler Module befinden sich im Verzeichnis <filename>conf.d</filename>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Datei enthält Konfigurationsdirektiven für verschiedene MPMs (siehe <xref linkend="sec-apache2-modules-mpm"/>) und allgemeine Konfigurationsoptionen, die sich auf die Leistung von Apache auswirken. Sie können diese Datei bearbeiten, sollten den Webserver anschließend aber gründlich testen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> und <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        Diese Dateien enthalten die globale SSL-Konfiguration und die SSL-Zertifikatdaten. Weitere Informationen hierzu erhalten Sie unter <xref linkend="sec-apache2-ssl"/>.  
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Konfigurationsdateien werden automatisch aus <filename>/etc/sysconfig/apache2</filename> generiert.  Ändern Sie diese Dateien nicht. Bearbeiten Sie stattdessen die Dateien unter <filename>/etc/sysconfig/apache2</filename>. Speichern Sie in diesem Verzeichnis keine anderen Konfigurationsdateien.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        Diese Datei gibt die Benutzer- und Gruppen-ID an, unter der Apache läuft. Ändern Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        In diesem Verzeichnis wird die virtuelle Host-Konfiguration gespeichert. Das Verzeichnis enthält Vorlagendateien für virtuelle Hosts mit und ohne SSL. Alle Dateien in diesem Verzeichnis mit der Erweiterung <filename>.conf</filename> sind automatisch Bestandteil der Apache-Konfiguration. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost"/>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-configuration-manually">
   <title>Manuelle Konfiguration von Apache</title><indexterm class="startofrange" id="idx-apache2-configuration-manually"> <primary>Apache </primary> <secondary>konfigurieren </secondary> <tertiary>manuell</tertiary> </indexterm>
   <para>
    Wenn Sie den Apache-Webserver manuell konfigurieren möchten, müssen Sie die Klartext-Konfigurationsdateien als <systemitem class="username">root</systemitem>-Benutzer bearbeiten.
   </para>
   <sect3 id="sec-apache2-configuration-manually-vhost">
    <title>Virtuelle Hostkonfiguration</title><indexterm> <primary>Apache</primary> <secondary>konfigurieren</secondary> <tertiary>virtueller Host</tertiary> </indexterm>
    <para>
     <emphasis>Virtueller Host</emphasis> bezieht sich auf die Fähigkeit von Apache, mehrere URI (Universal Resource Identifiers) vom gleichen physischen Computer aus bedienen zu können. In anderen Worten: Mehrere Domänen wie www.beispiel.com und www.beispiel.net können von einem einzigen Webserver auf einem physischen Computer ausgeführt werden.
    </para>
    <para>
     Virtuelle Hosts werden häufig eingesetzt, um Verwaltungsaufwand (nur ein Webserver muss verwaltet werden) und Hardware-Kosten (für die einzelnen Domänen ist kein dedizierter Server erforderlich) zu sparen. Virtuelle Hosts können auf Namen, IP-Adressen oder Ports basieren.
    </para>
    <para>
     Verwenden Sie zum Auflisten aller vorhandenen virtuellen Hosts das Kommando <command>httpd2 <option>-S</option></command>. Dadurch wird eine Liste mit dem Standardserver und allen virtuellen Hosts zusammen mit deren IP-Adressen und überwachenden Ports ausgegeben. Zusätzlich enthält die Liste einen Eintrag für jeden virtuellen Host mit dessen Speicherort in den Konfigurationsdateien.
    </para>
    <para>
     Virtuelle Hosts können mit YaST (siehe <xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>) oder manuell durch Bearbeitung einer Konfigurationsdatei konfiguriert werden. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist Apache unter <filename>/etc/apache2/vhosts.d/</filename>  standardmäßig für eine Konfigurationsdatei pro virtuellen Host vorbereitet. Alle Dateien in diesem Verzeichnis mit der Erweiterung <filename>.conf</filename> sind automatisch Bestandteil der Konfiguration. Außerdem enthält dieses Verzeichnis eine grundlegende Vorlage für virtuelle Hosts (<filename>vhost.template</filename> bzw. <filename>vhost-ssl.template</filename> für einen virtuellen Host mit SSL-Unterstützung).
    </para>
    <tip>
     <title>Erstellen Sie immer eine virtuelle Hostkonfiguration.</title>
     <para>
      Es empfiehlt sich, immer eine virtuelle Hostkonfiguration zu erstellen, selbst dann, wenn der Webserver nur eine Domäne enthält. Dadurch fassen Sie nicht nur die gesamte domänenspezifische Konfiguration in einer einzigen Datei zusammen, sondern Sie können auch jederzeit auf eine funktionierende Basiskonfiguration zurückgreifen, indem Sie einfach die Konfigurationsdatei des virtuellen Hosts verschieben, löschen oder umbenennen. Aus dem gleichen Grund sollten Sie auch für jeden virtuellen Host eine eigene Konfigurationsdatei erstellen.
     </para>
     <para>
      Bei der Verwendung von namenbasierten virtuellen Hosts empfiehlt es sich, eine Standardkonfiguration einzurichten, die verwendet wird, wenn ein Domänenname nicht mit einer virtuellen Hostkonfiguration übereinstimmt. Der virtuelle Standardhost ist der Host, dessen Konfiguration zuerst geladen wird. Da die Reihenfolge der Konfigurationsdateien durch den Dateinamen bestimmt wird, starten Sie den Dateinamen der Konfiguration des virtuellen Standardhosts mit einem Unterstrich <literal>_</literal>, um sicherzustellen, dass sie zuerst geladen wird (z. B. <filename>_default_vhost.conf</filename>).
     </para>
    </tip>
    <para>
     Der <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem>-Block enthält die Informationen zu einer bestimmten Domäne. Wenn Apache eine Client-Anforderung für einen definierten virtuellen Host empfängt, verwendet es die in diesem Block angegebenen Direktiven. Nahezu alle Direktiven können auch im Kontext eines virtuellen Hosts verwendet werden. Weitere Informationen zu den Konfigurationsdirektiven von Apache finden Sie unter <ulink url="http://httpd.apache.org/docs/2.2/mod/quickreference.html"/>.
    </para>
    <sect4 id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>Namensbasierte virtuelle Hosts</title>
     <para>
      Namensbasierte virtuelle Hosts können an jeder IP-Adresse mehrere Websites bedienen. Apache verwendet das Hostfeld in dem vom Client übersandten HTTP-Header, um die Anforderung mit einem übereinstimmenden  <systemitem>ServerName</systemitem>-Eintrag der virtuellen Hostdeklarationen zu verbinden. Wird kein übereinstimmender <systemitem>ServerName</systemitem> gefunden, dann wird der erste angegebene virtuelle Host als Standard verwendet.
     </para>
     <para>
      Die Direktive <systemitem>NameVirtualHost</systemitem> teilt Apache mit, welche IP-Adresse (und optional welcher Port) auf Client-Anforderungen mit dem Domänennamen im HTTP-Header überwacht werden soll. Diese Option wird in der Konfigurationsdatei <filename>/etc/apache2/listen.conf</filename> konfiguriert.
     </para>
     <para>
      Als erstes Argument kann der vollständig qualifizierte Domänenname eingegeben werden – empfohlen wird aber die IP-Adresse. Das zweite, optionale Argument ist der Port. Dieser ist standardmäßig Port <systemitem>80</systemitem> und wird mit der  <systemitem>Listen</systemitem>-Direktive konfiguriert.
     </para>
     <para>
      Sowohl für die IP-Adresse als auch für die Portnummer kann ein Platzhalterzeichen (<literal>*</literal>) eingegeben werden. In diesem Fall werden die Anforderungen an allen Schnittstellen empfangen. IPv6-Adressen müssen in eckigen Klammern eingeschlossen sein.
     </para>
     <example id="ex-apache2-virtual-hosts-name-based">
      <title>Beispiele für namensbasierte <systemitem>VirtualHost</systemitem>-Einträge</title>
<screen># NameVirtualHost <replaceable>IP-address</replaceable><replaceable>[:Port]</replaceable>
NameVirtualHost 192.168.3.100:80
NameVirtualHost 192.168.3.100
NameVirtualHost *:80
NameVirtualHost *
NameVirtualHost [2002:c0a8:364::]:80</screen>
     </example>
     <para>
      In einer namensbasierten virtuellen Hostkonfiguration übernimmt das <systemitem>VirtualHost</systemitem>-Anfangstag die zuvor unter <systemitem>NameVirtualHost</systemitem> deklarierte IP-Adresse (bzw. den vollständig qualifizierten Domänennamen) als Argument. Eine mit der <systemitem>NameVirtualHost</systemitem>-Direktive deklarierte Portnummer ist optional.
     </para>
     <para>
      Anstelle der IP-Adresse wird auch ein Platzhalterzeichen (<emphasis>*</emphasis>) akzeptiert. Diese Syntax ist allerdings nur in Verbindung mit einem Platzhalter in <systemitem>NameVirtualHost *</systemitem> zulässig. IPv6-Adressen müssen in eckige Klammern eingeschlossen werden.
     </para>
     <example id="ex-apache-directives-virtualhost-name-based">
      <title>Namensbasierte <systemitem>VirtualHost</systemitem>-Direktiven</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>IP-basierte virtuelle Hosts</title>
     <para>
      Bei dieser alternativen virtuellen Hostkonfiguration werden auf einem Computer mehrere IPs eingerichtet. Auf einer Apache-Instanz befinden sich mehrere Domänen, denen jeweils eine eigene IP zugewiesen ist.
     </para>
     <para>
      Auf dem physischen Server muss für jeden IP-basierten virtuellen Host eine eigene IP-Adresse eingerichtet sein. Falls der Computer nicht über die entsprechende Anzahl an Netzwerkkarten verfügt, können auch virtuelle Netzwerkschnittstellen verwendet werden (IP-Aliasing).
     </para>
     <para>
      Das folgende Beispiel zeigt Apache auf einem Computer mit der IP  <systemitem class="ipaddress">192.168.3.100 </systemitem>, auf dem sich zwei Domänen mit den zusätzlichen IPs  <systemitem class="ipaddress">192.168.3.101 </systemitem> und  <systemitem class="ipaddress">192.168.3.102 </systemitem> befinden. Für jeden virtuellen Server wird ein eigener <systemitem>VirtualHost</systemitem>-Block benötigt.
     </para>
     <example id="ex-apache-directives-virtualhost-ip-based">
      <title>IP-basierte <systemitem>VirtualHost</systemitem>-Direktiven</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      In diesem Beispiel sind nur für die beiden zusätzlichen IP-Adressen (also nicht für  <systemitem>192.168.3.100 </systemitem>)  <systemitem>VirtualHost </systemitem>-Direktiven angegeben. Sollte für <systemitem>192.168.3.100</systemitem> auch eine <systemitem>Listen</systemitem>-Direktive konfiguriert sein, müsste ein eigener IP-basierter Host für die HTTP-Anforderungen an diese Schnittstelle eingerichtet werden. Anderenfalls fänden die Direktiven aus der Standardserverkonfiguration (<filename>/etc/apache2/default-server.conf</filename>) Anwendung.
     </para>
    </sect4>
    <sect4 id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>Basiskonfiguration eines virtuellen Hosts</title>
     <para>
      Die Konfiguration eines virtuellen Hosts sollte mindestens die folgenden Direktiven enthalten. Weitere Optionen finden Sie in <filename>/etc/apache2/vhosts.d/vhost.template</filename>.
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         Der vollständig qualifizierte Domänenname, unter dem der Host angesprochen wird.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         Der absolute Pfad des Verzeichnisses, aus dem Apache die Dateien für diesen Host bedient. Aus Sicherheitsgründen ist standardmäßig auf das gesamte Dateisystem kein Zugriff möglich. Sie müssen dieses Verzeichnis daher explizit innerhalb eines <systemitem>Directory</systemitem>-Containers entsperren.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         Hier geben Sie die E-Mail-Adresse des Serveradministrators ein. Diese Adresse ist beispielsweise auf den von Apache erstellten Fehlerseiten angegeben.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         Das Fehlerprotokoll dieses virtuellen Hosts. Ein eigenes Fehlerprotokoll für jeden virtuellen Host ist zwar nicht zwingend erforderlich, jedoch durchaus üblich, da dies die Fehlersuche erleichtert. <filename>/var/log/apache2/</filename> ist das Standardverzeichnis für die Protokolldateien von Apache.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         Das Zugriffsprotokoll dieses virtuellen Hosts. Ein eigenes Zugriffsprotokoll für jeden virtuellen Host ist zwar nicht zwingend erforderlich, jedoch durchaus üblich, da dies die separate Analyse der Zugriffsdaten für jeden einzelnen Host ermöglicht. <filename>/var/log/apache2/</filename> ist das Standardverzeichnis für die Protokolldateien von Apache.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Wie bereits erwähnt, ist standardmäßig auf das gesamte Dateisystem kein Zugriff möglich. Die Verzeichnisse, in die Sie die Dateien gestellt haben, mit denen Apache arbeiten soll – zum Beispiel das Verzeichnis <systemitem>DocumentRoot</systemitem> –, müssen daher explizit entsperrt werden:
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Order allow,deny
  Allow from all
&lt;/Directory&gt;</screen>
     <para>
      Die vollständige Basiskonfiguration eines virtuellen Hosts sieht wie folgt aus:
     </para>
     <example id="ex-apache-directives-virtualhost-basic-configuration">
      <title>Basiskonfiguration <systemitem>eines virtuellen Hosts</systemitem></title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
    Order allow,deny
    Allow from all
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example><indexterm class="endofrange" startref="idx-apache2-configuration-manually"/>
    </sect4>
   </sect3>
  </sect2>



  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apache2_yast_i.xml" parse="xml"/>


 </sect1>
 <sect1 id="sec-apache2-start-stop">
  <title>Starten und Beenden von Apache</title><indexterm> <primary>Apache</primary> <secondary>Starten</secondary> </indexterm> <indexterm> <primary>Apache</primary> <secondary>Stoppen</secondary> </indexterm>

  <para>
   Bei Konfiguration mit YaST, wie in <xref linkend="sec-apache2-configuration-yast"/> beschrieben, wird Apache beim Booten des Computers in den Runlevels 3 und 5 gestartet und in den Runlevels 0, 1, 2 und 6 beendet. Diese Funktionsweise können Sie mit dem Runlevel-Editor von YaST oder dem Kommandozeilenwerkzeug <command>chkconfig</command> ändern.
  </para>

  <para>
   Verwenden Sie zum Starten, Stoppen und Bearbeiten von Apache auf einem laufenden System das init-Skript <command>/usr/sbin/rcapache2</command>. Allgemeine Informationen über Init-Skripte finden Sie unter <xref linkend="sec-boot-init-skripte"/>. Der Befehl <command>rcapache2</command> akzeptiert folgende Parameter:
  </para>

  <variablelist>
   <varlistentry>
    <term><option>status</option>
    </term>
    <listitem>
     <para>
      Überprüft, ob Apache gestartet wurde.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>start</option>
    </term>
    <listitem>
     <para>
      Startet Apache, sofern es noch nicht läuft.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>startssl</option>
    </term>
    <listitem>
     <para>
      Startet Apache mit SSL-Unterstützung, sofern es noch nicht läuft. Weitere Informationen zu der SSL-Unterstützung finden Sie unter <xref linkend="sec-apache2-ssl"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop</option>
    </term>
    <listitem>
     <para>
      Stoppt Apache durch Beenden des übergeordneten Prozesses.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart</option>
    </term>
    <listitem>
     <para>
      Beendet Apache und startet es danach neu. Falls der Webserver noch nicht gelaufen ist, wird er nun gestartet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>try-restart</option>
    </term>
    <listitem>
     <para>
      Stoppt Apache und startet es erneut, vorausgesetzt, es wird bereits ausgeführt.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>reload</option> oder <option>graceful</option>
    </term>
    <listitem>
     <para>
      Beendet den Webserver erst, nachdem alle durch Forking erstellten Apache-Prozesse aufgefordert wurden, ihre Anforderungen vor dem Herunterfahren zu Ende zu führen. Anstelle der beendeten Prozesse werden neue Prozesse gestartet. Dies führt zu einem vollständigen <quote>Neustart</quote> von Apache.
     </para>
     <tip>
      <title>Neustart von Apache in Produktionsumgebungen</title>
      <para>
       Mit dem Kommando <command>rcapache2 <option>reload</option></command> aktivieren Sie Änderungen in der Apache-Konfiguration ohne Verbindungsunterbrechungen.
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart-graceful</option>
    </term>
    <listitem>
     <para>
      Startet einen zweiten Webserver, der sofort alle eingehenden Anforderungen verarbeitet. Die vorherige Instanz des Webservers wickelt weiterhin alle bestehenden Anforderungen für eine Zeitdauer ab, die mit <systemitem>GracefulShutdownTimeout</systemitem> definiert wurde.
     </para>
     <para>
      <command>rcapache2 <option>restart-graceful</option></command> ist beim Upgrade auf eine neue Version oder nach dem Ändern von Konfigurationsoptionen nützlich, die einen Neustart erfordern. Die Verwendung dieser Option sorgt für eine minimale Serverabschaltdauer.
     </para>
     <para>
      <systemitem>GracefulShutdownTimeout</systemitem> muss festgelegt werden, andernfalls veranlasst <option>restart-graceful</option> einen regulären Neustart. Bei der Einstellung auf null wartet der Server auf unbestimmte Zeit, bis alle verbleibenden Anforderungen vollständig verarbeitet sind.
     </para>
     <para>
      Ein ordnungsgemäßer Start kann fehlschlagen, wenn die originale Apache-Instanz nicht alle nötigen Ressourcen löschen kann. In diesem Fall veranlasst das Kommando einen ordnungsgemäßen Stopp.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop-graceful</option>
    </term>
    <listitem>
     <para>
      Hält den Webserver nach einer Zeitdauer an, die mit <systemitem>GracefulShutdownTimeout</systemitem> konfiguriert wurde, um sicherzustellen, dass die bestehenden Anforderungen abgeschlossen werden können.
     </para>
     <para>
      <systemitem>GracefulShutdownTimeout</systemitem> muss festgelegt sein, andernfalls verursacht <option>stop-graceful</option> einen ordnungsgemäßen Neustart. Bei der Einstellung auf null wartet der Server auf unbestimmte Zeit, bis alle verbleibenden Anforderungen vollständig verarbeitet sind.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>configtest</option> oder <option>extreme-configtest</option>
    </term>
    <listitem>
     <para>
      Überprüft die Syntax der Konfigurationsdateien, ohne den laufenden Webserver zu beeinträchtigen. Da dieser Test beim Starten, Neuladen oder Neustarten des Servers automatisch durchgeführt wird, ist eine explizite Ausführung des Tests in der Regel nicht notwendig (bei einem Konfigurationsfehler wird der Webserver ohnehin nicht gestartet, neu geladen oder neu gestartet). Mithilfe der Option <option>extreme-configtest</option> wird der Webserver unter dem Benutzernamen <systemitem class="username">nobody</systemitem> gestartet und die Konfiguration wird geladen, sodass mehr Fehler gefunden werden können. Beachten Sie, dass die SSL-Einrichtung nicht getestet werden kann, obwohl die Konfiguration geladen wurde, da SSL-Zertifikate nicht von <systemitem class="username">nobody</systemitem> gelesen werden können.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>probe</option>
    </term>
    <listitem>
     <para>
      Überprüft, ob ein Neuladen des Webservers erforderlich ist (d. h., ob sich die Konfiguration geändert hat), und schlägt die erforderlichen Argumente für den Befehl <command>rcapache2</command> vor.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>server-status und full-server-status</option>
    </term>
    <listitem>
     <para>
      Erstellt einen Dump des kurzen oder vollständigen Statusfensters. lynx oder w3m muss installiert und das <systemitem>mod_status</systemitem>-Modul muss aktiviert sein. Außerdem muss <filename>/etc/sysconfig/apache2</filename> unter <systemitem>APACHE_SERVER_FLAGS</systemitem> das Flag <literal>status</literal> enthalten.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>Weitere Flags</title>
   <para>
    Weitere Flags, die Sie mit dem Befehl <command>rcapache2</command> angeben, werden direkt an den Webserver weitergeleitet.
   </para>
  </tip>
 </sect1>
 <sect1 id="sec-apache2-modules">
  <title>Installieren, Aktivieren und Konfigurieren von Modulen</title><indexterm class="startofrange" id="idx-apache2-modules"> <primary>Apache</primary> <secondary>Module</secondary> </indexterm>

  <para>
   Die Apache-Software ist modular aufgebaut. Alle Funktionen außer einigen Kernaufgaben werden von Modulen durchgeführt Dies geht sogar so weit, dass selbst HTTP durch ein Modul verarbeitet wird (http_core).
  </para>

  <para>
   Apache-Module können bei der Entwicklung in die Apache-Binaries kompiliert oder während der Laufzeit dynamisch geladen werden. Informationen zum dynamischen Laden von Modulen erhalten Sie unter <xref linkend="sec-apache2-modules-activating"/>.
  </para>

  <para>
   Apache-Module lassen sich in vier Kategorien einteilen:
  </para>

  <variablelist>
   <varlistentry>
    <term>Basismodule</term>
    <listitem>
     <para>
      Basismodule sind standardmäßig in Apache enthalten. In Apache in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind nur <systemitem>mod_so</systemitem> (zum Laden anderer Module) und <systemitem>http_core</systemitem> kompiliert. Alle anderen Module sind als gemeinsam genutzte Objekte verfügbar: Sie sind nicht in der Server-Binärdatei enthalten, sondern können zur Laufzeit eingebunden werden.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Erweiterungsmodule</term>
    <listitem>
     <para>
      Im Allgemeinen sind Erweiterungsmodule im Apache-Softwarepaket enthalten, jedoch nicht statisch im Server kompiliert. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> stehen diese Module als gemeinsame Objekte zur Verfügung, die während der Laufzeit in Apache geladen werden können.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Externe Module</term>
    <listitem>
     <para>
      Externe Module sind nicht in der offiziellen Apache-Distribution enthalten. <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> umfasst jedoch mehrere Module.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Multiprocessing-Module (MPMs)</term>
    <listitem>
     <para>
      Multiprocessing-Module (MPMs) sind dafür verantwortlich, Anforderungen an den Webserver anzunehmen und zu verarbeiten, und stellen damit das Kernstück der Webserver-Software dar.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 id="sec-apache2-modules-installing">
   <title>Installieren von Modulen</title><indexterm> <primary>Apache </primary> <secondary>Module </secondary> <tertiary>installieren</tertiary> </indexterm>
   <para>
    Wenn Sie die in <xref linkend="sec-apache2-quickstart-installation"/> beschriebene Standardinstallation vorgenommen haben, sind folgende Module bereits installiert: alle Basis- und Erweiterungsmodule, das Multiprocessing-Modul Prefork MPM sowie die externen Module <systemitem>mod_php5</systemitem> und <systemitem>mod_python</systemitem>.
   </para>
   <para>
    In YaST können Sie weitere externe Module installieren. Starten Sie dazu YaST und wählen Sie <menuchoice><guimenu>Software</guimenu><guimenu>Software-Management</guimenu></menuchoice>. Wählen Sie danach <menuchoice><guimenu>Filter</guimenu> <guimenu>Suche</guimenu></menuchoice> und suchen Sie nach <emphasis>apache</emphasis>.  Die Ergebnisliste zeigt nun neben anderen Paketen alle verfügbaren externen Apache-Module an.
   </para>
  </sect2>

  <sect2 id="sec-apache2-modules-activating">
   <title>Aktivieren und Deaktivieren von Modulen</title>
   <para>
    Sie können bestimmte Module entweder manuell oder mit YaST aktivieren oder deaktivieren. In YaST müssen die Skriptsprachmodule (PHP5, Perl und Python) mit der im Abschnitt <xref linkend="sec-apache2-configuration-yast-wizard"/> beschriebenen Modulkonfiguration aktiviert oder deaktiviert werden. Alle anderen Module werden, wie im Abschnitt <xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/> beschrieben, aktiviert oder deaktiviert.
   </para>
   <para>
    Manuell können Sie die Module mit den Befehlen <command>a2enmod <replaceable>mod_foo</replaceable></command> oder <command>a2dismod</command> <replaceable>mod_foo</replaceable> aktivieren bzw. deaktivieren. <command>a2enmod -l</command> gibt eine Liste aller zurzeit aktiven Module aus.
   </para>
   <important>
    <title>Einschließen der Konfigurationsdateien externer Module</title>
    <para>
     Wenn Sie externe Module manuell aktivieren, müssen Sie sicherstellen, dass auch ihre Konfigurationsdateien in allen virtuellen Hostkonfigurationen geladen werden. Die Konfigurationsdateien externer Module befinden sich im Verzeichnis <filename>/etc/apache2/conf.d/</filename> und werden standardmäßig nicht geladen. Wenn Sie auf allen virtuellen Hosts die gleichen Module benötigen, können Sie die Konfigurationsdateien aus diesem Verzeichnis mit <filename>*.conf</filename> einschließen. Anderenfalls müssen Sie die Dateien einzeln einschließen. Beispiele hierzu finden Sie in der Datei <filename>/etc/apache2/vhosts.d/vhost.template</filename>.
    </para>
   </important>
  </sect2>

  <sect2 id="sec-apache2-modules-base-extension">
   <title>Basis- und Erweiterungsmodule</title><indexterm> <primary>Apache </primary> <secondary>Module </secondary> <tertiary>verfügbar</tertiary> </indexterm>
   <para>
    Alle Basis- und Erweiterungsmodule werden ausführlich in der Apache-Dokumentation beschrieben. An dieser Stelle gehen wir daher nur kurz auf die wichtigsten Module ein. Informationen zu den einzelnen Modulen erhalten Sie auch unter <ulink url="http://httpd.apache.org/docs/2.2/mod/">http://httpd.apache.org/docs/2.2/mod/</ulink>.
   </para>
   
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       Bietet Methoden zur Ausführung eines Skripts, wenn ein bestimmter MIME-Typ (z. B. <systemitem>application/pdf</systemitem>), eine Datei mit einer bestimmten Erweiterung (z. B. <filename>.rpm</filename>) oder eine bestimmte Anforderungsmethode (z. B. <systemitem>GET</systemitem>) verlangt wird.  Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul stellt die Direktiven <systemitem>Alias</systemitem> und <systemitem>Redirect</systemitem> bereit. Damit können Sie eine URI einem bestimmten Verzeichnis zuordnen (<systemitem>Alias</systemitem>) bzw. eine angeforderte URL umleiten. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       Die Authentifizierungsmodule bieten verschiedene Methoden zur Authentifizierung: Basisauthentifizierung mit <systemitem>mod_auth_basic</systemitem> oder Digest-Authentifizierung mit <systemitem>mod_auth_digest</systemitem>. Die Digest-Authentifizierung in Apache 2.2 befindet sich noch im Versuchsstadium.
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> und <systemitem>mod_auth_digest</systemitem> funktionieren nur gemeinsam mit dem Authentifizierungsanbietermodul <systemitem>mod_authn_*</systemitem> (z. B. <systemitem>mod_authn_file</systemitem> für die Authentifizierung auf Basis einer Textdatei) und mit dem Autorisierungsmodul <systemitem>mod_authz_*</systemitem> (z. B. <systemitem>mod_authz_user</systemitem> für die Benutzerautorisierung).
      </para>
      <para>
       Weitere Informationen zu diesem Thema erhalten Sie im Artikel <citetitle>Gewusst wie: Authentifizierung</citetitle> unter <ulink url="http://httpd.apache.org/docs/2.2/howto/auth.html"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       Wenn keine Indexdatei vorhanden ist (z. B. <filename>index.html</filename>), generiert mod_autoindex Verzeichnislisten. Das Aussehen dieser Indizes kann konfiguriert werden. Dieses Modul ist standardmäßig aktiviert. Allerdings sind Verzeichnislisten durch die <systemitem>Options</systemitem>-Direktive standardmäßig deaktiviert – Sie müssen diese Einstellung daher in Ihrer virtuellen Hostkonfiguration ändern. Die Standardkonfigurationsdatei dieses Moduls befindet sich unter <filename>/etc/apache2/</filename> und heißt mod_autoindex-defaults.conf.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_cgi</systemitem> wird zur Ausführung von CGI-Skripten benötigt. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       Mit diesem Modul kann Apache so konfiguriert werden, dass bestimmte Dateitypen automatisch vor der Bereitstellung komprimiert werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem/>mod_dir stellt die <systemitem>DirectoryIndex</systemitem>-Direktive bereit, mit der Sie festlegen können, welche Dateien bei Anforderung eines Verzeichnisses automatisch zurückgegeben werden (standardmäßig <filename>index.html)</filename>. Außerdem leitet dieses Modul automatisch zur korrekten URI um, wenn in einer Verzeichnisanforderung der nachgestellte Schrägstrich fehlt. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       Steuert die Umgebungsvariablen, die an CGI-Skripten oder SSI-Seiten übergeben werden. Sie können Umgebungsvariablen festlegen oder aufheben oder von der Shell übergeben, die den httpd-Prozess aufgerufen hat. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       Mit <systemitem>mod_expires</systemitem> legen Sie fest, wie häufig Ihre Dokumente über Proxy- und Browser-Caches durch Zustellung eines <systemitem>Expires</systemitem>-Header aktualisiert werden. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem> ermöglicht die Verwendung von serverseitigen Includes (SSI), die die grundlegende Funktionalität für die dynamische Generierung von HTML-Seiten bereitstellen. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul stellt unter http://localhost/server-info/ eine umfassende Übersicht über die Serverkonfiguration bereit. Aus Sicherheitsgründen sollte der Zugriff auf diese URL generell eingeschränkt sein. Standardmäßig erhält nur <systemitem class="domainname">localhost</systemitem> Zugriff auf diese URL. <systemitem>mod_info</systemitem> wird in der Datei <filename>/etc/apache2/mod_info.conf</filename> konfiguriert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       Mit diesem Modul konfigurieren Sie den Aufbau der Apache-Protokolldateien. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       Das MIME-Modul sorgt dafür, dass eine Datei auf Basis seiner Dateinamenerweiterung mit dem korrekten MIME-Header bereitgestellt wird (z. B. <systemitem>text/html</systemitem> für HTML-Dokumente). Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul ist für die Inhaltsverhandlung erforderlich. Weitere Informationen erhalten Sie unter <ulink url="http://httpd.apache.org/docs/2.2/content-negotiation.html">http://httpd.apache.org/docs/2.2/content-negotiation.html</ulink>. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_nss</systemitem>
     </term>
     <listitem>
      <para>
       Ermöglicht verschlüsselte Verbindungen zwischen Webserver und Clients über die Protokolle TLS 1.1 und TLS 1.2 anhand der Mozilla Network Security Services-Bibliothek. Weitere Informationen finden Sie im <xref linkend="sec-apache2-nss"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul stellt die gleiche Funktionalität wie <systemitem>mod_alias</systemitem> bereit, bietet aber mehr Funktionen und ist somit flexibler. Mit <systemitem>mod_rewrite</systemitem> können Sie URLs auf Basis verschiedener Regeln umleiten, Header anfordern und einiges mehr.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       Legt Umgebungsvariablen auf der Basis von Details aus der Client-Anforderung fest, z. B. die Browserzeichenfolge, die der Client sendet, oder die IP-Adresse des Clients.  Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_speling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_speling</systemitem> versucht, typografische Fehler in URLs, beispielsweise die Groß-/Kleinschreibung, automatisch zu korrigieren.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul ermöglicht verschlüsselte Verbindungen zwischen dem Webserver und den Clients. Weitere Informationen finden Sie in <xref linkend="sec-apache2-ssl"/>. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul stellt unter http://localhost/server-status/ Informationen über die Aktivität und Leistung des Servers bereit. Aus Sicherheitsgründen sollte der Zugriff auf diese URL generell eingeschränkt sein. Standardmäßig erhält nur <systemitem class="domainname">localhost</systemitem> Zugriff auf diese URL. <systemitem>mod_status</systemitem> wird in der Datei <filename>/etc/apache2/mod_status.conf</filename> konfiguriert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem> ermöglicht die Ausführung von CGI-Skripten unter einem anderen Benutzer oder einer anderen Gruppe. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       Dieses Modul ermöglicht benutzerspezifische Verzeichnisse unter <filename>~<replaceable>user</replaceable>/</filename>. In der Konfiguration muss die <systemitem>UserDir</systemitem>-Direktive angegeben sein. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-modules-mpm">
   <title>Multiprocessing-Module</title><indexterm> <primary>Apache </primary> <secondary>Module </secondary> <tertiary>Multiprocessing</tertiary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet zwei Multiprocessing-Module (MPMs) für Apache:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-modules-mpm-prefork">
    <title>Prefork-MPM</title>
    <para>
     Das Prefork-MPM implementiert einen Prefork-Webserver, der keine Threads verwendet. Mit diesem Modul verhält sich der Webserver, was die Handhabung von Anforderungen betrifft, ähnlich wie Apache Version 1.x: Er isoliert jede einzelne Anforderung und verarbeitet sie in einem separaten untergeordneten Prozess (Forking). Eine Beeinträchtigung aller Anforderungen durch wenige problematische Anforderungen und somit eine Sperre des Webservers lassen sich dadurch vermeiden.
    </para>
    <para>
     Die prozessbasierte Vorgehensweise des Prefork-MPM bietet zwar Stabilität, konsumiert aber mehr Systemressourcen wie das Worker-MPM. Für UNIX-basierte Betriebssysteme gilt das Prefork-MPM als Standard-MPM.
    </para>
    <important>
     <title>MPMs in diesem Dokument</title>
     <para>
      In diesem Dokument wird davon ausgegangen, dass Apache mit dem Prefork-MPM verwendet wird.
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-modules-mpm-worker">
    <title>Worker-MPM</title>
    <para>
     Das Worker-MPM implementiert einen Multithread-Webserver. Ein Thread ist die <quote>Lightweight-Version</quote> eines Prozesses. Der Vorteil von Threads gegenüber Prozessen ist deren geringerer Ressourcenkonsum. Anstatt lediglich untergeordnete Prozesse zu erstellen (Forking), verarbeitet das Worker-MPM Anforderungen durch Threads mit Serverprozessen. Die untergeordneten Prefork-Prozesse sind auf mehrere Threads verteilt (Multithreading). Diese Ansatzweise macht den Apache-Server durch den geringeren Ressourcenkonsum leistungsfähiger als mit dem Prefork-MPM.
    </para>
    <para>
     Ein Hauptnachteil ist die Instabilität des Worker-MPM: Ein fehlerhafter Thread kann sich auf alle Threads eines Prozesses auswirken. Im schlimmsten Fall fällt der Server dadurch aus. Besonders bei gleichzeitiger Verwendung des Common Gateway Interface (CGI) auf einem überlasteten Apache-Server kann es zu internen Serverfehlern kommen, da Threads in diesem Fall unter Umständen nicht in der Lage sind, mit den Systemressourcen zu kommunizieren. Gegen die Verwendung des Worker-MPM in Apache spricht auch die Tatsache, dass nicht alle verfügbaren Apache-Module Thread-sicher sind und daher nicht in Verbindung mit dem Worker-MPM eingesetzt werden können.
    </para>
    <warning>
     <title>Verwendung von PHP-Modulen mit MPMs</title>
     <para>
      Nicht alle verfügbaren PHP-Module sind Thread-sicher. Von einer Verwendung des Worker-MPM in Verbindung mit <systemitem>mod_php</systemitem> wird daher abgeraten.
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-modules-external">
   <title>Externe Module</title><indexterm> <primary>Apache </primary> <secondary>Module </secondary> <tertiary>externe</tertiary> </indexterm>
   <para>
    Nachfolgend finden Sie eine Liste aller externen Module, die mit <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ausgeliefert werden. 
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       Unterstützt Apache bei der AppArmor-Einschränkung auf einzelne cgi-Skripte, die von Modulen wie <systemitem>mod_php5</systemitem> und <systemitem>mod_perl</systemitem> benutzt werden.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_apparmor</systemitem> </member> <member>Weitere Informationen: <xref linkend="part-aaa"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_auth_kerb</systemitem> bietet die Kerberos-Authentifizierung beim Apache-Webserver.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_auth_kerb</systemitem> </member> <member>Weitere Informationen: <ulink url="http://modauthkerb.sourceforge.net/configure.html"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       Mithilfe von <systemitem>mod_mono</systemitem> können Sie ASP.NET-Seiten auf Ihrem Server ausführen.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_mono</systemitem> </member> <member> Konfigurationsdatei: <filename>/etc/apache2/conf.d/mod_mono.conf</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_perl ermöglicht die Ausführung von Perl-Skripten in einem eingebetteten Interpreter. </systemitem> Durch den dauerhaften, im Server eingebetteten Interpreter lassen sich Verzögerungen durch den Start eines externen Interpreters und den Start von Perl vermeiden.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_perl</systemitem> </member> <member>Konfigurationsdatei: <filename>/etc/apache2/conf.d/mod_perl.conf</filename> </member> <member> Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_perl</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHP ist eine serverseitige, plattformübergreifende, in HTML eingebettete Skriptsprache.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_php5</systemitem> </member> <member>Konfigurationsdatei: <filename>/etc/apache2/conf.d/php5.conf</filename> </member> <member> Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_php5</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> bettet Python in den Apache-Webserver ein. Dies bringt Ihnen einen erheblichen Leistungsgewinn und zusätzliche Flexibilität bei der Entwicklung webbasierter Anwendungen.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_python</systemitem> </member> <member> Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_python</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> bietet eine Firewall zum Schutz von Webanwendungen vor verschiedenen Angriffen. Auch die Überwachung des HTTP-Datenverkehrs und die Echtzeitanalyse werden damit ermöglicht.
      </para>
      <simplelist>
       <member> Paketname: <systemitem>apache2-mod_security2</systemitem> </member> <member> Konfigurationsdatei: <filename>/etc/apache2/conf.d/mod_security2.conf</filename> </member> <member> Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_security2</filename> </member> <member> Dokumentation: <ulink url="http://modsecurity.org/documentation/"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-modules-building-modules">
   <title>Kompilieren von Modulen</title><indexterm> <primary>Apache</primary> <secondary>Module </secondary> <tertiary>erstellen</tertiary> </indexterm>
   <para>
    Apache kann von erfahrenen Benutzern durch selbst entwickelte Module erweitert werden. Für die Entwicklung eigener Apache-Module und für die Kompilierung von Drittanbieter-Modulen sind neben dem Paket <systemitem>apache2-devel</systemitem> auch die entsprechenden Entwicklungstools erforderlich. <systemitem>apache2-devel</systemitem> enthält unter anderem die <command>apxs2</command>-Tools, die zur Kompilierung von Apache-Erweiterungsmodulen erforderlich sind.
   </para>
   <para>
    <command>apxs2</command> ermöglicht die Kompilierung und Installation von Modulen aus dem Quellcode (einschließlich der erforderlichen Änderungen an den Konfigurationsdateien). Dadurch ergeben sich <emphasis>Dynamic Shared Objects</emphasis> (DSOs), die während der Laufzeit in Apache geladen werden können.
   </para>
   <para>
    Die Binaries von <command>apxs2</command> befinden sich unter <filename>/usr/sbin</filename>:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename>: Für die Entwicklung von Erweiterungsmodulen, die mit allen MPMs verwendbar sind. Die Module werden im Verzeichnis <filename>/usr/lib/apache2</filename> installiert.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename>: Für die Entwicklung von Prefork-MPM-Modulen. Die Module werden im Verzeichnis <filename>/usr/lib/apache2-prefork</filename> installiert.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename>: Für die Entwicklung von Worker-MPM-Modulen. Die Module werden im Verzeichnis <filename>/usr/lib/apache2-worker</filename> installiert.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Mit den folgenden Kommandos installieren und aktivieren Sie ein Modul aus dem Quellcode:
   </para>
<screen>cd /path/to/module/source; apxs2 -cia
    <replaceable>mod_foo</replaceable>.c</screen>
   <para>
    wobei das Modul mit <option>-c</option> kompiliert, mit <option>-i</option> installiert und mit <option>-a</option> aktiviert wird. Alle weiteren Optionen von <command>apxs2</command> werden auf der man-Seite <systemitem>apxs2(1)</systemitem> beschrieben.
   </para><indexterm class="endofrange" startref="idx-apache2-modules"/>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-cgi">
  <title>Aktivieren von CGI-Skripten</title><indexterm> <primary>Apache</primary> <secondary>CGI-Skripten</secondary></indexterm>

  <para>
   Die Common Gateway Interface (CGI) von Apache ermöglicht die dynamische Erstellung von Inhalten mit Programmen bzw. so genannten CGI-Skripten. CGI-Skripten können in jeder beliebigen Programmiersprache geschrieben sein. In der Regel werden aber die Skriptsprachen Perl oder PHP verwendet.
  </para>

  <para>
   Damit Apache in der Lage ist, die von CGI-Skripts erstellten Inhalte bereitzustellen, muss das Modul <systemitem>mod_cgi</systemitem> aktiviert sein. Außerdem ist <systemitem>mod_alias</systemitem> erforderlich. Beide Module sind standardmäßig aktiviert. Informationen zur Aktivierung von Modulen finden Sie unter <xref linkend="sec-apache2-modules-activating"/>.
  </para>

  <warning>
   <title>CGI-Sicherheit</title>
   <para>
    Die Zulassung der CGI-Skriptausführung auf dem Server ist ein Sicherheitsrisiko. Weitere Informationen finden Sie in <xref linkend="sec-apache2-security"/>.
   </para>
  </warning>

  <sect2 id="sec-apache2-cgi-configuration">
   <title>Konfiguration in Apache</title>
   <para>
    In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist die Ausführung von CGI-Skripts nur im Verzeichnis <filename>/srv/www/cgi-bin/</filename> erlaubt. Dieses Verzeichnis ist bereits für die Ausführung von CGI-Skripten konfiguriert. Wenn Sie eine virtuelle Hostkonfiguration erstellt haben (siehe <xref linkend="sec-apache2-configuration-manually-vhost"/>) und Ihre CGI-Skripten in einem Host-spezifischen Verzeichnis ablegen möchten, müssen Sie das betreffende Verzeichnis entsperren und für CGI-Skripten konfigurieren.
   </para>
   <example id="ex-apache2-cgi-configuration">
    <title>CGI-Konfiguration für virtuelle Hosts</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co id="co-apache2-cgi-handler"/>
 Order allow,deny<co id="co-apache2-cgi-order"/>
 Allow from all
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       Fordert Apache auf, alle Dateien in diesem Verzeichnis als CGI-Skripten zu behandeln
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       Aktiviert die Ausführung von CGI-Skripten
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       Fordert den Server auf, Dateien mit den Erweiterungen .pl und .cgi als CGI-Skripten zu behandeln. passen Sie diese Anweisung entsprechend Ihren Anforderungen an
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       Die <systemitem>Order</systemitem>- und <systemitem>Allow</systemitem>-Anweisungen legen den Standardzugriffsstatus sowie die Reihenfolge fest, in der Allow- und Deny-Anweisungen ausgewertet werden. In diesem Fall werden <quote>allow</quote>-Anweisungen vor <quote>deny</quote>-Anweisungen ausgewertet und der universelle Zugriff ist möglich.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 id="sec-apache2-cgi-example-script">
   <title>Ausführen eines Beispielskripten</title>
   <para>
    Die CGI-Programmierung unterscheidet sich von der herkömmlichen Programmierung insoweit, als CGI-Programmen und -Skripten ein MIME-Typ-Header wie <literal>Content-type:  text/html</literal> vorangestellt werden muss.  Dieser Header wird an den Client gesendet, damit er weiß, welchen Inhaltstyp er empfängt. Darüber hinaus muss die Skriptausgabe vom Client, in der Regel einem Webbrowser, verstanden werden – dies ist in den meisten Fällen HTML, aber auch Klartext, Bilder oder Ähnliches.
   </para>
   <para>
    Unter <filename>/usr/share/doc/packages/apache2/test-cgi</filename> stellt Apache ein einfaches Testskript bereit. Dieses Skript gibt den Inhalt einiger Umgebungsvariablen als Klartext aus. Wenn Sie dieses Skript ausprobieren möchten, kopieren Sie es in das Verzeichnis <filename>/srv/www/cgi-bin/ </filename> bzw. in das Skriptverzeichnis Ihres virtuellen Hosts (<filename>/srv/www/www.example.com/cgi-bin/</filename>), und benennen Sie es in <filename>test.cgi</filename> um.
   </para>
   <para>
    Dateien, auf die der Webserver zugreifen kann, sollten im Besitz des <systemitem class="username">root</systemitem>-Benutzers sein. Weitere Informationen hierzu finden Sie im Abschnitt <xref linkend="sec-apache2-security"/>. Da der Webserver unter einem anderen Benutzer ausgeführt wird, müssen CGI-Skripten von jedermann ausgeführt und gelesen werden können. Wechseln Sie daher in das CGI-Verzeichnis und führen Sie den Befehl <command>chmod 755 test.cgi</command> aus, um die entsprechenden Berechtigungen einzurichten.
   </para>
   <para>
    Rufen Sie danach <literal>http://localhost/cgi-bin/test.cgi</literal> oder <literal>http://example.com/cgi-bin/test.cgi</literal> auf. Nun sollte der <quote>CGI/1.0-Testskriptbericht</quote> angezeigt werden.
   </para>
  </sect2>

  <sect2 id="sec-apache2-cgi-troubleshooting">
   <title>CGI-Fehlerbehebung</title>
   <para>
    Wenn Sie nach der Ausführung des CGI-Testskripten statt des Testskriptberichts eine Fehlermeldung erhalten, überprüfen Sie Folgendes:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI-Fehlerbehebung</title>
    <listitem>
     <para>
      Haben Sie den Server nach der Konfigurationsänderung neu geladen? Überprüfen Sie dies mit <command>rcapache2 probe</command>.
     </para>
    </listitem>
    <listitem>
     <para>
      Falls Sie ein benutzerdefiniertes CGI-Verzeichnis eingerichtet haben, ist dieses richtig konfiguriert? Falls Sie sich nicht sicher sind, führen Sie das Skript im CGI-Standardverzeichnis <filename>/srv/www/cgi-bin/</filename> aus. Rufen Sie das Skript dazu mit <literal>http://localhost/cgi-bin/test.cgi</literal> auf.
     </para>
    </listitem>
    <listitem>
     <para>
      Wurden die richtigen Berechtigungen zugewiesen? Wechseln Sie in das CGI-Verzeichnis und führen Sie <command>ls -l test.cgi</command> aus. Die Befehlsausgabe sollte mit folgender Zeile beginnen:
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      Überprüfen Sie das Skript auf Programmierfehler. Wenn Sie die Datei <filename>test.cgi</filename> nicht bearbeitet haben, dürfte sie keine Programmierfehler enthalten. Falls Sie aber eigene Programme verwenden, sollten Sie diese immer auf Programmierfehler untersuchen.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-ssl">
  <title>Einrichten eines sicheren Webservers mit SSL</title><indexterm class="startofrange" id="idx-apache2-ssl"> <primary>Apache</primary> <secondary>SSL</secondary> </indexterm>

  <para>
   Wenn sensible Daten wie Kreditkarteninformationen zwischen Webserver und Client übertragen werden, ist eine sichere, verschlüsselte Verbindung mit Authentifizierung wünschenswert. <systemitem>mod_ssl</systemitem> bietet mittels der Protokolle Secure Sockets Layer (SSL) und Transport Layer Security (TLS) eine sichere Verschlüsselung für die HTTP-Kommunikation zwischen einem Client und dem Webserver. Wenn Sie SSL/TSL verwenden, wird zwischen dem Webserver und dem Client eine private Verbindung eingerichtet. Die Datenintegrität bleibt dadurch gewährleistet und Client und Server können sich gegenseitig authentifizieren.
  </para>
  
  <para>
   Zu diesem Zweck sendet der Server vor der Beantwortung von Anforderungen an eine URL ein SSL-Zertifikat mit Informationen, die die Identität des Servers nachweisen. Dies garantiert, dass der Server eindeutig der richtige Endpunkt der Kommunikation ist. Außerdem wird durch das Zertifikat eine verschlüsselte Verbindung zwischen dem Client und dem Server hergestellt, die sicherstellt, dass Informationen ohne das Risiko der Freigabe sensitiver Klartextinhalte übertragen werden.
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> implementiert die SSL/TSL-Protokolle nicht selbst, sondern fungiert als Schnittstelle zwischen Apache und einer SSL-Bibliothek. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> wird die OpenSSL-Bibliothek verwendet. OpenSSL wird bei der Installation von Apache automatisch installiert.
  </para>
  <note>
   <title>TLS-Versionen über TLS 1.0</title>
   <para>
    Die openssl-Bibliothek unterstützt TLS-Versionen bis einschließlich TLS 1.0. Es gibt keine Unterstützung für höhere TLS-Versionen wie 1.1 oder 1.2. <systemitem>mod_nss</systemitem> im Paket <systemitem>apache2-mod_nss</systemitem> bietet TLS 1.1 und 1.2 über die Mozilla Network Security Services-Bibliothek. Weitere Informationen finden Sie im <xref linkend="sec-apache2-nss"/>.
   </para>
  </note>
  <para>
   Die Verwendung von <systemitem>mod_ssl</systemitem> in Apache erkennen Sie in URLs am Präfix <literal>https://</literal> (statt <literal>http://</literal>).
  </para>

  <tip>
   <title>Beispielzertifikat</title>
   <para>
    Ein Beispielzertifikat für eine hypothetische Firma <quote>Snake Oil</quote> ist zur Installation des Pakets <systemitem class="resource">apache2-example-certificates</systemitem> verfügbar.
   </para>
  </tip>

  <sect2 id="sec-apache2-ssl-certificate">
   <title>Erstellen eines SSL-Zertifikats</title><indexterm> <primary>Apache</primary> <secondary>SSL</secondary> <tertiary>SSL-Zertifikat erstellen</tertiary> </indexterm>
   <para>
    Wenn Sie SSL/TSL mit dem Webserver einsetzen möchten, müssen Sie ein SSL-Zertifikat erstellen. Dieses Zertifikat ist für die Autorisierung zwischen Webserver und Client erforderlich, damit beide Endpunkte jeweils die Identität des anderen Endpunkts überprüfen können. Zum Nachweis der Zertifikatintegrität muss das Zertifikat von einer Organisation signiert sein, der jeder der beteiligten Benutzer vertraut.
   </para>
   <para>
    Sie können drei Zertifikatsarten erstellen: ein <quote>Dummy</quote>-Zertifikat, das nur zu Testzwecken verwendet wird, ein selbst signiertes Zertifikat für einen bestimmten Benutzerkreis, der Ihnen vertraut, und ein Zertifikat, das von einer unabhängigen, öffentlich bekannten Zertifizierungsstelle (CA) signiert wurde.
   </para>
   <para>
    Die Zertifikaterstellung besteht im Grunde nur aus zwei Schritten: Zunächst wird ein privater Schlüssel für die Zertifizierungsstelle generiert und danach wird das Serverzertifikat mit diesem Schlüssel signiert.
   </para>
   <tip>
    <title>Weiterführende Informationen</title>
    <para>
     Weitere Informationen über das Konzept von SSL/TSL und diesbezügliche Festlegungen finden Sie unter <ulink url="http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html</ulink>.
    </para>
   </tip>
   <sect3 id="sec-apache2-ssl-certificate-dummy">
    <title>Erstellen eines <quote>Dummy</quote>-Zertifikats</title>
    <para>
     Die Erstellung eines Dummy-Zertifikats ist einfach. Rufen Sie lediglich das Skript <command>/usr/bin/gensslcert</command> auf.  Es erstellt oder überschreibt die unten aufgelisteten Dateien. Verwenden Sie die optischen Switches von <command>gensslcert</command>, um die Feineinstellungen für das Zertifikat vorzunehmen. Rufen Sie <command>/usr/bin/gensslcert <option>-h</option></command> auf, um weitere Informationen zu erhalten.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/root/.mkcert.cfg</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Außerdem wird eine Kopie der Datei <filename>ca.crt</filename> im Verzeichnis <filename>/srv/www/htdocs/CA.crt</filename> zum Herunterladen bereitgestellt.
    </para>
    <important>
     <title>Nur zu Testzwecken</title>
     <para>
      Verwenden Sie Dummy-Zertifikate niemals in Produktionsumgebungen, sondern nur zum Testen.
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-ssl-certificate-custom">
    <title>Erstellen eines selbst signierten Zertifikats</title>
    <para>
     Wenn Sie einen sicheren Webserver für Ihr Intranet oder einen bestimmten Benutzerkreis einrichten, reicht unter Umständen ein von Ihrer eigenen Zertifizierungsstelle signiertes Zertifikat aus.
    </para>
    <para>
     Die Erstellung eines selbst signierten Zertifikats ist ein interaktiver Vorgang, der aus neun Schritten besteht. Wechseln Sie dazu zunächst in das Verzeichnis <filename>/usr/share/doc/packages/apache2</filename> und führen Sie den folgenden Befehl aus: <command>./mkcert.sh make <option>--no-print-directory /usr/bin/openssl /usr/sbin/ custom</option></command>. Diesen Befehl sollten Sie keinesfalls außerhalb dieses Verzeichnisses ausführen. Das Programm gibt eine Reihe von Eingabeaufforderungen aus, von denen einige Benutzereingaben erfordern.
    </para>
    <procedure id="pro-apache2-ssl-certificate-custom">
     <title>Erstellen eines selbst signierten Zertifikats mit <command>mkcert.sh</command></title>
     <step performance="required">
      <para>
       <literal>Festlegen des für Zertifikate zu verwendenden Signaturalgorithmus </literal>
      </para>
      <para>
       Wählen Sie RSA aus (<keycap>R</keycap>, die Standardeinstellung), da einige ältere Browser Probleme mit DSA haben.
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Generating RSA private key for CA (1024 bit) (Privaten RSA-Schlüssel für CA (1024 Bit) erstellen)</literal>
      </para>
      <para>
       Keine Eingabe erforderlich.
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Generating X.509 certificate signing request for CA (X.509-Zertifikatsignierungsanforderung für CA erstellen)</literal>
      </para>
      <para>
       Hier erstellen Sie den DN (Distinguished Name) der Zertifizierungsstelle. Dazu müssen Sie einige Fragen, z. B. nach dem Land oder der Organisation, beantworten. Geben Sie an dieser Stelle nur gültige Daten ein. Schließlich wird alles, was Sie hier eingeben, später im Zertifikat angezeigt. Sie müssen nicht alle Fragen beantworten. Wenn eine Frage nicht auf Sie zutrifft oder Sie eine Antwort offen lassen möchten, geben Sie <quote>.</quote>  ein. Unter Common Name (allgemeiner Name) müssen Sie den Namen der Zertifizierungsstelle eingeben. Geben Sie hier einen aussagekräftigen Namen ein, beispielsweise <replaceable>Zertifizierungsstelle von </replaceable>My company. 
      </para>
      <important>
       <title>Eigenname der CA</title>
       <para>
        Der Eigenname der CA muss sich vom Eigennamen des Servers unterscheiden. Wählen Sie daher in diesem Schritt nicht den voll qualifizierten Hostnamen.
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>Generating X.509 certificate for CA signed by itself (Von CA selbst signiertes X.509-Zertifikat für CA erstellen)</literal>
      </para>
      <para>
       Wählen Sie Zertifikatversion <keycap>3</keycap> aus (die Standardeinstellung).
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Generating RSA private key for SERVER (1024 bit) (Privaten RSA-Schlüssel für SERVER (1024 Bit) erstellen)</literal>
      </para>
      <para>
       Keine Eingabe erforderlich.
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Generating X.509 certificate signing request for SERVER (X.509-Zertifikatsignierungsanforderung für SERVER erstellen)</literal>
      </para>
      <para>
       Hier erstellen Sie den DN für den Serverschlüssel. Es werden nahezu die gleichen Fragen gestellt wie für den DN der Zertifizierungsstelle. Ihre Antworten betreffen jedoch den Webserver und müssen nicht unbedingt identisch mit den für die Zertifizierungsstelle eingegebenen Daten sein (der Server kann sich z. B. an einem anderen Standort befinden).
      </para>
      <important>
       <title>Auswahl eines Common Name</title>
       <para>
        Als Common Name (allgemeiner Name) müssen Sie hier den vollständig qualifizierten Hostnamen des sicheren Servers eingeben (z. B. www.beispiel.com). Anderenfalls gibt der Browser beim Zugriff auf den Webserver eine Warnung mit dem Hinweis aus, dass das Zertifikat nicht mit dem Server übereinstimmt.
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>Generating X.509 certificate signed by own CA (Von eigener CA signiertes X.509-Zertifikat erstellen)</literal>
      </para>
      <para>
       Wählen Sie Zertifikatversion <keycap>3</keycap> aus (die Standardeinstellung).
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Encrypting RSA private key of CA with a pass phrase for security (Privaten RSA-Schlüssel der CA aus Sicherheitsgründen mit einem Passwort verschlüsseln)</literal>
      </para>
      <para>
       Aus Sicherheitsgründen empfiehlt es sich, den privaten Schlüssel der Zertifizierungsstelle mit einem Passwort zu verschlüsseln. Wählen Sie daher <keycap>J</keycap> aus und geben Sie ein Passwort ein.
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>Encrypting RSA private key of SERVER with a pass phrase for security (Privaten RSA-Schlüssel von SERVER aus Sicherheitsgründen mit einem Passwort verschlüsseln)</literal>
      </para>
      <para>
       Wenn Sie den Serverschlüssel mit einem Passwort verschlüsseln, müssen Sie dieses Passwort bei jedem Start des Webservers eingeben. Dies macht den automatischen Start des Webservers beim Hochfahren des Computers oder einen Neustart des Webservers nahezu unmöglich. Aus diesem Grund sollten Sie diese Frage mit <keycap>N</keycap> beantworten. Denken Sie aber daran, dass Ihr Schlüssel in diesem Fall ungeschützt ist, und stellen Sie sicher, dass nur autorisierte Personen Zugriff auf den Schlüssel haben.
      </para>
      <important>
       <title>Verschlüsseln des Serverschlüssels</title>
       <para>
        Wenn Sie den Serverschlüssel mit einem Passwort verschlüsseln möchten, erhöhen Sie den Wert für <systemitem>APACHE_TIMEOUT</systemitem> in <filename>/etc/sysconfig/apache2</filename>.  Anderenfalls bleibt Ihnen unter Umständen nicht genügend Zeit für die Eingabe des Passworts, bevor der Startversuch des Servers wegen Zeitüberschreitung abgebrochen wird.
       </para>
      </important>
     </step>
    </procedure>
    <para>
     Die Ergebnisseite des Skripts enthält eine Liste der generierten Zertifikate und Schlüssel. Die Dateien wurden allerdings nicht, wie im Skript angegeben, im lokalen Verzeichnis <filename>conf</filename> erstellt, sondern in den passenden Verzeichnissen unter <filename>/etc/apache2/</filename>.
    </para>
    <para>
     Der letzte Schritt besteht darin, die Zertifikatdatei der Zertifizierungsstelle aus dem Verzeichnis <filename>/etc/apache2/ssl.crt/ca.crt</filename> in ein Verzeichnis zu kopieren, in dem die Benutzer auf die Datei zugreifen können. Aus diesem Verzeichnis können die Benutzer die Zertifizierungsstelle in ihren Webbrowsern der Liste der bekannten und vertrauenswürdigen Zertifizierungsstellen hinzufügen. Wäre die Zertifizierungsstelle nicht in dieser Liste enthalten, würde der Browser melden, dass das Zertifikat von einer unbekannten Zertifizierungsstelle ausgegeben wurde. Das neu erstellte Zertifikat ist ein Jahr lang gültig.
    </para>
    <important>
     <title>Eigensignierte Zertifikate</title>
     <para>
      Verwenden Sie selbst signierte Zertifikate nur auf einem Webserver, auf den Benutzer zugreifen, denen Sie bekannt sind und die Ihnen als Zertifizierungsstelle vertrauen. Für einen öffentlichen Online-Versand wäre ein solches Zertifikat z. B. nicht geeignet.
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-ssl-certificate-official">
    <title>Anfordern eines offiziell signierten Zertifikats</title>
    <para>
     Es gibt verschiedene offizielle Zertifizierungsstellen, die Ihre Zertifikate signieren. Zertifizierungsstellen sind vertrauenswürdige unabhängige Parteien. Einem Zertifikat, das durch eine solche Zertifizierungsstelle signiert wurde, kann daher voll und ganz vertraut werden. Sichere Webserver, deren Inhalte für die Öffentlichkeit bereitstehen, verfügen in der Regel über ein offiziell signiertes Zertifikat.
    </para>
    <para>
     Die bekanntesten offiziellen Zertifizierungsstellen sind Thawte (<ulink url="http://www.thawte.com/"/>) und Verisign (<ulink url="http://www.verisign.com"/>). Diese und andere Zertifizierungsstellen sind bereits in Browsern kompiliert. Zertifikate, die von diesen Zertifizierungsstellen signiert wurden, werden daher von Browsern automatisch akzeptiert.
    </para>
    <para>
     Wenn Sie ein offiziell signiertes Zertifikat anfordern, senden Sie kein Zertifikat an die Zertifizierungsstelle, sondern eine CSR (Certificate Signing Request, Zertifikatsignierungsanforderung). Zur Erstellung einer CSR rufen Sie das Skript <command>/usr/share/ssl/misc/CA.sh -newreq</command> auf.
    </para>
    <para>
     Das Skript fragt zunächst nach dem Passwort für die Verschlüsselung der CSR. Danach müssen Sie einen Distinguished Name (DN) eingeben. Dazu müssen Sie einige Fragen, z. B. nach dem Land oder der Organisation, beantworten. Geben Sie an dieser Stelle nur gültige Daten ein. Schließlich wird alles, was Sie hier eingeben, überprüft und später im Zertifikat angezeigt. Sie müssen nicht alle Fragen beantworten. Wenn eine Frage nicht auf Sie zutrifft oder Sie eine Antwort offen lassen möchten, geben Sie <quote>.</quote>  ein. Unter Common Name (allgemeiner Name) müssen Sie den Namen der Zertifizierungsstelle eingeben. Geben Sie hier einen aussagekräftigen Namen ein, beispielsweise <replaceable>Zertifizierungsstelle von </replaceable>My company. Zum Schluss müssen Sie noch ein Challenge Passwort (zur Vernichtung des Zertifikats, falls der Schlüssel kompromittiert wird) und einen alternativen Unternehmensnamen eingeben.
    </para>
    <para>
     Die CSR wird in dem Verzeichnis erstellt, aus dem Sie das Skript aufgerufen haben. Der Name der CSR-Datei lautet <filename>newreq.pem</filename>.
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-ssl-configuration">
   <title>Konfigurieren von Apache mit SSL</title><indexterm> <primary>Apache</primary> <secondary>SSL</secondary> <tertiary>Apache mit SSL konfigurieren</tertiary> </indexterm>
   <para>
    Port 443 ist auf dem Webserver der Standardport für SSL- und TLS-Anforderungen. Zwischen einem <quote>normalen</quote> Apache-Webserver, der Port 80 überwacht, und einem SSL/TLS-aktivierten Apache-Server, der Port 443 überwacht, kommt es zu keinen Konflikten. In der Tat kann die gleiche Apache-Instanz sowohl HTTP als auch HTTPS ausführen. In der Regel verteilen separate virtuelle Hosts die Anforderungen für Port 80 und Port 443 an separate virtuelle Server.
   </para>
   <important>
    <title>Firewall-Konfiguration</title>
    <para>
     Vergessen Sie nicht, die Firewall für den SSL-aktivierten Apache-Webserver an Port 443 zu öffnen. Sie können dazu YaST verwenden (siehe <xref linkend="sec-fire-SuSE-yast"/>).
    </para>
   </important>
   <para>
    Der SSL-Modus wird standardmäßig in der globalen Serverkonfiguration aktiviert. Falls er auf Ihrem Host deaktiviert wurde, aktivieren Sie ihn mithilfe des folgenden Kommandos: <command>a2enmod ssl</command>. Um SSL schließlich aktivieren zu können, muss der Server mit dem Flag <quote>SSL</quote> gestartet werden. Rufen Sie dazu <command>a2enflag SSL</command> auf. Wenn Sie sich zuvor entschieden haben, Ihr Serverzertifikat durch ein Passwort zu verschlüsseln, sollten Sie auch den Wert von <systemitem>APACHE_TIMEOUT</systemitem> in <filename>/etc/sysconfig/apache2</filename> heraufsetzen, damit Ihnen beim Start von Apache genügend Zeit für die Eingabe des Passworts bleibt. Starten Sie den Server anschließend neu, damit die Änderungen wirksam werden. Ein Neuladen des Servers reicht dazu nicht aus.
   </para>
   <para>
    Das Verzeichnis der virtuellen Hostkonfiguration enthält die Vorlage <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>. Diese enthält SSL-spezifische Direktiven, die bereits an anderer Stelle hinreichend dokumentiert sind. Informationen über die Basiskonfiguration eines virtuellen Hosts finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost"/>.
   </para>
   <para>
    Kopieren Sie zum Starten die Vorlage zu <filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename> und bearbeiten Sie diese. Es sollte ausreichen, die Werte für die folgenden Anweisungen anzupassen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-ssl-configuration-name-based">
    <title>Namensbasierte virtuelle Hosts und SSL</title>
    <para>
     Auf einem Server mit nur einer IP-Adresse können standardmäßig nicht mehrere SSL-aktivierte virtuelle Hosts laufen. Für ein namensbasiertes virtuelles Hosting muss Apache wissen, welcher Servername angefordert wurde. Das Problem ist dabei, dass SSL-Verbindungen erst gelesen werden können, nachdem die Verbindung (unter Verwendung des standardmäßigen virtuellen Hosts) bereits hergestellt wurde. Demzufolge erhalten Benutzer eine Warnmeldung, die besagt, dass das Zertifikat nicht mit dem Servernamen übereinstimmt.
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet eine Erweiterung des SSL-Protokolls namens Server Name Indication (SNI), die dieses Problem behebt, indem der Name der virtuellen Domäne als Teil der SSL-Verhandlung gesendet wird. Dies ermöglicht dem Server ein frühes <quote>Umschalten</quote> zur korrekten virtuellen Domäne, wodurch der Browser das richtige Zertifikat erhält.
    </para>
    <para>
     SNI ist in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> standardmäßig aktiviert. Für die Aktivierung von namensbasierten virtuellen Hosts für SSL müssen Sie den Server wie in <xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/> beschrieben konfigurieren. (Beachten Sie, dass für SSL Port <literal>443</literal> anstelle von Port <literal>80</literal> benötigt wird.)
    </para>
    <important>
     <title>SNI - Browserunterstützung</title>
     <para>
      SNI muss auf der Client-Seite unterstützt werden. Auch wenn die meisten Browser SNI unterstützen, fehlt die SNI-Unterstützung bei einigen Browsern für Mobilgeräte sowie im Internet Explorer und in Safari unter Windows* XP. Weitere Informationen finden Sie in <ulink url="http://en.wikipedia.org/wiki/Server_Name_Indication"/>.
     </para>
     <para>
      Konfigurieren Sie die Behandlung von Browsern ohne SNI-Fähigkeit mit der Direktive <systemitem>SSLStrictSNIVHostCheck</systemitem>. Wenn SNI in der Serverkonfiguration auf <literal>on</literal> gesetzt ist, werden Browser ohne SNI-Fähigkeit für alle virtuellen Hosts abgelehnt. Wenn für SNI <literal>on</literal> in einer <systemitem>VirtualHost</systemitem>-Direktive festgelegt ist, wird der Zugriff auf den konkreten virtuellen Host abgelehnt.
     </para>
     <para>
      Wenn in der Serverkonfiguration <literal>off</literal> festgelegt ist, verhält sich der Server wie ohne SNI-Unterstützung. SSL-Anforderungen werden durch den <emphasis>ersten</emphasis> (für Port 443) definierten virtuellen Host bearbeitet.
     </para>
    </important><indexterm class="endofrange" startref="idx-apache2-ssl"/>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-nss">
  <title>Einrichten eines sicheren Webservers mit NSS</title>
  <indexterm class="startofrange" id="idx-apache2-nss"> <primary>Apache</primary> <secondary>NSS</secondary> </indexterm>
  <para>
   Das Modul <systemitem>mod_nss</systemitem> sorgt für die starke Verschlüsselung mit den TLS-Protokollen 1.1 und 1.2 (Transport Layer Security), die bei Verwendung von Apache mit <systemitem>mod_ssl</systemitem> nicht zur Verfügung stehen.
  </para>
  <para>
   Die SSL-/TLS-Unterstützung im Paket <systemitem>apache2</systemitem> wird in der Regel durch <systemitem>mod_ssl</systemitem> gewährleistet; dieses Modul bietet SSL/TLS über die openssl Cryptographic Library. Die in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> verwendete Version der openssl-Bibliothek unterstützt ausschließlich TLS bis Version 1.0. Die Unterstützung für TLS 1.1 und 1.2 kann nur durch Versionen erfolgen, die nicht mit der Mehrzahl der Pakete in SLE <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> kompatibel sind. Alternativ nutzen Sie die Mozilla Network Security Services-Bibliothek im Paket <systemitem>mozilla-nss</systemitem>.
  </para>
  <note>
   <title>Unterstützung für SSLv2</title>
   <para>
    <systemitem>mod_nss</systemitem> bietet keine Unterstützung für SSLv2. Wenn Sie das SSLv2-Protokoll benötigen, müssen Sie <systemitem>mod_ssl</systemitem> verwenden.
   </para>
  </note>
  <para>
   <systemitem>mod_ssl</systemitem> und <systemitem>mod_nss</systemitem> können gleichzeitig initialisiert werden; die Protokoll-Handler (<literal>SSLEngine on</literal> für <systemitem>mod_ssl</systemitem> bzw. <literal>NSSEngine on</literal> für <systemitem>mod_nss</systemitem>) können jedoch nicht gleichzeitig aktiviert sein, weder global noch im Kontext eines <systemitem>VirtualHost</systemitem>-Konfigurationsdirektivenblocks.
  </para>
  <para>
   Wenn nur bei einem <systemitem>VirtualHost</systemitem>-Abschnitt die Direktive <literal>NSSEngine</literal> aktiviert ist (<literal>on</literal>), hat diese Direktive für einen Port, der durch Apache überwacht wird, Vorrang vor allen anderen <systemitem>VirtualHost</systemitem>-Deklarationen (in deren Kontext <literal>SSLEngine</literal> aktiviert/<literal>on</literal> sein kann). Die gleichzeitige Nutzung beider Module für unterschiedliche VirtualHosts unter derselben IP-Adresse und an demselben Port ist nicht möglich. Wenn Sie die Unterstützung für verschlüsselte Verbindungen sowohl mit <systemitem>mod_nss</systemitem> als auch mit <systemitem>mod_ssl</systemitem> benötigen, sollten Sie mehrere IP-Adressen verwenden und die Kryptographiemodule des Servers an die jeweiligen IP-Adressen binden. Falls Sie nicht beide Kryptographiemodule gleichzeitig benötigen, wird empfohlen, nur ein Modul zu nutzen und das andere Modul zu deaktivieren.
  </para>
  <para>
   <systemitem>mmod_nss</systemitem> verwendet ein Datenbankformat für die Server- und CA-Zertifikate und den privaten Schlüssel. Aus diesem Grund müssen vorhandene mod_ssl-basierte Zertifikate für den Gebrauch mit <systemitem>mmod_nss</systemitem> konvertiert werden. Das Paket <systemitem>apache2-mod_nss</systemitem> enthält das Perl-Skript <filename>/usr/sbin/mod_nss_migrate.pl</filename> für diese Aufgabe. Das Skript erstellt eine neue Datenbank.
  </para>
  <para>
   Mit dem folgenden Befehl rufen Sie eine Liste der Zertifikate ab, die sich in der NSS-Datenbank befinden:
  </para>
  <screen>certutil -d /etc/apache2/mod_nss.d -L</screen>
  <para>
   Weitere Informationen zum NSS-Datenbankverwaltungsprogramm <command>certutil</command> erhalten Sie mit dem Befehl <command>certutil --help</command>.
  </para>
  <para>
   Die Datei <filename>/etc/apache2/conf.d/mod_nss.conf</filename> ist die standardmäßige Konfigurationsdatei für das Paket <systemitem>mod_nss</systemitem>. Weitere Informationen finden Sie in den Kommentaren in dieser Datei.
  </para>
  <indexterm class="endofrange" startref="idx-apache2-ssl"/>
 </sect1>
 <sect1 id="sec-apache2-security">
  <title>Vermeiden von Sicherheitsproblemen</title><indexterm> <primary>Apache</primary> <secondary>Sicherheit</secondary> </indexterm>
  <para>
   Ein dem öffentlichen Internet ausgesetzter Webserver erfordert ständige Wartungs- und Verwaltungsarbeiten. Sicherheitsprobleme, verursacht durch die Software wie auch durch versehentliche Fehlkonfigurationen, sind kaum zu vermeiden. Im Folgenden einige Tipps zur Verbesserung der Sicherheit.
  </para>

  <sect2 id="sec-apache2-security-up-to-date">
   <title>Stets aktuelle Software</title>
   <para>
    Bei Bekanntwerden von Sicherheitsrisiken in der Apache-Software veröffentlicht SUSE sofort einen entsprechenden Sicherheitshinweis. Dieser enthält Anleitungen zur Behebung der Schwachstellen, die wiederum möglichst frühzeitig angewendet werden sollten. Die Sicherheitsankündigungen von SUSE stehen unter folgenden Adressen zur Verfügung:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Webseite</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/securitysupport.html"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Mailinglisten-Archiv</title>
      <para>
       <ulink url="http://lists.opensuse.org/opensuse-security-announce/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>RSS-Newsticker</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/suse_security.xml"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec-apache2-security-permissions">
   <title>DocumentRoot-Berechtigungen</title>
   <para>
    In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind das <systemitem>DocumentRoot </systemitem>-Verzeichnis <filename>/srv/www/htdocs </filename> und das CGI-Verzeichnis <filename>/srv/www/cgi-bin</filename> standardmäßig dem Benutzer bzw. der Gruppe <systemitem>root</systemitem> zugeordnet. Diese Berechtigungen sollten nicht geändert werden. Wenn diese Verzeichnisse für alle Benutzer modifizierbar sind, kann jeder Benutzer Dateien darin ablegen. Diese Dateien würden dann von Apache mit <systemitem>wwwrun</systemitem>-Berechtigungen ausgeführt werden, was wiederum dem Benutzer unbeabsichtigt Zugriff auf die Ressourcen des Dateisystems gewähren würde. Das <systemitem>DocumentRoot</systemitem>-Verzeichnis und die CGI-Verzeichnisse Ihrer virtuellen Hosts sollten Sie als Unterverzeichnisse im Verzeichnis <filename>/srv/www</filename> anlegen. Stellen Sie auch bei diesen Verzeichnissen sicher, dass die Verzeichnisse und die darin enthaltenen Dateien dem Benutzer bzw. der Gruppe <systemitem class="username">root</systemitem> zugeordnet sind.
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-filesystem">
   <title>Zugriff auf das Dateisystem</title>
   <para>
    Standardmäßig wird in <filename>/etc/apache2/httpd.conf</filename> der Zugriff auf das gesamte Dateisystem verweigert. Diese Direktiven sollten Sie nicht überschreiben. Aktivieren Sie stattdessen explizit den Zugriff auf die Verzeichnisse, die Apache lesen muss. Weitere Informationen finden Sie in <xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>. Achten Sie dabei darauf, dass keine unbefugten Personen auf kritische Dateien wie Passwort- oder Systemkonfigurationsdateien zugreifen können.
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-cgi">
   <title>CGI-Skripten</title>
   <para>
    Interaktive Skripten in Perl, PHP, SSI oder anderen Programmiersprachen können im Prinzip jeden beliebigen Befehl ausführen und stellen damit generell ein Sicherheitsrisiko dar. Skripts, die vom Server ausgeführt werden, sollten nur aus Quellen stammen, denen der Serveradministrator vertraut. Keine gute Idee ist es, den Benutzern die Ausführung ihrer eigenen Skripts zu erlauben. Zusätzlich empfiehlt es sich, die Sicherheit aller Skripten zu überprüfen.
   </para>
   <para>
    Es ist durchaus üblich, sich die Skriptverwaltung durch eine Einschränkung der Skriptausführung zu vereinfachen. Dabei wird die Ausführung von CGI-Skripten auf bestimmte Verzeichnisse eingeschränkt, statt sie global zuzulassen. Die Direktiven <systemitem>ScriptAlias</systemitem> und <systemitem>Option ExecCGI</systemitem> werden zur Konfiguration verwendet. In der Standardkonfiguration von <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist es generell nicht gestattet, CGI-Skripts von jedem beliebigen Ort aus auszuführen.
   </para>
   <para>
    Alle CGI-Skripten werden unter dem gleichen Benutzer ausgeführt. Es kann daher zu Konflikten zwischen verschiedenen Skripten kommen. Abhilfe schafft hier das Modul suEXEC, das die Ausführung von CGI-Skripten unter einem anderen Benutzer oder einer anderen Gruppe ermöglicht.
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-users">
   <title>Benutzerverzeichnisse</title>
   <para>
    Bei der Aktivierung von Benutzerverzeichnissen (mit <systemitem>mod_userdir</systemitem> oder <systemitem>mod_rewrite</systemitem>) sollten Sie unbedingt darauf achten, keine <filename>.htaccess</filename>-Dateien zuzulassen. Durch diese Dateien wäre es den Benutzern möglich, die Sicherheitseinstellungen zu überschreiben. Zumindest sollten Sie die Möglichkeiten des Benutzers durch die Direktive <systemitem>AllowOverRide</systemitem> einschränken. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind <filename>.htaccess</filename>-Dateien standardmäßig aktiviert. Den Benutzern ist es allerdings nicht erlaubt, <systemitem>Option</systemitem>-Direktiven mit <systemitem>mod_userdir</systemitem> zu überschreiben (siehe hierzu die Konfigurationsdatei <filename>/etc/apache2/mod_userdir.conf</filename>).
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-troubleeshooting">
  <title>Fehlersuche</title><indexterm> <primary>Apache</primary> <secondary>Fehlersuche</secondary></indexterm>

  <para>
   Wenn sich Apache nicht starten lässt, eine Webseite nicht angezeigt werden kann oder Benutzer keine Verbindung zum Webserver herstellen können, müssen Sie die Ursache des Problems herausfinden. Im Folgenden werden einige nützliche Ressourcen vorgestellt, die Ihnen bei der Fehlersuche behilflich sein können:
  </para>

  <variablelist>
   <varlistentry>
    <term>Ausgabe von <command>rcapache2</command>
    </term>
    <listitem>
     <para>
      Statt den Webserver mit der Binärdatei <filename>/usr/sbin/httpd2</filename> zu starten und zu stoppen, verwenden Sie das Skript <command>rcapache2</command> (siehe <xref linkend="sec-apache2-start-stop"/>). Es bietet umfassende Informationen über Fehler und stellt außerdem Tipps und Hinweise zur Behebung von Konfigurationsfehlern zur Verfügung.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Protokolldateien und Ausführlichkeitsgrad</term>
    <listitem>
     <para>
      Bei schwerwiegenden und nicht schwerwiegenden Fehlern finden Sie mögliche Ursachen in den Apache-Protokolldateien, insbesondere in der standardmäßig im Verzeichnis <filename>/var/log/apache2/error_log</filename> gespeicherten Fehlerprotokolldatei. Mit der Direktive <systemitem>LogLevel</systemitem> können Sie im Übrigen die Ausführlichkeit der protokollierten Meldungen einstellen. Dies ist z. B. nützlich, wenn Sie mehr Details benötigen. 
     </para>
     <tip>
      <title>Ein einfacher Test</title>
      <para>
       Sie können die Apache-Protokollmeldungen mit dem Befehl <command>tail -F /var/log/apache2/<replaceable>my_error_log</replaceable></command> überwachen.  Führen Sie anschließend den Befehl <command>rcapache2 restart</command> aus.  Versuchen Sie anschließend eine Verbindung mit einem Browser herzustellen und überprüfen Sie dort die Ausgabe.
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Firewall und Ports</term>
    <listitem>
     <para>
      Es wird häufig versäumt, die Ports für Apache in der Firewall-Konfiguration des Servers zu öffnen. YaST bietet bei der Konfiguration von Apache eine eigene Option, die sich dieses speziellen Themas annimmt (siehe <xref linkend="sec-apache2-configuration-yast"/>). Bei der manuellen Konfiguration von Apache können Sie die Ports für HTTP und HTTPS in der Firewall über das Firewall-Modul von YaST öffnen.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Falls sich Ihr Problem nicht mithilfe der vorgenannten Ressourcen beheben lässt, finden Sie weitere Informationen in der Apache-Fehlerdatenbank, die online unter <ulink url="http://httpd.apache.org/bug_report.html"/> zur Verfügung steht. Sie können sich auch an die Apache-Benutzer-Community wenden, die Sie über eine Mailingliste unter <ulink url="http://httpd.apache.org/userslist.html"/> erreichen. Des Weiteren empfehlen wir die Newsgroup <ulink url="comp.infosystems.www.servers.unix"/>.
  </para>
 </sect1>
 <sect1 id="sec-apache2-more-information">
  <title>Weiterführende Informationen</title>

  <para>
   Das Paket <systemitem>apache2-doc</systemitem>, das an verschiedenen Orten bereitgestellt wird, enthält das vollständige Apache-Handbuch für die lokale Installation und Referenz. Das Handbuch ist nicht in der Standardinstallation enthalten. Am schnellsten installieren Sie es mit dem Befehl <command>zypper in apache2-doc</command>. Nach der Installation steht das Apache-Handbuch unter <ulink url="http://localhost/manual/"/> zur Verfügung. Unter <ulink url="http://httpd.apache.org/docs-2.2/"/> können Sie auch im Web darauf zugreifen. SUSE-spezifische Konfigurationstipps finden Sie im Verzeichnis <filename>/usr/share/doc/packages/apache2/README.*</filename>.
  </para>

  <sect2 id="sec-apache2-more-information-apache22">
   <title>Apache 2.2</title>
   <para>
    Eine Liste der neuen Funktionen in Apache 2.2 finden Sie unter <ulink url="http://httpd.apache.org/docs/2.2/new_features_2_2.html"/>. Upgrade-Informationen von Version 2.0 auf Version 2.2 erhalten Sie unter <ulink url="http://httpd.apache.org/docs-2.2/upgrading.html"/>.
   </para>
  </sect2>

  <sect2 id="sec-apache2-more-information-modules">
   <title> Apache Module </title>
   <para>
    Weitere Informationen zu externen Apache-Modulen, die kurz im Abschnitt <xref linkend="sec-apache2-modules-external"/> beschrieben werden, finden Sie an folgenden Orten:
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       <ulink url="http://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mod-auth_kerb</term>
     <listitem>
      <para>
       <ulink url="http://modauthkerb.sourceforge.net/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.mono-project.com/Mod_mono"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://perl.apache.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-more-information-cgi">
   <title>Entwicklung</title>
   <para>
    Weitere Informationen zur Entwicklung von Apache-Modulen sowie zur Teilnahme am Apache-Webserver-Projekt finden Sie unter folgenden Adressen:
   </para>
   <variablelist>
    <varlistentry>
     <term>Informationen für Apache-Entwickler</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Dokumentation für Apache-Entwickler</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/docs/2.2/developer/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Entwickeln von Apache-Modulen mit Perl und C </term>
     <listitem>
      <para>
       <ulink url="http://www.modperl.com/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

<?dbfo-need height="10em"?>



  <sect2 id="sec-apache2-more-information-miscellaneous-sources">
   <title>Verschiedene Informationsquellen</title>
   <para>
    <phrase os="sles;sled">Wenn Sie in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> Probleme mit Apache haben, werfen Sie einen Blick in die technische Informationssuche unter <ulink url="http://www.novell.com/support"/>.</phrase> Die Entstehungsgeschichte von Apache finden Sie unter <ulink url="http://httpd.apache.org/ABOUT_APACHE.html"/>. Auf dieser Seite erfahren Sie auch, weshalb dieser Server Apache genannt wird.
   </para><indexterm class="endofrange" startref="idx-apache2"/>
  </sect2>
 </sect1>
</chapter>
