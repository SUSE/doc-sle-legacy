<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sect1 PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<sect1 xml:base="suse_sw_packages.xml" id="sec.suse.packages">
 <title>特殊軟體套件的資訊</title>

 <para>
  程式 <systemitem class="resource">bash</systemitem>、<systemitem class="resource">cron</systemitem>、<systemitem class="resource">logrotate</systemitem>、<systemitem class="resource">locate</systemitem>、<systemitem class="resource">ulimit</systemitem> 和 <systemitem class="resource">free</systemitem>，對系統管理員和許多使用者而言十分重要。man 頁面和 info 頁面是兩個很有用的指令資訊來源，但並非隨時都能使用。GNU Emacs 是非常普遍而且很好設定的文字編輯器。
 </para>

 <sect2 id="sec.suse.packages.bash">
  <title>bash 套件與 /etc/profile</title><indexterm> <primary>Bash</primary><secondary>設定檔</secondary></indexterm><indexterm><primary>組態檔 </primary><secondary>設定檔</secondary></indexterm>
  <para>
   Bash 是預設的系統外圍程序。如果以它做為登入外圍程序，可以讀取多種啟始化檔案。Bash 會以它們顯示在清單中的順序來處理。
  </para>
<?dbfo-need height="10em"?>


  <orderedlist spacing="normal">
   <listitem>
    <para>
     <filename>/etc/profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/etc/bash.bashrc</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.bashrc</filename>
    </para>
   </listitem>
  </orderedlist><indexterm> <primary>Bash</primary> <secondary>.bashrc</secondary> </indexterm> <indexterm> <primary>Bash</primary> <secondary>.profile</secondary> </indexterm> <indexterm> <primary>組態檔</primary> <secondary>.bashrc</secondary> </indexterm> <indexterm> <primary>組態檔</primary> <secondary>.profile</secondary> </indexterm>
  <para>
   在 <filename>~/.profile</filename> 或 <filename>~/.bashrc</filename> 中進行自定設定。為了要確保這些檔案能正確的處理，您必須將基本設定從 <filename>/etc/skel/.profile</filename> 或 <filename>/etc/skel/.bashrc</filename> 中複製至使用者的主目錄。建議您在更新後從 <filename>/etc/skel</filename> 複製設定。請執行下列的外圍程式指令，以避免遺失您調整過的設定。
  </para>
<screen>mv ~/.bashrc ~/.bashrc.old
cp /etc/skel/.bashrc ~/.bashrc
mv ~/.profile ~/.profile.old
cp /etc/skel/.profile ~/.profile</screen>
  <para>
   然後個人的調整設定需要從 <literal>*.old</literal> 檔案再複製回去。

  </para>
 </sect2>

 <sect2 id="sec.suse.packages.cron">

  <title>cron 套件</title><indexterm> <primary>cron</primary> </indexterm> <indexterm> <primary>組態檔</primary> <secondary>crontab</secondary> </indexterm>
  <para>
   如果您需要按預先定義的時間，在背景中定期自動執行指令，則可以使用 cron 工具。cron 由採用特殊格式的時間表驅動。其中一些表格是由系統提供，使用者也可以視需要撰寫自己的表格。
  </para>
  <para>
   cron 表格現在位於 <filename>/var/cron/tabs</filename>。<filename>/etc/crontab</filename> 做為整個系統的 cron 表格。在時間表格之後、指令之前，輸入要直接執行指令的使用者名稱。在 <xref linkend="ex.suse.packages.cron"/> 中，則是輸入 <systemitem class="username">root</systemitem>。位於 <filename>/etc/cron.d</filename> 的套件專用表格有相同的格式。請參閱 <command>cron</command> man 頁面 (<command>man cron</command>)。
  </para>
  <example id="ex.suse.packages.cron">
   <title>/etc/crontab 中的項目</title>
<screen>1-59/5 * * * *   root   test -x /usr/sbin/atrun &amp;&amp; /usr/sbin/atrun</screen>
  </example>
  <para>
   您不能呼叫 <filename>crontab -e</filename> 指令來編輯 <command>/etc/crontab</command>。這個檔案必須直接載入編輯器中，然後進行修改和儲存。
  </para>
  <para>
   有些套件會將外圍程式程序檔安裝至 <filename>/etc/cron.hourly</filename>、<filename>/etc/cron.daily</filename>、<filename>/etc/cron.weekly</filename> 及 <filename>/etc/cron.monthly</filename> 目錄中，由 <filename>/usr/lib/cron/run-crons</filename> 控制其執行。<filename>/usr/lib/cron/run-crons</filename> 每隔 15 分鐘會從主表格 (<filename>/etc/crontab</filename>) 執行一次。這會保證被忽略的程序可以在適當的時間執行。
  </para>
  <para>
   若要在自定的時間執行 <filename>hourly</filename>、<filename>daily</filename> 或其他定期維護程序檔，請定期使用 <filename>/etc/crontab</filename> 項目移除時戳檔案 (請參閱<xref linkend="ex.suse.packages.cron.time"/>，它可以在每個整點前移除 <filename>hourly</filename>，在每天凌晨的 2:14 移除 <filename>daily</filename> 等)。
  </para>
  <example id="ex.suse.packages.cron.time">
   <title>/etc/crontab：移除時戳檔案</title>
<screen>59 *  * * *     root  rm -f /var/spool/cron/lastrun/cron.hourly
14 2  * * *     root  rm -f /var/spool/cron/lastrun/cron.daily
29 2  * * 6     root  rm -f /var/spool/cron/lastrun/cron.weekly
44 2  1 * *     root  rm -f /var/spool/cron/lastrun/cron.monthly</screen>
  </example>
  <para>
   或者，可以將 <filename>/etc/sysconfig/cron</filename> 中的 <literal>DAILY_TIME</literal> 設定為 <filename>cron.daily</filename> 啟動的時間。<literal>MAX_NOT_RUN</literal> 設定確保日常任務能夠觸發並加以執行，即使使用者在長時間內均未於指定的 <literal>DAILY_TIME</literal> 開啟電腦。<literal>MAX_NOT_RUN</literal> 的最大值為 14 天。
  </para>
  <para>
   為明確起見，日常系統維護工作會配送至不同的程序檔。它們包含在 <systemitem class="resource">aaa_base</systemitem> 套件中。例如，<filename>/etc/cron.daily</filename> 中有 <filename>suse.de-backup-rpmdb</filename>、<filename>suse.de-clean-tmp</filename> 或 <filename>suse.de-cron-local</filename> 元件。
   
  </para>
 </sect2>

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="suse_logfiles.xml" parse="xml"/>

 <sect2 id="sec.suse.locate">
  <title>locate 指令</title><indexterm> <primary>檔案</primary> <secondary>尋找</secondary> </indexterm> <indexterm> <primary>位於</primary> </indexterm>
  <para>
   可以快速尋找檔案的 <command>locate</command> 指令，未包含在軟體標準安裝的範圍內。若有需要，請安裝 <systemitem>findutils-locate</systemitem> 套件。updatedb 程序會在每晚自行啟動，或啟動系統後的 15 分鐘左右啟動。
  </para>
 </sect2>

 <sect2 id="sec.suse.ulimit">
  <title>ulimit 指令</title><indexterm> <primary>ulimit</primary> </indexterm> <indexterm> <primary>核心檔</primary> </indexterm> <indexterm> <primary>系統</primary> <secondary>限制資源使用</secondary> </indexterm>
  <para>
   利用 <command>ulimit</command> (<emphasis>user limits</emphasis>) 指令，您可以限制系統資源的使用，並顯示這些限制。<command>ulimit</command> 對於限制應用程式可使用的記憶體特別有用。利用它，可以避免應用程式佔用過多的系統資源，降低作業系統效能，甚至讓系統當機。
  </para>
  <para>
   <command>ulimit</command> 可以搭配多種選項來使用。若要限制記憶體的使用，請利用<xref linkend="tab.suse.packages.ulimit"/> 中所列的選項。
  </para><indexterm> <primary>ulimit</primary> <secondary>選項</secondary> </indexterm>
  <table id="tab.suse.packages.ulimit">
   <title><command>ulimit</command>：設定使用者的資源</title>

   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-m</option>
       </para>
      </entry>
      <entry>
       <para>
        最大的常駐集大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-v</option>
       </para>
      </entry>
      <entry>
       <para>
        外圍程序可用的虛擬記憶體最大容量
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        堆疊的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        所建立的核心檔案的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-a</option>
       </para>
      </entry>
      <entry>
       <para>
        將會報告所有目前限制
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table><indexterm> <primary>組態檔</primary> <secondary>設定檔</secondary> </indexterm>
  <para>
   您可以在 <filename>/etc/profile</filename> 中設定全系統的項目。在此可建立核心檔案 (供程式設計人員<emphasis>除錯</emphasis>之用)。一般使用者無法增加系統管理員在 <filename>/etc/profile</filename> 中所指定的值，但可以在 <filename>~/.bashrc</filename> 中建立特殊的設定項目。
  </para><indexterm> <primary>組態檔</primary><secondary>.bashrc</secondary> </indexterm>
  <example id="ex.u.ulimit.bashrc">
   <title>ulimit：~/.bashrc 中的設定</title>
<screen># Limits maximum resident set size (physical memory):
ulimit -m 98304
 
# Limits of virtual memory:
ulimit -v 98304</screen>
  </example>
  <para>
   記憶體配置的單位必須為 KB。如需詳細資訊，請參閱 <command>man bash</command>。
  </para>
  <important>
   <para>
    並非所有的外圍程序都支援 <command>ulimit</command> 指示詞。在您根據這些限制的內含設定時，PAM (例如 <literal>pam_limits</literal>) 會提供全面的調整設定。
   </para>
  </important>
 </sect2>

 <sect2 id="sec.suse.free">
  <title>free 指令</title><indexterm> <primary>記憶體</primary> <secondary>RAM</secondary> </indexterm> <indexterm> <primary>指令</primary> <secondary>free</secondary> </indexterm>
  <para>
   <command>free</command> 指令顯示系統中總的可用與已用實體記憶體及交換空間，以及核心耗用的緩衝區和快取。<emphasis>可用的 RAM</emphasis> 的概念要回溯到聯合記憶體管理的年代之前。<emphasis>記憶體要物盡其用的</emphasis>口號非常適用於 Linux。所以，Linux 一直致力於平衡快取，而不允許有剩餘或未使用的記憶體。
  </para>
  <para>
   基本上，核心不會有任何應用程式或使用者資料的的直接知識。相反地，它會在<emphasis>頁面快取</emphasis>中管理應用程式與使用者資料。如果記憶體不足，部份的記憶體資料會寫入交換分割區或檔案中，這部份一開始就能用 <command>mmap</command> 指令的協助來讀取 (請參閱 <command>man mmap</command>)。
  </para><indexterm> <primary>核心</primary> <secondary>快取</secondary> </indexterm>
  <para>
   核心也可以有其他的快取，例如 <emphasis>slab 快取</emphasis>，網路存取的快取資料會儲存於此處。這可以解釋 <filename>/proc/meminfo</filename> 中計數器之間的不同。它們大部分 (但非全部) 都可以透過 <filename>/proc/slabinfo</filename> 來存取。
  </para>
  <para>
   不過，如果您的目標是要得知目前使用了多少 RAM，請在 <filename>/proc/meminfo</filename> 中尋找此資訊。
  </para>
 </sect2>

 <sect2 id="sec.suse.manpages">
  <title>man 頁面和資訊頁面</title><indexterm> <primary>man 頁面</primary> </indexterm> <indexterm> <primary>info 頁面</primary> </indexterm> <indexterm> <primary>說明</primary> <secondary>man 頁面</secondary> </indexterm> <indexterm> <primary>說明</primary> <secondary>info 頁面</secondary> </indexterm>
  <para>
   某些 GNU 應用程式 (例如 tar) 不再支援 man 頁面。針對這些指令，請使用 <option>--help</option> 選項來取得 info 頁面的快速綜覽，這些頁面將提供更深入詳盡的說明。info 是 GNU 的超連結文字系統。您可以輸入 <command>info</command><option>info</option> 來讀取此系統的介紹。您可以輸入 <command>emacs<option> -f info</option></command> 或直接在主控台中使用 <command>info</command>，以便使用 Emacs 檢視 info 頁面。您也可以使用 tkinfo、xinfo 或說明系統來檢視資訊頁面。
  </para>
 </sect2>



 <sect2 id="sec.suse.packages.man">
  <title>使用 <command>man</command> 指令選取 man 頁面</title>
  <para>
   若要閱讀 man 頁面，請輸入 <command>man <replaceable>man_page</replaceable></command>。如果不同區段中存在同名的 man 頁面，所有的這些 man 頁面都會列出，並會顯示對應的區段號碼。請選取要顯示的那個頁面。如果您未在幾秒內輸入區段號碼，將會顯示第一個 man 頁面。
  </para>
  <para>
   如果您要將此行為設定為預設系統行為，請在外圍程序啟始化檔案 (例如 <filename>~/.bashrc</filename>) 中設定 <literal>MAN_POSIXLY_CORRECT=1</literal>。
  </para>
 </sect2>

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="suse_emacs.xml" parse="xml"/>
</sect1>
