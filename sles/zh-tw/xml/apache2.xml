<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="apache2.xml" id="cha-apache2">
 <title>Apache HTTP 伺服器</title><indexterm class="startofrange" id="idx-apache2"> <primary>Apache</primary> </indexterm>
 <abstract>
  <para>
   根據 <ulink url="http://www.netcraft.com/"/> 的調查結果顯示，Apache HTTP 伺服器 (Apache) 在市面上佔有率已超過 50%，是目前全世界最多人使用的網頁伺服器。由 Apache 軟體基金會 (<ulink url="http://www.apache.org/"/>) 研發的 Apache 可在大部分作業系統上使用。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 隨附 Apache 2.2 版本。本章將介紹如何安裝、組態設定與設定 Web 伺服器，如何使用 SSL、CGI 與其他模組，以及如何排解 Apache 疑難。
  </para>
 </abstract>
 <sect1 id="sec-apache2-quickstart">
  <title>快速入門</title><indexterm> <primary>Apache</primary> <secondary>快速入門</secondary> </indexterm>

  <para>
   本節的說明可協助您快速設定和啟動 Apache。您必須登入為 <systemitem class="username">root</systemitem> 身分，才能安裝和設定 Apache。
  </para>

  <sect2 id="sec-apache-quickstart-requirements">
   <title>要求</title>
   <para>
    在設定 Apache Web 伺服器之前，請先確定您已符合下列要求︰
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      此機器的網路已正確設定。如需有關這個主題的詳細資訊，請參閱 <xref linkend="cha-basicnet"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      此機器的實際系統時間已透過時間伺服器進行同步維護。這是必要動作，因為 HTTP 通訊協定的部分內容會依據正確時間來運作。如需有關這個主題的詳細資訊，請參閱<xref linkend="cha-netz-xntp"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      已安裝最新的安全性更新。如果不清楚是否已安裝，請執行「YaST 線上更新」。
     </para>
    </listitem>
    <listitem>
     <para>
      防火牆中已開啟預設的 Web 伺服器連接埠 (<literal>80</literal>)。針對這點，請將 SUSEFirewall2 設定成允許在外部區域執行 <guimenu>HTTP 伺服器</guimenu>服務。您可以使用 YaST 完成此設定。如需詳細資料，請參閱 <xref linkend="sec-fire-SuSE-yast"/>。
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 id="sec-apache2-quickstart-installation">
   <title>安裝</title><indexterm> <primary>Apache</primary> <secondary>安裝</secondary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 預設不會安裝到系統。若要以可<quote>直接</quote>執行的預先定義標準組態進行安裝，請按照以下步驟操作︰
   </para>
   <procedure>
    <title>以預設組態安裝 Apache</title>
    <step performance="required">
     <para>
      啟動 YaST，然後選取<menuchoice><guimenu>軟體</guimenu> <guimenu>軟體管理</guimenu></menuchoice>。
     </para>
    </step>
    <step performance="required">
     <para>
      選擇<menuchoice> <guimenu>過濾器</guimenu><guimenu>模式</guimenu> </menuchoice>，然後在<guimenu>伺服器功能</guimenu>中選取<guimenu>Web 與 LAMP 伺服器</guimenu>。
     </para>
    </step>
    <step performance="required">
     <para>
      請確蓋安裝個別套件，完成此安裝程序。
     </para>
    </step>
   </procedure>
   <para>
    此項安裝會安裝多重處理模組 <systemitem>apache2-prefork</systemitem> 與 PHP5 模組。如需關於各種模組的詳細資訊，請參閱<xref linkend="sec-apache2-modules"/>。
   </para>
  </sect2>

  <sect2 id="sect-apache-quickstart-start">
   <title>開始</title>
   <para>
    您可讓 Apache 在開機時自動啟動或者手動將其啟動。
   </para>
   <procedure>
    <title>自動啟動 Apache</title>
    <step performance="required">
     <para>
      為確定 Apache 會在開機階段的執行層級 <literal>3</literal> 與 <literal>5</literal> 自動啟動，請執行以下指令︰
     </para>
<screen>chkconfig -a apache2</screen>
    </step>
    <step performance="required">
     <para>
      或者，請啟動 YaST，然後選取<menuchoice><guimenu>系統</guimenu><guimenu>系統服務 (執行層級)</guimenu></menuchoice>。
     </para>
    </step>
    <step performance="required">
     <para>
      搜尋 <emphasis>apache2</emphasis> 並<guimenu>啟用</guimenu>該服務。
     </para>
     <para>
      網頁伺服器將立即啟動。
     </para>
    </step>
    <step performance="required">
     <para>
      按一下<guimenu>完成</guimenu>儲存您的變更。
     </para>
     <para>
      系統即設定為在開機階段的執行層級 <literal>3</literal> 與 <literal>5</literal> 自動啟動 Apache。
     </para>
    </step>
   </procedure>
   <para>
    如需 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中執行層級的詳細資訊與 YaST 執行層級編輯器的說明，請參閱<xref linkend="sec-boot-runlevel-edit"/>。
   </para>
   <para>
    若要使用外圍程序手動啟動 Apache，請執行 <command>rcapache2 start</command>。
   </para>
   <procedure>
    <title>檢查 Apache 是否正在執行</title>
    <para>
     如果您在啟動 Apache 時未接收到錯誤訊息，這通常表示 Web 伺服器正在執行。若要對此進行測試︰
    </para>
    <step performance="required">
     <para>
      啟動瀏覽器，並開啟 <ulink url="http://localhost/"/>。
     </para>
     <para>
      如果 Apache 已啟動且正在執行，系統會顯示<quote>正常運作！</quote>的測試頁面。
     </para>
    </step>
    <step performance="required">
     <para>
      如果此頁面沒有出現，請參閱<xref linkend="sec-apache2-troubleeshooting"/>。
     </para>
    </step>
   </procedure>
   <para>
    現在網頁伺服器已經開始執行，您可以加入自己的文件、根據個人需求調整組態，或是安裝模組來新增功能。
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-configuration">
  <title>設定 Apache</title><indexterm> <primary>Apache</primary> <secondary>設定</secondary> </indexterm>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了兩個組態選項：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手動設定組態可以提供較詳細的設定，但是缺乏 YaST GUI 提供的方便性。
  </para>

  <important>
   <title>在組態變更後重新載入或重新啟動 Apache</title>
   <para>
    大多數組態變更需要重新載入 (有些還需要重新啟動) Apache 才能生效。請使用 <command>rcapache2 <option>reload</option></command> 以手動方式重新載入 Apache，或使用<xref linkend="sec-apache2-start-stop"/> 中所述的其中一個重新啟動選項。
   </para>
   <para>
    如果使用 YaST 來設定 Apache，依照<xref linkend="sec-apache2-configuration-yast-server-configuration"/>中所述將<guimenu>HTTP 服務</guimenu>設定為<guimenu>已啟用</guimenu>，即可讓上述操作自動完成。
   </para>
  </important>

  <sect2 id="sec-apache2-configuration-manually-configfiles">
   <title>Apache 組態檔案</title><indexterm> <primary>Apache</primary> <secondary>設定</secondary><tertiary>檔案</tertiary> </indexterm>
   <para>
    本節提供 Apache 組態檔案的綜覽。如果使用 YaST 設定組態，則無需變更這些檔案。不過，如果您要在以後改為以手動方式設定組態，該資訊可能會對您有用。
   </para>
   <para>
    您可以在下列兩個不同位置找到 Apache 組態檔案：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> 可控制部分的 Apache 全域設定，例如要載入的模組、要包含的其他組態檔案、伺服器應該啟動的旗標，以及應該新增至指令行的旗標。此檔案對每個組態選項都進行了詳細說明，因此本文不予以介紹。針對一般用途的網頁伺服器，在 <filename>/etc/sysconfig/apache2</filename> 中的設定應該可以符合任何組態需求。
    </para>
   </sect3>
   <sect3 id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> 代管了 Apache 的所有組態檔案。以下各節將說明每個檔案的用途。每個檔案都包含了數個組態選項 (又稱為<emphasis>指示詞</emphasis>)。在這些檔案中的每個組態選項都會詳加說明，因此本文將不予以介紹。
    </para>
    <para>
     Apache 組態檔案的組織方式如下：
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv 
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>在 /etc/apache2/ 中的 Apache 組態檔案</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        指定不同語言所要使用的字元集。請不要編輯此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        組態檔案由其他模組新增。這些組態檔案可以依實際需要包含至虛擬主機組態。如需範例，請參閱 <filename>vhosts.d/vhost.template</filename>。若要執行這個動作，您可以為不同的虛擬主機提供不同的模組組合。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        使用合理預設值設定所有虛擬主機的全域組態。這時不是變更組態值，而是採用虛擬主機組態覆寫組態值。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        定義 Apache 處理錯誤的方式。若要自定這些傳送給所有虛擬主機的訊息，請編輯此檔案。另外一種方法是覆寫虛擬主機組態中的這些指示詞。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        主要的 Apache 伺服器組態檔案。請勿變更此檔案。此檔案主要包含 Include 陳述式和全域設定。為此處列出的相關組態檔案覆寫全域設定。變更虛擬主機組態的主機特定設定 (例如文件根目錄)。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        繫結 Apache 至特定的 IP 位址與連接埠在此檔案中也可以設定以名稱為基礎的虛擬主機。如需詳細資料，請參閱<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        mime_magic 模組的資料，此模組可協助 Apache 自動判斷不明檔案的 MIME 類型。請不要變更此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        系統已知的 MIME 類型 (實際上是 <filename>/etc/mime.types</filename> 的連結)。請不要編輯此檔案。如果您需要新增這裡未列出的 MIME 類型，請將它們新增到 <filename>mod_mime-defaults.conf</filename>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        預設已安裝之模組的組態檔案。如需詳細資訊，請參閱<xref linkend="sec-apache2-modules"/>。請注意，選用模組的組態檔案會存放在 <filename>conf.d</filename> 目錄。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        包含不同 MPM 的組態指示詞 (請參閱<xref linkend="sec-apache2-modules-mpm"/>) 和可控制 Apache 效能的一般組態選項。請在變更此檔案之後為網頁伺服器進行適當測試。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> 和 <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        全域 SSL 組態和 SSL 憑證資料。如需詳細資訊，請參閱<xref linkend="sec-apache2-ssl"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        自動從 <filename>/etc/sysconfig/apache2</filename> 產生的組態檔案。請勿改變其中任何檔案 -- 而是編輯 <filename>/etc/sysconfig/apache2</filename>。請不要將其他組態檔案置於此目錄中。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        指定要在哪個使用者和群組 ID 之下執行 Apache。請不要變更此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        您的虛擬主機組態應存放於此處。該目錄包含採用或不採用 SSL 之虛擬主機的樣板檔案。此目錄中以 <filename>.conf</filename> 結尾的每個檔案都會自動包含在 Apache 組態中。如需詳細資訊，請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-configuration-manually">
   <title>手動設定 Apache</title><indexterm class="startofrange" id="idx-apache2-configuration-manually"> <primary>Apache</primary> <secondary>設定</secondary><tertiary>手動</tertiary> </indexterm>
   <para>
    以手動方式設定 Apache 是指以 <systemitem class="username">root</systemitem> 使用者身分來編輯純文字組態檔案。
   </para>
   <sect3 id="sec-apache2-configuration-manually-vhost">
    <title>虛擬主機組態</title><indexterm> <primary>Apache</primary> <secondary>設定</secondary><tertiary>虛擬主機</tertiary> </indexterm>
    <para>
     <emphasis>「虛擬主機」</emphasis>一詞，是形容 Apache 從同一部實體機器提供多個通用資源識別字串 (URI，Universal Resource Identifier) 的能力。這是指同時由一部實體電腦的單一網頁伺服器來執行多個領域 (例如，www.example.com 和 www.example.net)。
    </para>
    <para>
     使用虛擬主機的目的，經常是為了節省管理工作 (只需要維護一部網頁伺服器) 和硬體開銷 (不需要將各個網域安裝在專屬伺服器上)。虛擬主機可以使用名稱、IP 或是連接埠作為基礎。
    </para>
    <para>
     若要列出所有現有的虛擬主機，請使用指令 <command>httpd2 <option>-S</option></command>。該指令將輸出一份清單，顯示預設伺服器和所有虛擬主機，以及它們的 IP 位址和監聽埠。此外，該清單還顯示每個虛擬主機在組態檔案中的位置。
    </para>
    <para>
     虛擬主機可依照<xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>中所述透過 YaST 設定，或是手動編輯組態檔案來設定。依預設，系統會根據 <phrase role="productname"><phrase os="sles">/etc/apache2/vhosts.d/</phrase> 中每部虛擬主機一個組態檔案的設定，為在 </phrase>SUSE Linux Enterprise Server<filename/> 中執行的 Apache 做好準備。此目錄中副檔名為 <filename>.conf</filename> 的所有檔案，都會自動包含至組態中。這個目錄會提供虛擬主機的基本樣板 (<filename>vhost.template</filename>，或是適用於提供 SSL 支援之虛擬主機的 <filename>vhost-ssl.template</filename>)。
    </para>
    <tip>
     <title>永遠要建立虛擬主機組態</title>
     <para>
      建議您務必要建立虛擬主機組態檔案，即使網頁伺服器只代管一個網域。如此，您不但可以將網域專屬組態存放在一個檔案中，還可以隨時回復至運作正常的基本組態，只需移動、刪除或重新命名虛擬主機的組態檔案即可。同樣地，您應該也要分別為每個虛擬主機建立組態。
     </para>
     <para>
      使用名稱型虛擬主機時，建議設定預設組態，以便在網域名稱與虛擬主機組態不相符時使用。系統會首先載入預設虛擬主機的組態。由於組態檔案的順序由檔案名稱決定，因此請在預設虛擬主機組態檔案名稱的開頭使用底線字元 (<literal>_</literal>)，以確定該檔案最先載入 (例如︰<filename>_default_vhost.conf</filename>)。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem> 區塊包含要套用到特定網域的資訊。當 Apache 接收到來自定義的虛擬主機的用戶端要求時，就會使用本節所包含的指示詞。幾乎所有指示詞都可以用於虛擬主機網路位置。如需更多有關 Apache 組態指示詞的詳細資訊，請參閱<ulink url="http://httpd.apache.org/docs/2.2/mod/quickreference.html"/>。
    </para>
    <sect4 id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>以名稱為基礎的虛擬主機</title>
     <para>
      使用以名稱為基礎的虛擬主機時，每個 IP 位址可以為數個網站提供服務。Apache 會使用用戶端所傳送之 HTTP 標頭中的主機欄位，將要求連接到與其中一個虛擬主機宣告相符的 <systemitem>ServerName</systemitem> 項目。如果沒有找到相符的 <systemitem>ServerName</systemitem>，就會預設使用第一個指定的虛擬主機。
     </para>
     <para>
      <systemitem>NameVirtualHost</systemitem> 指示詞通知 Apache 要在哪個 IP 位址及哪個連接埠 (選擇性) 上監聽 HTTP 標頭中包含網域名稱的用戶端要求。這個選項會設定在組態檔案 <filename>/etc/apache2/listen.conf</filename>。
     </para>
     <para>
      第一個引數可以是完全合格的網域名稱 (Fully Qualified Domain Name)，但是建議最好使用 IP 位址。第二個引數是連接埠，此引數是可選的。預設會使用連接埠 <systemitem>80</systemitem>，並且您可以透過 <systemitem>Listen</systemitem> 指示詞對其進行設定。
     </para>
     <para>
      IP 位址和連接埠號碼都可以使用萬用字元 <literal>*</literal>，來接收所有介面上的要求。IPv6 位址必須包在方括號中。
     </para>
     <example id="ex-apache2-virtual-hosts-name-based">
      <title>以名稱為基礎的 <systemitem>VirtualHost</systemitem> 項目變化</title>
<screen># NameVirtualHost <replaceable>IP-address</replaceable><replaceable>[:Port]</replaceable>
NameVirtualHost 192.168.3.100:80
NameVirtualHost 192.168.3.100
NameVirtualHost *:80
NameVirtualHost *
NameVirtualHost [2002:c0a8:364::]:80</screen>
     </example>
     <para>
      開啟的 <systemitem>VirtualHost</systemitem> 標籤會將前面經由 <systemitem>NameVirtualHost</systemitem> 宣告的 IP 位址 (或完全合格的網域名稱) 當作以名稱為基礎之虛擬主機的組態引數。先前使用 <systemitem>NameVirtualHost</systemitem> 指示詞宣告的連接埠號碼屬於選擇性。
     </para>
     <para>
      允許使用萬用字元 <emphasis>*</emphasis> 做為 IP 位址的替代符號。此語法只適用於在 <systemitem>NameVirtualHost *</systemitem> 中結合使用萬用字元的情形。如果是使用 IPv6 位址，該位址就必須用方括號包住。
     </para>
     <example id="ex-apache-directives-virtualhost-name-based">
      <title>以名稱為基礎的 <systemitem>VirtualHost</systemitem> 指示詞</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>以 IP 為基礎的虛擬主機</title>
     <para>
      此虛擬主機組態替代方法需要為一台機器設定多個 IP。一個 Apache 例項可裝載多個網域，每個網域都會指定不同的 IP。
     </para>
     <para>
      實體伺服器必須為每部以 IP 為基礎的虛擬主機設定一個 IP 位址。當該電腦沒有安裝多張網路卡時，也可以使用虛擬網路介面 (IP 別名)。
     </para>
     <para>
      下列範例將示範，Apache 正執行於 IP <systemitem class="ipaddress">192.168.3.100</systemitem> 的電腦上，並負責代管 IP <systemitem class="ipaddress">192.168.3.101</systemitem> 與 <systemitem class="ipaddress">192.168.3.102</systemitem> 兩個領域。每部虛擬伺服器都必須具備個別的 <systemitem>VirtualHost</systemitem> 區塊。
     </para>
     <example id="ex-apache-directives-virtualhost-ip-based">
      <title>以 IP 為基礎的 <systemitem>VirtualHost</systemitem> 指示詞</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      這裡出淚的 <systemitem>VirtualHost</systemitem> 指示詞，只能指定給 <systemitem>192.168.3.100</systemitem> 以外的其他介面。如果 <systemitem>192.168.3.100</systemitem> 也有設定 <systemitem>Listen</systemitem> 指示詞，這時就必須建立另一個以 IP 為基礎的虛擬主機，來回應 HTTP 要求給該介面 -- 另一種做法是套用預設伺服器組態 (<filename>/etc/apache2/default-server.conf</filename>) 所顯示的指示詞。
     </para>
    </sect4>
    <sect4 id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>基本虛擬主機組態</title>
     <para>
      每個虛擬主機組態中至少要出現下列指示詞，才能設定虛擬主機。如需瞭解更多選項的詳細資訊，請參閱 <filename>/etc/apache2/vhosts.d/vhost.template</filename>。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         完全合格網域名稱，其下是應該要建立位址的主機。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         目錄路徑，Apache 會從此路徑為此主機提供檔案。基於安全性考量，存取整個檔案系統是預設禁止的動作，所以您必須明確解除鎖定這個位在 <systemitem>Directory</systemitem> 容器中的目錄。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         伺服器管理員的電子郵件地址. 這個地址可顯示在 Apache 建立的錯誤頁面 (舉例說明)。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         此虛擬主機的錯誤記錄檔案。雖然沒必要為每個虛擬主機分別建立錯誤記錄檔案，但是多數人會這樣做，以便除錯更加容易。<filename>/var/log/apache2/</filename> 是 Apache 記錄檔案的預設目錄。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         此虛擬主機的存取記錄檔案。雖然沒必要為每個虛擬主機分別建立存取記錄檔案，但是多數人會這樣做，以便分別為每部主機分析存取統計資料。<filename>/var/log/apache2/</filename> 是 Apache 記錄檔案的預設目錄。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      正如前面所述，存取整個檔案系統已因安全性考量而預設為禁止動作。因此，請將 Apache 要處理之檔案所在的目錄明確解除鎖定 — 例如 <systemitem>DocumentRoot</systemitem>。
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Order allow,deny
  Allow from all
&lt;/Directory&gt;</screen>
     <para>
      此完整組態看起來如下：
     </para>
     <example id="ex-apache-directives-virtualhost-basic-configuration">
      <title>基本 <systemitem>VirtualHost</systemitem> 組態</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
    Order allow,deny
    Allow from all
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example><indexterm class="endofrange" startref="idx-apache2-configuration-manually"/>
    </sect4>
   </sect3>
  </sect2>



  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apache2_yast_i.xml" parse="xml"/>


 </sect1>
 <sect1 id="sec-apache2-start-stop">
  <title>啟動和停止 Apache</title><indexterm> <primary>Apache</primary> <secondary>啟動</secondary></indexterm> <indexterm><primary>Apache</primary> <secondary>停止</secondary></indexterm>

  <para>
   如果 Apache 是依照<xref linkend="sec-apache2-configuration-yast"/> 中所述使用 YaST 來設定，它會於開機階段的執行層級 3 和 5 啟動，在執行層級 0、1、2 和 6 停止。您可以使用 YaST 的執行層級編輯器或指令行工具 <command>chkconfig</command> 來變更此行為。
  </para>

  <para>
   若要在執行中的系統上啟動、停止或操作 Apache，請使用 init 程序檔 <command>/usr/sbin/rcapache2</command>。如需 init 程序檔的一般資訊，請參閱<xref linkend="sec-boot-init-skripte"/>。<command>rcapache2</command> 指令會接受下列參數：
  </para>

  <variablelist>
   <varlistentry>
    <term><option>狀態</option>
    </term>
    <listitem>
     <para>
      檢查 Apache 是否已啟動。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>start</option>
    </term>
    <listitem>
     <para>
      啟動尚未執行的 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>startssl</option>
    </term>
    <listitem>
     <para>
      若採用 SSL 支援的 Apache 不在執行中，則將其啟動。如需更多有關 SSL 支援的詳細資訊，請參閱<xref linkend="sec-apache2-ssl"/>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>停止</option>
    </term>
    <listitem>
     <para>
      透過終止父處理程序來停止 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart</option>
    </term>
    <listitem>
     <para>
      停止 Apache，然後重新啟動。啟動之前並未在執行中的網頁伺服器。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>try-restart</option>
    </term>
    <listitem>
     <para>
      若 Apache 已在執行中，則將其停止並重新啟動。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>reload</option> 或 <option>graceful</option>
    </term>
    <listitem>
     <para>
      通知所有 Apache 衍生處理程序在關機之前先完成各自的要求，以停止網頁伺服器。每個程序結束後都會被一個新啟動的程序所取代，最終會將 Apache 完全<quote>重新啟動</quote>。
     </para>
     <tip>
      <title>在線上環境中重新啟動 Apache</title>
      <para>
       若要啟用 Apache 組態中的變更而不引起連接中斷，請使用 <command>rcapache2 <option>reload</option></command> 指令。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart-graceful</option>
    </term>
    <listitem>
     <para>
      啟動另一部可立即處理所有收到的要求的 Web 伺服器。Web 伺服器的上一個例項繼續處理所有現有的要求，持續時間為 <systemitem>GracefulShutdownTimeout</systemitem> 所設定的指定期間。
     </para>
     <para>
      若要升級到新版本或變更需要重新啟動的組態選項，<command>rcapache2 <option>restart-graceful</option></command> 十分有用。使用此選項可讓伺服器的停機時間降至最低。
     </para>
     <para>
      必須設定 <systemitem>GracefulShutdownTimeout</systemitem>，否則 <option>restart-graceful</option> 將導致系統定期重新啟動。若設定為零，伺服器將無限期等待，直到所有剩餘的要求全部處理完為止。
     </para>
     <para>
      若原始 Apache 例項無法清除所有必需的資源，則正常的重新啟動可能會失敗。在這種情況下，該指令將導致漸進式停止。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop-graceful</option>
    </term>
    <listitem>
     <para>
      於 <systemitem>GracefulShutdownTimeout</systemitem> 所設定的指定期間後停止 Web 伺服器，以確保系統可以完成現有的要求。
     </para>
     <para>
      必須設定 <systemitem>GracefulShutdownTimeout</systemitem>，否則 <option>stop-graceful</option> 將導致系統定期重新啟動。若設定為零，伺服器將無限期等待，直到所有剩餘的要求全部處理完為止。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>configtest</option> 或 <option>extreme-configtest</option>
    </term>
    <listitem>
     <para>
      在不影響執行中之網頁伺服器的情況下，檢查組態檔案的語法。因為這項檢查會在每次伺服器啟動、重新載入或重新啟動時強制進行，所以通常並不需要明確執行該測試 (若發現有組態錯誤，Web 伺服器就不會完成啟動、重新載入或是重新啟動作業)。<option>extreme-configtest</option> 選項會以使用者 <systemitem class="username">nobody</systemitem> 的身分啟動 Web 伺服器並實際載入組態，因此系統可能會偵測到較多錯誤。請注意，雖然載入了組態，但是無法測試 SSL 設定，因為 <systemitem class="username">nobody</systemitem> 無法讀取 SSL 證書。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>probe</option>
    </term>
    <listitem>
     <para>
      查探重新載入的重要性 (檢查組態是否有變更) 並建議 <command>rcapache2</command> 指令的必要引數。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>server-status 和 full-server-status</option>
    </term>
    <listitem>
     <para>
      分別傾印簡要或完整的狀態畫面。要求必須安裝 lynx 或 w3m 並啟用 <systemitem>mod_status</systemitem> 模組。除此之外，<literal>status</literal> 必須加入 <filename>/etc/sysconfig/apache2</filename> 檔案的 <systemitem>APACHE_SERVER_FLAGS</systemitem>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>其他旗標</title>
   <para>
    如果您為 <command>rcapache2</command> 指定其他旗標，這些旗標就會傳遞通過網頁伺服器。
   </para>
  </tip>
 </sect1>
 <sect1 id="sec-apache2-modules">
  <title>安裝、啟用和設定模組</title><indexterm class="startofrange" id="idx-apache2-modules"> <primary>Apache</primary> <secondary>模組</secondary> </indexterm>

  <para>
   Apache 軟體採用了模組化設計：除了部分核心任務，其餘所有功能皆由模組處理。這種進步幅度很大，甚至連 HTTP 都是由模組 (http_core) 處理。
  </para>

  <para>
   Apache 模組可以在建立階段編譯成 Apache 二進位檔案，或是在執行階段動態載入。如需瞭解如何動態載入模組的詳細資訊，請參閱<xref linkend="sec-apache2-modules-activating"/>。
  </para>

  <para>
   Apache 模組可以分成四種不同類別：
  </para>

  <variablelist>
   <varlistentry>
    <term>基本模組</term>
    <listitem>
     <para>
      基本模組會依預設編譯到 Apache。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的 Apache 中僅編譯了 <systemitem>mod_so</systemitem> (載入其他模組要用到) 與 <systemitem>http_core</systemitem>。所有其他模組均以共享物件的方式提供，即在執行期間加入，而不包含在伺服器二進位檔案中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>延伸模組</term>
    <listitem>
     <para>
      一般說來，Apache 軟體套件會包含標示為延伸的模組，但是通常不會使用靜態方式將這些模組編譯到伺服器中。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，這類模組以共用物件方式提供，並可在執行時期載入到 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部模組</term>
    <listitem>
     <para>
      標示為外部的模組不會包含於 Apache 正式發行版本中。不過，<phrase role="productname"><phrase os="sles"/>SUSE Linux Enterprise Server</phrase> 提供了其中的幾個模組。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>多重處理模組 (MPM)</term>
    <listitem>
     <para>
      MPM 會負責接收和處理網頁伺服器所收到的要求，因此屬於網頁伺服器軟體的核心部分。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 id="sec-apache2-modules-installing">
   <title>模組安裝</title><indexterm> <primary>Apache</primary> <secondary>模組</secondary><tertiary>安裝</tertiary> </indexterm>
   <para>
    如果您已依照<xref linkend="sec-apache2-quickstart-installation"/> 中所述完成預設安裝，則下列模組此時都已安裝︰所有基礎模組與延伸模組、多重處理模組 Prefork MPM 以及外部模組 <systemitem>mod_php5</systemitem> 與 <systemitem>mod_python</systemitem>。
   </para>
   <para>
    您可以啟動 YaST，然後選擇<menuchoice><guimenu>軟體</guimenu> <guimenu>軟體管理</guimenu></menuchoice>，來安裝其他的外部模組。現在，請依序選擇<menuchoice><guimenu>過濾器</guimenu><guimenu>搜尋</guimenu></menuchoice>，然後搜尋 <emphasis>apache</emphasis>。結果清單中除其他套件之外，還會包含所有可用的外部 Apache 模組。
   </para>
  </sect2>

  <sect2 id="sec-apache2-modules-activating">
   <title>啟用和停用</title>
   <para>
    以手動方式或透過 YaST 啟用或停用特定模組。在 YaST 中，若要啟用或停用程序檔語言模組 (PHP5、Perl 和 Python)，需要使用<xref linkend="sec-apache2-configuration-yast-wizard"/>中所述的模組組態。所有其他模組都可以依據<xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/>說明步驟來啟用或停用。
   </para>
   <para>
    如果您偏好手動啟用或停用模組，請分別使用 <command>a2enmod <replaceable>mod_foo</replaceable></command> 或 <command>a2dismod</command> <replaceable>mod_foo</replaceable> 指令。<command>a2enmod -l</command> 會輸出目前所有的使用中模組清單。
   </para>
   <important>
    <title>包含外部模組的組態檔案</title>
    <para>
     如果您已經手動啟用外部模組，請確定將其組態檔案載入至所有的虛擬主機組態。外部模組的組態檔案會存放在 <filename>/etc/apache2/conf.d/</filename> 之下，而且不會預設載入。如果您需要在每個虛擬主機上載入相同模組，您可以含入此目錄中的 <filename>*.conf</filename>。另一種做法是含入個別檔案。如需取得範例說明，請參閱<filename>/etc/apache2/vhost.d/vhost.template</filename>。
    </para>
   </important>
  </sect2>

  <sect2 id="sec-apache2-modules-base-extension">
   <title>基本和延伸模組</title><indexterm> <primary>Apache</primary> <secondary>模組</secondary> <tertiary>適用的</tertiary> </indexterm>
   <para>
    Apache 說明文件中詳細介紹了所有的基本模組和延伸模組。本文件只提供最重要模組的概要說明。如需關於每個模組的詳細資訊，請參閱 <ulink url="http://httpd.apache.org/docs/2.2/mod/">http://httpd.apache.org/docs/2.2/mod/</ulink>。
   </para>
   
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       提供在需要特定 MIME 類型 (例如 <systemitem>application/pdf</systemitem>)、具有特定副檔名的檔案 (例如 <filename>.rpm</filename>) 或特定要求方法 (例如 <systemitem>GET</systemitem>) 時執行程序檔的方法。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       提供 <systemitem>Alias</systemitem> 和 <systemitem>Redirect</systemitem> 指示詞，供您用來將 URL 映射至特定目錄 (<systemitem>Alias</systemitem>) 或將所要求的 URL 重新導向至其他位置。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       驗證模組提供了幾種不同的驗證方式：使用 <systemitem>mod_auth_basic</systemitem> 進行基本驗證，或使用 <systemitem>mod_auth_digest</systemitem> 進行摘要驗證。Apache 2.2 的摘要驗證方式仍屬實驗性質。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> 和 <systemitem>mod_auth_digest</systemitem> 必須與驗證提供者模組 <systemitem>mod_authn_*</systemitem> (例如適用於以文字檔案為基礎之驗證的 <systemitem>mod_authn_file</systemitem>)，以及驗證模組 <systemitem>mod_authz_*</systemitem> (例如適用於使用者驗證的 <systemitem>mod_authz_user</systemitem>) 結合使用。
      </para>
      <para>
       關於此主題的詳細資訊，請參閱 <ulink url="http://httpd.apache.org/docs/2.2/howto/auth.html"/> 上的<citetitle>驗證 HOWTO</citetitle>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       Autoindex 會在沒有任何索引檔案 (例如，<filename>index.html</filename>) 出現時產生目錄清單。這些索引的外觀可加以設定。這是預設啟用的模組。然而，目錄清單已預設為停用，經由 <systemitem>Options</systemitem> 指示詞來覆寫虛擬主機組態的這項設定。這個模組的預設組態檔案會存放在 <filename>/etc/apache2/mod_autoindex-defaults.conf</filename>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>執行 CGI 程序檔時必須使用 mod_cgi。</systemitem>這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       使用這個模組時，Apache 可以設定成即時壓縮成指定檔案類型之後，再進行傳送。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem/>mod_dir 可提供 <systemitem>DirectoryIndex</systemitem> 指示詞，供您用來設定當要求目錄 (預設是 <filename>index.html</filename>) 時要自動傳遞哪類檔案。它還提供另一項功能：當目錄要求沒有包含末尾斜線時，就會自動重新導向到正確 URL。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       控制傳遞給 CGI 程序檔或 SSI 頁面的環境。可以在呼叫 httpd 程序的外圍程序中設定、取消設定或傳遞環境變數。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       使用 <systemitem>mod_expires</systemitem> 時，您可以透過傳送 <systemitem>Expires</systemitem> 標頭，來控制代理和瀏覽器快取重新整理文件的頻率。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_include 可讓您使用 Server Side Include (SSI)，這項工具會提供動態產生 HTML 頁面的基本功能。</systemitem>這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       可透過 http://localhost/server-info/ 提供伺服器組態的綜合綜覽。基於安全性考量，您應該永遠限制這個 URL 的存取權限。預設只允許 <systemitem class="domainname">localhost</systemitem> 存取這個 URL。<systemitem>mod_info</systemitem> 是在 <filename>/etc/apache2/mod_info.conf</filename> 中設定。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       使用此模組時，您可以設定 Apache 記錄檔案的外觀。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       此 mime 模組會依據傳送檔案的副檔名，來確定其是否包含正確的 MIME 標頭 (例如 HTML 文件為 <systemitem>text/html</systemitem>)。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       內容協商 (Content Negotiation) 所需的模組。如需更多詳細資訊，請參閱 <ulink url="http://httpd.apache.org/docs/2.2/content-negotiation.html">http://httpd.apache.org/docs/2.2/content-negotiation.html</ulink>。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_nss</systemitem>
     </term>
     <listitem>
      <para>
       透過 TLS 1.1 和 TLS 1.2 通訊協定使用 Mozilla Network Security Services 程式庫在 Web 伺服器與用戶端之間啟用加密連接。如需詳細資料，請參閱<xref linkend="sec-apache2-nss"/>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       可提供 <systemitem>mod_alias</systemitem> 的功能，但具備更多功能和更大的靈活性。使用 <systemitem>mod_rewrite</systemitem> 時，您可以依據多個規則、要求標頭和其他條件來重新導向 URL。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       根據用戶端的要求設定環境變數，如用戶端傳送的瀏覽器字串或用戶端的 IP 位址。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_speling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_speling 會嘗試自動修正 URL 中出現的打字錯誤，例如大小寫錯誤。</systemitem>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       啟用網頁伺服器和用戶端之間的加密連接。如需詳細資料，請參閱 <xref linkend="sec-apache2-ssl"/>。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       可透過 http://localhost/server-status/ 提供有關伺服器活動及效能的資訊。基於安全性考量，您應該永遠限制這個 URL 的存取權限。預設只允許 <systemitem class="domainname">localhost</systemitem> 存取這個 URL。<systemitem>mod_status</systemitem> 是在 <filename>/etc/apache2/mod_status.conf</filename> 中設定。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec 可讓您以不同使用者和群組身分來執行 CGI 程序檔。</systemitem>這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       啟用在 <filename>~<replaceable>user</replaceable>/</filename> 之下提供使用者特定目錄。在組態中必須指定 <systemitem>UserDir</systemitem> 指示詞。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-modules-mpm">
   <title>多重處理模組</title><indexterm> <primary>Apache</primary> <secondary>模組</secondary> <tertiary>多重處理</tertiary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了兩種不同的多重處理模組 (MPM) 來搭配 Apache 使用。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-modules-mpm-prefork">
    <title>Prefork MPM</title>
    <para>
     Prefork MPM 會實作非執行緒、預衍生的 Web 伺服器。這個模組會讓 Web 伺服器以類似 Apache 1.x 版的行為作業。在此版本中，Apache 會透過衍生出獨立的子程序，將各個要求分開處理。這樣發生問題的要求就不會影響其他要求，進而避免網頁伺服器出現鎖定現象。
    </para>
    <para>
     雖然透過這種以處理程序為主的方法可以提供穩定性，但是比起 Worker MPM，Prefork MPM 會耗用較多的系統資源。Unix 作業系統會將 Prefork MPM 當作預設 MPM。
    </para>
    <important>
     <title>本文件的 MPM</title>
     <para>
      本文件會假設 Apache 是使用 Prefork MPM。
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-modules-mpm-worker">
    <title>Worker MPM</title>
    <para>
     Worker MPM 會提供多執行緒 Web 伺服器。執行緒是<quote>輕量級</quote>的處理程序。執行緒和處理程序相比的優點是，它消耗的資源較少。Worker MPM 不只會衍生子處理程序，它還可使用執行緒和伺服器處理程序，來為要求提供服務。預衍生的子程序具有多重執行緒。這種方法因為耗用比 Prefork MPM 更少的系統資源，因此可以提高 Apache 的執行效能。
    </para>
    <para>
     一個主要缺點就是 Worker MPM 的穩定性：當某執行緒毀損時，處理程序的所有執行緒都會受到影響。最嚴重的情況下，甚至還會造成伺服器當機。尤其是在負載量高的 Apache 上使用通用閘道介面 (CGI) 時，可能就會因線串無法與系統資源進行通訊而產生內部伺服器錯誤。在 Apache 上使用 worker MPM 的另外一點爭議，就是並非所有可用的 Apache 模組都能安全地使用執行緒，這樣就無法配合 worker MPM 使用。
    </para>
    <warning>
     <title>搭配 MPM 使用 PHP 模組</title>
     <para>
      並非所有可用的 PHP 模組都是安全執行緒。因此最好不要搭配 worker MPM 來使用 <systemitem>mod_php</systemitem>。
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-modules-external">
   <title>外部模組</title><indexterm> <primary>Apache</primary> <secondary>模組</secondary> <tertiary>外部</tertiary> </indexterm>
   <para>
    此處提供了 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 隨附的所有外部模組的清單。
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       為 Apache 提供額外支援，對由 <systemitem>mod_php5</systemitem> 和 <systemitem>mod_perl</systemitem> 這類模組處理的個別 CGI 程序檔設定 AppArmor 限制。
      </para>
      <simplelist>
       <member>套件名稱：<systemitem>apache2-mod_apparmor</systemitem> </member> <member>詳細資訊︰<xref linkend="part-aaa"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_auth_kerb</systemitem> 提供對 Apache Web 伺服器的 Kerberos 驗證。
      </para>
      <simplelist>
       <member>套件名稱：<systemitem>apache2-mod_auth_kerb</systemitem> </member> <member>詳細資訊：<ulink url="http://modauthkerb.sourceforge.net/configure.html"/> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       使用 <systemitem>mod_mono</systemitem> 可讓您在伺服器中執行 ASP.NET 頁面。
      </para>
      <simplelist>
       <member>套件名稱︰<systemitem>apache2-mod_mono</systemitem> </member> <member> 組態檔案︰<filename>/etc/apache2/conf.d/mod_mono.conf</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_perl</systemitem> 可讓您使用內嵌解譯器來執行 Perl 程序檔。內嵌在伺服器的常駐解譯器可以避免因啟動外部解譯器造成的負荷，以及在 Perl 啟動階段時降低速度。
      </para>
      <simplelist>
       <member>套件名稱︰<systemitem>apache2-mod_perl</systemitem> </member> <member>組態檔案︰<filename>/etc/apache2/conf.d/mod_perl.conf</filename> </member> <member>詳細資訊︰<filename>/usr/share/doc/packages/apache2-mod_perl</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHP 是一種伺服器端、跨平台式的 HTML 內嵌程序檔語言。
      </para>
      <simplelist>
       <member>套件名稱︰<systemitem>apache2-mod_php5</systemitem> </member> <member>組態檔案︰<filename>/etc/apache2/conf.d/php5.conf</filename> </member> <member>詳細資訊︰<filename>/usr/share/doc/packages/apache2-mod_php5</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> 允許在 Apache HTTP 伺服器中內嵌 Python，以便大幅提高效能和增加網頁應用程式的設計彈性。
      </para>
      <simplelist>
       <member>套件名稱︰<systemitem>apache2-mod_python</systemitem> </member> <member>詳細資訊︰<filename>/usr/share/doc/packages/apache2-mod_python</filename> </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> 提供 Web 應用程式防火牆，用於保護 Web 應用程式免受各種攻擊。此外，它還支援 HTTP 流量監控和即時分析。
      </para>
      <simplelist>
       <member>套件名稱︰<systemitem>apache2-mod_security2</systemitem> </member> <member>組態檔案︰<filename>/etc/apache2/conf.d/mod_security2.conf</filename> </member> <member>詳細資訊：<filename>/usr/share/doc/packages/apache2-mod_security2</filename> </member> <member>文件：<ulink url="http://modsecurity.org/documentation/"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-modules-building-modules">
   <title>編譯</title><indexterm> <primary>Apache</primary> <secondary>模組</secondary> <tertiary>建立</tertiary> </indexterm>
   <para>
    Apache 允許進階使用者編寫自定模組進行延伸。若要開發 Apache 模組或編譯協力廠商模組，除了相對應開發工具外，還需要套件 <systemitem>apache2-devel</systemitem>。<systemitem>apache2-devel</systemitem> 也包含了 <command>apxs2</command> 工具，這是在編譯 Apache 其他模組時，需要用到的工具。
   </para>
   <para>
    <command>apxs2</command> 可以從原始程式碼進行模組編譯和安裝 (其中包括必要的組態檔案變更)，並建立可於 Runtime 載入 Apache 的<emphasis>動態共享物件</emphasis> (DSO)。
   </para>
   <para>
    <command>apxs2</command> 二進位檔案位在 <filename>/usr/sbin</filename> 下方：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename> — 適合用來建立可配合任何 MPM 使用的延伸模組。安裝位置是 <filename>/usr/lib/apache2</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename> — 適合用於 prefork MPM 模組。安裝位置是 <filename>/usr/lib/apache2-prefork</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename> — 適合用於 worker MPM 模組。安裝位置是 <filename>/usr/lib/apache2-worker</filename>。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    請使用下列指令透過原始碼安裝並啟用模組︰
   </para>
<screen>cd /path/to/module/source; apxs2 -cia
    <replaceable>mod_foo</replaceable>.c</screen>
   <para>
    其中，<option>-c</option> 用於編譯模組，<option>-i</option> 用於安裝模組，<option>-a</option> 用於啟用模組。如需有關 <command>apxs2</command> 的其他選項資訊，請參閱 <systemitem>apxs2(1)</systemitem> man 頁面。
   </para><indexterm class="endofrange" startref="idx-apache2-modules"/>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-cgi">
  <title>啟用 CGI 程序檔</title><indexterm> <primary>Apache</primary><secondary>CGI 程序檔</secondary> </indexterm>

  <para>
   Apache 的通用閘道介面 (CGI) 可讓您使用程式或程序檔 (通常指 CGI 程序檔) 建立動態內容。CGI 程序檔可以用任何程式設計語言來編寫。通常會使用類似 Perl 或 PHP 等程式檔設計語言。
  </para>

  <para>
   若要讓 Apache 傳送 CGI 程序檔建立的內容，就必須啟用 <systemitem>mod_cgi</systemitem> 模組。同時還需要用到 <systemitem>mod_alias</systemitem>。這兩種都是預設啟用的模組。如需啟用模組的詳細資訊，請參閱<xref linkend="sec-apache2-modules-activating"/>。
  </para>

  <warning>
   <title>CGI 安全性</title>
   <para>
    允許伺服器執行 CGI 程序檔會產生潛在的安全性弱點。請參考<xref linkend="sec-apache2-security"/>，以取得其他資訊。
   </para>
  </warning>

  <sect2 id="sec-apache2-cgi-configuration">
   <title>Apache 組態</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，CGI 程序檔只能在 <filename>/srv/www/cgi-bin/</filename> 目錄中執行。這個位置已設定用來執行 CGI 程序檔。如果您已經建立虛擬主機組態 (請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>) 並想要將程序檔放置到主機特定的目錄，則必須解除鎖定和設定此目錄。
   </para>
   <example id="ex-apache2-cgi-configuration">
    <title>VirtualHost CGI 組態</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co id="co-apache2-cgi-handler"/>
 Order allow,deny<co id="co-apache2-cgi-order"/>
 Allow from all
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       告知 Apache 依照 CGI 程序檔方式來處理位在這個目錄中的所有檔案。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       啟用 CGI 程序檔執行
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       告知伺服器依照 CGI 程序檔方式來處理包含 .pl 和 .cgi 副檔名的檔案。依據個人需要來加以調整。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       <systemitem>Order</systemitem> 和 <systemitem>Allow</systemitem> 指示詞可控制評估 Allow 和 Deny 指示詞時的預設存取狀態和順序。在這個範例中，會先評估<quote>deny</quote>陳述式，接著才評估<quote>allow</quote>陳述式，並啟用通用存取。
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 id="sec-apache2-cgi-example-script">
   <title>執行程序檔範例</title>
   <para>
    CGI 程式設計不同於「一般」程式設計；因為 CGI 程式和程序檔的最前面必須是 MIME-Type 標頭，例如 <literal>Content-type: text/html</literal>。這個標頭會傳送到用戶端，使其瞭解所接收內容的類型。其次，程序檔的輸出一定是用戶端 (通常是指網頁瀏覽器) 可了解的內容 -- 舉例來說，在多數情況下是指 HTML，或者是純文字或影像。
   </para>
   <para>
    Apache 套件會在 <filename>/usr/share/doc/packages/apache2/test-cgi</filename> 提供簡單的測試程序檔。這個程序檔會以純文字方式輸出部分環境變數的內容。請將這段程序檔複製到 <filename>/srv/www/cgi-bin/</filename> 或虛擬主機的程序檔目錄 (<filename>/srv/www/www.example.com/cgi-bin/</filename>)，並將其命名為 <filename>test.cgi</filename>。
   </para>
   <para>
    可由 Web 伺服器存取的檔案應該屬於 <systemitem class="username">root</systemitem> 使用者所有。如需其他資訊，請參閱<xref linkend="sec-apache2-security"/>。因為網頁伺服器可由不同使用者身分執行，所以 CGI 程序檔必須具備可供全球執行和可供全球讀取等特性。變更 CGI 目錄和使用 <command>chmod 755 test.cgi</command> 指令，便可套用適當的許可權。
   </para>
   <para>
    現在，請呼叫 <literal>http://localhost/cgi-bin/test.cgi</literal> 或 <literal>http://www.example.com/cgi-bin/test.cgi</literal>。這時應該會顯示 <quote>CGI/1.0 測試程序檔報告</quote>。
   </para>
  </sect2>

  <sect2 id="sec-apache2-cgi-troubleshooting">
   <title>CGI 疑難排解</title>
   <para>
    如果這時沒有顯示測試程式的輸出結果，而是出現錯誤訊息，請檢查下列項目：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI 疑難排解</title>
    <listitem>
     <para>
      您是否有在變更組態之後重新載入伺服器？請使用 <command>rcapache2 probe</command> 進行檢查。
     </para>
    </listitem>
    <listitem>
     <para>
      您是否已正確設定自定的 CGI 目錄 (若有的話)？如果您不確定，請在預設的 CGI 目錄 <filename>/srv/www/cgi-bin/</filename> 中測試此程序檔，並使用 <literal>http://localhost/cgi-bin/test.cgi</literal> 進行呼叫。
     </para>
    </listitem>
    <listitem>
     <para>
      檔案許可權是否正確？請切換至 CGI 目錄並執行 <command>ls -l test.cgi</command>。此測試輸出開頭應該是
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      請確定程序檔沒有包含任何程式設計錯誤。如果您未變更過 <filename>test.cgi</filename>，此情況應該就不會發生，但是如果您是使用自己的程式，請務必確定這些程式中沒有任何程式設計錯誤。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-ssl">
  <title>設定提供 SSL 的安全網頁伺服器</title><indexterm class="startofrange" id="idx-apache2-ssl"> <primary>Apache</primary><secondary>SSL</secondary> </indexterm>

  <para>
   如果 Web 伺服器和用戶端之間會傳輸信用卡資訊等敏感性資料，最好使用需經過驗證的安全加密連接。<systemitem>mod_ssl</systemitem> 會為用戶端和網頁伺服器之間的 HTTP 通訊，提供使用安全通訊端層 (Secure Sockets Layer, SSL)、以及傳輸層安全性 (Transport Layer Security, TLS) 通訊協定的強式加密。使用 SSL/TSL 時，網頁伺服器和用戶端之間就會建立私人連接。如此便可確保資料完整性，使用戶端和伺服器端可以彼此進行驗證。
  </para>
  
  <para>
   為了完成這個目的，伺服器會在回覆任何 URL 要求之前，先傳送可證明伺服器有效身分之相關資訊的 SSL 憑證。如此即可確保該伺服器是此通訊的唯一正確端點。此外，該憑證會在用戶端和伺服器端建立加密連接，以便在沒有洩漏敏感、純文字內容的風險情況下傳輸資訊。
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> 本身不會實作 SSL/TSL 通訊協定，而是扮演 Apache 和 SSL 程式庫之間的介面。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，使用的是 OpenSSL 程式庫。OpenSSL 會自動隨 Apache 完成安裝。
  </para>
  <note>
   <title>高於 TLS 1.0 的 TLS 版本</title>
   <para>
    openssl 程式庫最高支援 TLS 1.0 (含) 的 TLS 版本。不支援 1.1 或 1.2 等更新的 TLS 版本。<systemitem>apache2-mod_nss</systemitem> 套件中的 <systemitem>mod_nss</systemitem> 使用 Mozilla Network Security Services 程式庫提供 TLS 1.1 和 1.2。如需詳細資料，請參閱<xref linkend="sec-apache2-nss"/>。
   </para>
  </note>
  <para>
   使用 <systemitem>mod_ssl</systemitem> 搭配 Apache 的最明顯特徵，就是 URL 的字首都會加上 <literal>https://</literal>，而不是 <literal>http://</literal>。
  </para>

  <tip>
   <title>範例證書</title>
   <para>
    安裝 <systemitem class="resource">apache2-example-certificates</systemitem> 套件時，可以使用一家假定公司<quote>Snake Oil</quote>的範例證書。
   </para>
  </tip>

  <sect2 id="sec-apache2-ssl-certificate">
   <title>建立 SSL 憑證</title><indexterm> <primary>Apache</primary> <secondary>SSL</secondary> <tertiary>建立 SSL 憑證</tertiary> </indexterm>
   <para>
    為了搭配使用 SSL/TSL 與網頁伺服器，您必須建立 SSL 憑證。網頁伺服器和用戶端在彼此驗證時要用到這項憑證，以便讓任一方可以清楚識別對方。為了確保憑證的完整性，其必須由每位使用者信任的一方加以簽章。
   </para>
   <para>
    您可以建立下列三種類型的憑證：僅供測試使用的 <quote>虛擬</quote> 憑證、供已定義信任圈使用者使用的自我簽發憑證，以及由獨立、公開的憑證授權機構 (CA) 簽發的憑證。
   </para>
   <para>
    憑證建立基本上可分為兩個步驟。首先產生憑證授權機構的私密金鑰，接著再使用該金鑰簽發伺服器憑證。
   </para>
   <tip>
    <title>更多資訊</title>
    <para>
     若要更進一步蓋識 SSL/TSL 的概念和定義，請參閱 <ulink url="http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html</ulink>。
    </para>
   </tip>
   <sect3 id="sec-apache2-ssl-certificate-dummy">
    <title>建立 <quote>虛擬</quote> 憑證</title>
    <para>
     產生虛構憑證的步驟很簡單。您只要呼叫程序檔 <command>/usr/bin/gensslcert</command>，此操作會建立或覆寫下列檔案。使用 <command>gensslcert</command> 的可選參數可以校調證書。如需詳細資訊，可呼叫 <command>/usr/bin/gensslcert <option>-h</option></command>。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/root/.mkcert.cfg</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     <filename>ca.crt</filename> 的複製本也會放在 <filename>/srv/www/htdocs/CA.crt</filename> 提供下載。
    </para>
    <important>
     <title>僅供測試之用</title>
     <para>
      虛構憑證絕對不可用於生產環境系統。這類憑證只能用於測試目的。
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-ssl-certificate-custom">
    <title>建立自我簽發憑證</title>
    <para>
     如果您要設定供內部網路或已定義使用者圈使用的安全 Web 伺服器，透過您自己的憑證管理中心 (CA) 簽發憑證就可有效符合此時的憑證需求。
    </para>
    <para>
     自我簽署憑證的建立程序分為互動的九個步驟。請切換至目錄 <filename>/usr/share/doc/packages/apache2</filename>，並執行下列指令︰<command>./mkcert.sh make <option>--no-print-directory /usr/bin/openssl /usr/sbin/ custom</option></command>。請勿嘗試從這個目錄外面執行這個指令。這個程式會提供一系列提示訊息，其中有部分提示需要使用者輸入。
    </para>
    <procedure id="pro-apache2-ssl-certificate-custom">
     <title>使用 <command>mkcert.sh</command> 建立自我簽發憑證</title>
     <step performance="required">
      <para>
       <literal>決定憑證所使用的簽章演算法 </literal>
      </para>
      <para>
       選擇 RSA (<keycap>R</keycap>，此為預設選項)，因為有些早期瀏覽器無法使用 DSA。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>產生 CA 的 RSA 私密金鑰 (1024 位元)</literal>
      </para>
      <para>
       這時不須進行任何互動。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>產生 CA 的 X.509 憑證簽發要求</literal>
      </para>
      <para>
       在此建立 CA 的可辨識名稱。這時系統會要求您回答一些問題，例如國家/地區名或組織名稱。請輸入有效資料，因為您在此輸入的每項資料將來都會顯示在憑證中。您不需要回答每個問題。如果有不適用的問題或是您希望保留空白，請使用 <quote>.</quote>。一般名稱是指 CA 本身的名稱 -- 請選擇明顯的名稱，例如 <replaceable>My company</replaceable> CA。
      </para>
      <important>
       <title>CA 的通用名稱</title>
       <para>
        CA 的通用名稱必須區別於伺服器的通用名稱，因此不要在此步驟中選擇完全合格的主機名稱。
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>產生 CA 本身簽發的 X.509 憑證</literal>
      </para>
      <para>
       選擇憑證版本 <keycap>3</keycap> (預設選項)。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>產生 SERVER 的 RSA 私密金鑰 (1024 位元)</literal>
      </para>
      <para>
       這時不須進行任何互動。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>產生 SERVER 的 X.509 憑證簽發要求</literal>
      </para>
      <para>
       在此建立伺服器金鑰的可識別名稱。這時要回答的問題與建立 CA 可識別名稱時回答的問題幾乎一樣。在此輸入的資料會套用到網頁伺服器，因此不需要和 CA 資料完全相同 (例如，伺服器可能會出淚任意位置)。
      </para>
      <important>
       <title>選取通用名稱</title>
       <para>
        您在此輸入的一般名稱必須是安全伺服器的完整主機名稱 (例如，www.example.com)。否則瀏覽器會在存取網頁伺服器時發出警告，表示憑證與伺服器不相符。
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>產生本身 CA 簽發的 X.509 憑證</literal>
      </para>
      <para>
       選擇憑證版本 <keycap>3</keycap> (預設選項)。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>使用密碼片語為 CA 的 RSA 私密金鑰加密，以提高安全性</literal>
      </para>
      <para>
       我們強烈建議您使用密碼來加密 CA 的私密金鑰，請選擇 <keycap>Y</keycap> 來輸入密碼。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>使用密碼片語為 SERVER 的 RSA 私密金鑰加密，以提高安全性</literal>
      </para>
      <para>
       若使用密碼為伺服器金鑰加密，則每當要啟動網頁伺服器時就必須輸入這個密碼。如此一來就很難自動在開機時啟動伺服器或是重新啟動網頁伺服器。因此，使用者通常會在回答這個問題時選擇 <keycap>N</keycap>。請注意金鑰在沒有使用密碼加密時是不受保護狀態，同時請確定只有經授權人員可以存取該金鑰。
      </para>
      <important>
       <title>加密伺服器金鑰</title>
       <para>
        如果您選擇使用密碼為伺服器金鑰進行加密，請為存放在 <filename>/etc/sysconfig/apache2</filename> 的 <systemitem>APACHE_TIMEOUT</systemitem> 提高設定值。否則，您在嘗試啟動伺服器之前可能來不及輸入密碼片語，但是伺服器早就啟動失敗而停止。
       </para>
      </important>
     </step>
    </procedure>
    <para>
     程序檔的結果頁面會出現憑證清單，以及其所產生的金鑰。不同於程序檔輸出的結果，這些檔案並不是產生到本地目錄 <filename>conf</filename>，而是產生到 <filename>/etc/apache2/</filename> 下面的正確目錄。
    </para>
    <para>
     最後一個步驟就是從 <filename>/etc/apache2/ssl.crt/ca.crt</filename> 將 CA 憑證檔案複製到使用者可存取的位置，以便使用者將該檔案納入其網頁瀏覽器已知和信任的 CA 清單中。否則，瀏覽器會報告該憑證是由不明授權機構所簽發。這類憑證的有效期限是一年。
    </para>
    <important>
     <title>自行簽署的證書</title>
     <para>
      僅在供認識您、且信任您為證書管理中心之使用者存取的網頁伺服器上，方可使用自我簽署憑證。我們不建議您在公開商店等場所使用此類證書。
     </para>
    </important>
   </sect3>
   <sect3 id="sec-apache2-ssl-certificate-official">
    <title>取得官方簽發憑證</title>
    <para>
     目前有一些可簽署憑證的官方證書管理中心。這類憑證是由值得信任的協力廠商所簽署，因此可以完全信任。對外運作的安全網頁伺服器通常已取得官方簽發憑證。
    </para>
    <para>
     最有名的官方 CA 是 Thawte (<ulink url="http://www.thawte.com/"/>) 或 Verisign (<ulink url="http://www.verisign.com"/>)。這些 CA 和其他 CA 都已經編譯到所有瀏覽器中，所以瀏覽器會自動接受這些憑證授權機構簽發的憑證。
    </para>
    <para>
     在要求官方簽署的憑證時，您並不需要向 CA 傳送憑證，而只需傳送憑證簽署要求 (Certificate Signing Request, CSR)。若要建立 CSR，請呼叫程序檔 <command>/usr/share/ssl/misc/CA.sh -newreq</command>。
    </para>
    <para>
     首先，程序檔會要求提供該 CSR 進行加密時所使用的密碼。接著，要求您輸入可識別名稱。這時系統會要求您回答一些問題，例如國家/地區名或組織名稱。請輸入有效資料 -- 您在此時輸入的每項資料將來都會顯示在憑證中並用於檢查。您不需要回答每個問題。如果有不適用的問題或是您希望保留空白，請使用 <quote>.</quote>。一般名稱是指 CA 本身的名稱 -- 請選擇明顯的名稱，例如 <replaceable>My company</replaceable> CA。最後，必須輸入挑戰密碼和替用的公司名稱。
    </para>
    <para>
     從您呼叫程序檔的目錄中找出此 CSR。這個檔案名稱是 <filename>newreq.pem</filename>。
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec-apache2-ssl-configuration">
   <title>設定提供 SSL 的 Apache</title><indexterm> <primary>Apache</primary> <secondary>SSL</secondary> <tertiary>設定提供 SSL 的 Apache</tertiary> </indexterm>
   <para>
    在網頁伺服器端上，SSL 和 TLS 要求的預設連接埠是 443。同時有傾聽連接埠 80 的<quote>一般</quote>Apache 和傾聽連接埠 443 之已啟用 SSL/TLS 的 Apache，並不會產生衝突。事實上，HTTP 和 HTTPS 可以執行相同的 Apache 例項。通常這時會使用不同的虛擬主機，將連接埠 80 和連接埠 443 的要求分派到不同的虛擬伺服器。
   </para>
   <important>
    <title>防火牆組態</title>
    <para>
     請不要忘記為連接埠 443 上已啟用 SSL 的 Apache 開啟防火牆。您可以依據<xref linkend="sec-fire-SuSE-yast"/>所述方式，透過 YaST 完成這個動作。
    </para>
   </important>
   <para>
    在全域伺服器組態中，預設會啟用 SSL 模組。如果主機上停用了該模組，請使用 <command>a2enmod ssl</command> 指令將其啟用。若最終要啟用 SSL，需使用旗標 <quote>SSL</quote> 啟動伺服器。此時，請呼叫 <command>a2enflag SSL</command>。如果選擇使用密碼來加密伺服器證書，您還需要提高 <filename>/etc/sysconfig/apache2</filename> 中 <systemitem>APACHE_TIMEOUT</systemitem> 的設定值，以便您在啟動 Apache 時有足夠的時間輸入該密碼片語。請重新啟動伺服器來確保這些變更生效。只是重新載入並無法保證變更生效。
   </para>
   <para>
    虛擬主機組態目錄包含了樣板 <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename> 和 SSL 特定指示詞 (將提供詳細文件說明)。如需一般虛擬主機組態的詳細資訊，請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>。
   </para>
   <para>
    若要開始，請將樣板複製到 <filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename> 並進行編輯。充分調整下列指示詞的值︰
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec-apache2-ssl-configuration-name-based">
    <title>以名稱為基礎的虛擬主機和 SSL</title>
    <para>
     依預設，在只有一個 IP 位址的伺服器上，無法同時執行多個啟用了 SSL 的虛擬主機。以名稱為基礎的虛擬主機需要 Apache 瞭解所要求的伺服器名稱。使用 SSL 連接的問題在於，此類要求只能在使用預設虛擬主機建立了 SSL 連接後才能讀取。如此一來，使用者將會收到證書與伺服器名稱不符的警告訊息。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了一項 SSL 通訊協定的延伸︰伺服器名稱指示 (Server Name Indication，SNI)。該項延伸會在 SSL 協議中傳送虛擬網域的名稱，以此解決這個問題。這可讓伺服器早些<quote>切換</quote>至正確的虛擬網域，並在瀏覽器中顯示正確的證書。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中預設會啟用 SNI。若要針對 SSL 啟用以名稱為基礎的虛擬主機，請依照<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/> 中所述設定伺服器 (請注意，您需要對 SSL 連線使用連接埠 <literal>443</literal> 而非 <literal>80</literal>)。
    </para>
    <important>
     <title>SNI 瀏覽器支援</title>
     <para>
      用戶端上也必須支援 SNI。儘管大多數的瀏覽器都支援 SNI，但一些用於行動硬體的瀏覽器以及 Internet Explorer 和 Windows* XP 上的 Safari 不支援 SNI。如需詳細資料，請參閱 <ulink url="http://en.wikipedia.org/wiki/Server_Name_Indication"/>。
     </para>
     <para>
      請使用指示詞 <systemitem>SSLStrictSNIVHostCheck</systemitem> 設定如何處理不支援 SNI 的瀏覽器。若在伺服器組態中設定為 <literal>on</literal>，則不支援 SNI 的瀏覽器對所有虛擬主機的存取都會遭到拒絕。若在某個 <systemitem>VirtualHost</systemitem> 指示詞中設定為 <literal>on</literal>，則對於此特定主機的存取將遭到拒絕。
     </para>
     <para>
      若在伺服器組態中設定為 <literal>off</literal>，則伺服器將表現為不支援 SNI。SSL 要求將由為連接埠 443 定義的<emphasis>第一個</emphasis>虛擬主機處理。
     </para>
    </important><indexterm class="endofrange" startref="idx-apache2-ssl"/>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-nss">
  <title>使用 NSS 設定安全 Web 伺服器</title>
  <indexterm class="startofrange" id="idx-apache2-nss"> <primary>Apache</primary> <secondary>NSS</secondary> </indexterm>
  <para>
   <systemitem>mod_nss</systemitem> 模組使用輸送層安全性 (TLS) 通訊協定 1.1 和 1.2 版提供增強式加密，但當 Apache 與 <systemitem>mod_ssl</systemitem> 搭配使用時無法加密。
  </para>
  <para>
   <systemitem>apache2</systemitem> 套件中的 SSL/TLS 支援一般由 <systemitem>mod_ssl</systemitem> (使用 openssl 加密程式庫提供 SSL/TLS 的 Apache 模組) 提供。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> 中使用的 openssl 程式庫版本僅支援 TLS 1.0 版。提供 TLS 1.1 和 1.2 支援的版本，與 SLE <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> 中包含的大部分套件不相容。替代方法是使用 <systemitem>mozilla-nss</systemitem> 套件提供的 Mozilla Network Security Services 程式庫。
  </para>
  <note>
   <title>SSLv2 支援</title>
   <para>
    <systemitem>mod_nss</systemitem> 未提供 SSLv2 支援。如果您需要 SSLv2 通訊協定，則需要使用 <systemitem>mod_ssl</systemitem>。
   </para>
  </note>
  <para>
   <systemitem>mod_ssl</systemitem> 和 <systemitem>mod_nss</systemitem> 可以同時初始化，但是通訊協定處理程式 (對於 <systemitem>mod_ssl</systemitem> 為 <literal>SSLEngine on</literal>，對於 <systemitem>mod_nss</systemitem> 為 <literal>NSSEngine on</literal>) 不能同時處於使用中狀態、同時處於全域範圍中或同時處於 <systemitem>VirtualHost</systemitem> 組態指令區塊的網路位置中。
  </para>
  <para>
   如果只有一個 <systemitem>VirtualHost</systemitem> 區段將指令 <literal>NSSEngine</literal> 設定為 <literal>on</literal>，則對於 Apache 監聽的連接埠，它的優先順序將高於其他所有 <systemitem>VirtualHost</systemitem> 宣告 (可能在其網路位置中將 <literal>SSLEngine</literal> 設定為 <literal>on</literal>)。位於同一 IP 位址和連接埠上不同虛擬主機的模組不能同時操作。如果您需要同時使用 <systemitem>mod_nss</systemitem> 和 <systemitem>mod_ssl</systemitem> 的加密連接支援，應該考量使用多個 IP 位址並將伺服器的加密模組設定為連結至其 IP 位址。如果您不需要同時使用這兩個加密模組，則建議您選擇其中一個，並停用另一個。
  </para>
  <para>
   因為 <systemitem>mmod_nss</systemitem> 對伺服器及 CA 證書和私密金鑰採用資料庫格式，所以需要轉換現有基於 mod_ssl 的證書，才能與 <systemitem>mmod_nss</systemitem> 搭配使用。套件 <systemitem>apache2-mod_nss</systemitem> 包含的 perl 程序檔 <filename>/usr/sbin/mod_nss_migrate.pl</filename> 即可實現該等轉換。它會建立新的資料庫。
  </para>
  <para>
   若要列出 NSS 資料庫中包含的證書，請使用下列指令︰
  </para>
  <screen>certutil -d /etc/apache2/mod_nss.d -L</screen>
  <para>
   如需 <command>certutil</command> NSS 資料庫管理公用程式的詳細資訊，請使用 <command>certutil --help</command>。
  </para>
  <para>
   <systemitem>mod_nss</systemitem> 套件隨附的預設組態檔案是 <filename>/etc/apache2/conf.d/mod_nss.conf</filename>。如需詳細資訊，請閱讀該檔案中的注釋。
  </para>
  <indexterm class="endofrange" startref="idx-apache2-ssl"/>
 </sect1>
 <sect1 id="sec-apache2-security">
  <title>避免安全性問題</title><indexterm> <primary>Apache</primary> <secondary>安全性</secondary> </indexterm>
  <para>
   向公用網際網路公開的網頁伺服器，必須持續進行系統管理。軟體和意外的錯誤設定不可避免地會產生安全性問題。下面是可用來處理這些問題的幾項秘訣。
  </para>

  <sect2 id="sec-apache2-security-up-to-date">
   <title>更新軟體</title>
   <para>
    SUSE 會在發現 Apache 軟體弱點時，發出安全性建議事項。其中包含應儘速套用的弱點修正指示。請由下列位置取得 SUSE 安全性公告：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>網頁</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/securitysupport.html"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>郵寄清單歸檔</title>
      <para>
       <ulink url="http://lists.opensuse.org/opensuse-security-announce/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>RSS Feed</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/suse_security.xml"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec-apache2-security-permissions">
   <title>DocumentRoot 許可權</title>
   <para>
    依預設，在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<systemitem>DocumentRoot</systemitem> 目錄 <filename>/srv/www/htdocs</filename> 與 CGI 目錄 <filename>/srv/www/cgi-bin</filename> 的所有權屬於 <systemitem>root</systemitem> 使用者和群組。這些許可權不可變更。如果目錄對所有人開放寫入權限，則任何使用者都可以將檔案放入其中。然後，這些檔案可能會由具有 <systemitem>wwwrun</systemitem> 許可權的 Apache 執行，而這種情況可能會造成使用者取得非預期的檔案系統資源存取權限。使用 <filename>/srv/www</filename> 子目錄來存放虛擬主機的 <systemitem>DocumentRoot</systemitem> 和 CGI 目錄，並確定這些目錄所有權屬於 <systemitem class="username">root</systemitem> 使用者和群組。
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-filesystem">
   <title>檔案系統存取</title>
   <para>
    依預設，<filename>/etc/apache2/httpd.conf</filename> 已設定成拒絕存取整個檔案系統。切勿覆寫這些指示詞，不過您可以特別啟用 Apache 應當能夠讀取之所有目錄的存取權限。如需詳細資料，請參閱<xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>。如果要執行這個動作，請確保沒有任何重要檔案 (例如密碼或系統組態檔案) 可由外界進行讀取。
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-cgi">
   <title>CGI 程序檔</title>
   <para>
    使用 Perl、PHP、SSI 或是任何其他程式設計語言的互動式程序檔，基本上都可以執行任意指令，因此會產生常見的安全性問題。將從伺服器執行的程序檔，只能由伺服器管理員信任的來源進行安裝 -- 通常最好不要讓使用者執行自己的程序檔。同時建議您為所有程序檔進行安全性稽核。
   </para>
   <para>
    為了盡可能簡化程序檔的管理工作，通常建議您限制 CGI 程序檔在特定目錄中執行，而不是全域性開放執行。您可以使用 <systemitem>ScriptAlias</systemitem> 和 <systemitem>Option ExecCGI</systemitem> 指示詞來進行組態設定。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的預設組態不允許隨處執行 CGI 程序檔。
   </para>
   <para>
    所有 CGI 程序檔都是以相同使用者身分執行，所以不同的程序檔彼此之間可能會產生衝突。module suEXEC 可讓您以不同使用者和群組身分來執行 CGI 程序檔。
   </para>
  </sect2>

  <sect2 id="sec-apache2-security-users">
   <title>使用者目錄</title>
   <para>
    在啟用使用者目錄 (使用 <systemitem>mod_userdir</systemitem> 或 <systemitem>mod_rewrite</systemitem>) 時，您應該審慎考慮不要允許覆寫 <filename>.htaccess</filename> 檔案，因為這會允許使用者覆寫安全性設定。至少您應該使用 <systemitem>AllowOverRide</systemitem> 指示詞來限制使用者的應用範圍。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<filename>.htaccess</filename> 檔案預設處於啟用狀態，但使用者不允許在使用 <systemitem>mod_userdir</systemitem> 時覆寫任何 <systemitem>Option</systemitem> 指令 (請參閱 <filename>/etc/apache2/mod_userdir.conf</filename> 組態檔案)。
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec-apache2-troubleeshooting">
  <title>疑難排解</title><indexterm> <primary>Apache</primary> <secondary>疑難排解</secondary> </indexterm>

  <para>
   如果 Apache 未啟動，網頁就無法存取，或者使用者無法連接網頁伺服器，因此找出問題的根源是很重要的工作。下面是您可在其中尋找錯誤原因的幾個常見位置以及需要檢查的重點︰
  </para>

  <variablelist>
   <varlistentry>
    <term><command>rcapache2</command> 的輸出
    </term>
    <listitem>
     <para>
      請不要使用二進位檔 <filename>/usr/sbin/httpd2</filename> 啟動和停止 Web 伺服器，而應使用 <command>rcapache2</command> 程序檔 (如<xref linkend="sec-apache2-start-stop"/> 中所述)。該程序檔會對錯誤進行詳細說明，甚至會提供一些修復組態錯誤的祕訣與提示。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>記錄檔案與詳細層級</term>
    <listitem>
     <para>
      無論發生了嚴重錯誤還是非嚴重錯誤，都可以檢查 Apache 記錄檔案尋找原因，主要檢查預設位於 <filename>/var/log/apache2/error_log</filename> 的錯誤記錄檔案。此外，如果需要檢視記錄檔案中更多的詳細資訊，還可以透過 <systemitem>LogLevel</systemitem> 指示詞來控制記錄訊息的詳細程度。
     </para>
     <tip>
      <title>簡單測試</title>
      <para>
       請使用 <command>tail -F /var/log/apache2/<replaceable>my_error_log</replaceable></command> 指令來檢視 Apache 記錄訊息。然後執行 <command>rcapache2 restart</command>。現在，請嘗試連接到瀏覽器，並檢查輸出結果。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>防火牆與連接埠</term>
    <listitem>
     <para>
      一個常見的錯誤是，沒有在伺服器的防火牆組態中開啟 Apache 的連接埠。如果是使用 YaST 來設定 Apache，就要透過其他選項來檢查這個特定問題 (請參閱<xref linkend="sec-apache2-configuration-yast"/>)。如果您要手動設定 Apache，請透過 YaST 防火牆模組來跚
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   如果無法透過這些功能來查出錯誤原因，則請查閱 <ulink url="http://httpd.apache.org/bug_report.html"/> 的線上 Apache 錯誤資料庫。此外，也可以從 <ulink url="http://httpd.apache.org/userslist.html"/> 取得可用的郵件清單，聯絡 Apache 使用者社群。推薦的新聞群組是 <ulink url="comp.infosystems.www.servers.unix"/>。
  </para>
 </sect1>
 <sect1 id="sec-apache2-more-information">
  <title>更多資訊</title>

  <para>
   <systemitem>apache2-doc</systemitem> 套件在許多位置包含了完整的 Apache 手冊，用於本地安裝及作為參考文件。這個套件不是預設安裝選項 — 安裝此套件最快的方式就是使用 <command>zypper in apache2-doc</command> 指令。完成安裝之後，您就可以從 <ulink url="http://localhost/manual/"/> 使用 Apach 手冊。您也可以從 <ulink url="http://httpd.apache.org/docs-2.2/"/> 網站位置來存取這份手冊。/usr/share/doc/packages/apache2/README.*<filename> 目錄會提供 SUSE 特定組態秘訣資訊。</filename>
  </para>

  <sect2 id="sec-apache2-more-information-apache22">
   <title>Apache 2.2</title>
   <para>
    如需 Apache 2.2 最新功能的清單，請參閱 <ulink url="http://httpd.apache.org/docs/2.2/new_features_2_2.html"/>。如需從 2.0 升級至 2.2 版的資訊，請參閱下列網址資訊：<ulink url="http://httpd.apache.org/docs-2.2/upgrading.html"/>。
   </para>
  </sect2>

  <sect2 id="sec-apache2-more-information-modules">
   <title>Apache 模組</title>
   <para>
    有關<xref linkend="sec-apache2-modules-external"/> 中簡要介紹的外部 Apache 模組的詳細資訊，可在以下位置找到︰
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       <ulink url="http://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mod-auth_kerb</term>
     <listitem>
      <para>
       <ulink url="http://modauthkerb.sourceforge.net/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.mono-project.com/Mod_mono"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://perl.apache.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec-apache2-more-information-cgi">
   <title>開發</title>
   <para>
    如需更多有關開發 Apache 模組或是參與 Apache 網頁伺服器計畫的詳細資訊，請參閱下列主題內容：
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache 開發人員資訊</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache 開發人員說明文件</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/docs/2.2/developer/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>使用 Perl 和 C 來編寫 Apache 模組 </term>
     <listitem>
      <para>
       <ulink url="http://www.modperl.com/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

<?dbfo-need height="10em"?>



  <sect2 id="sec-apache2-more-information-miscellaneous-sources">
   <title>其他資源</title>
   <para>
    <phrase os="sles;sled">如果您在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中遇到與 Apache 有關的問題，請查閱「技術資訊搜尋」，網址為：<ulink url="http://www.novell.com/support"/>。</phrase>關於 Apache 的歷程，請參閱 <ulink url="http://httpd.apache.org/ABOUT_APACHE.html"/>。此頁面也說明稱伺服器為 Apache 的原因。
   </para><indexterm class="endofrange" startref="idx-apache2"/>
  </sect2>
 </sect1>
</chapter>
