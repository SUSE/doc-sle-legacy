<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:base="grub.xml" xml:id="cha-grub"><title>開機載入程式 GRUB</title><info><abstract>
  <para>
   本章介紹如何設定 <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 中使用的開機載入程式 GRUB (Grand Unified Bootloader)。一種特殊的 YaST 模組，可用於設定所有設定。如果您不熟悉 Linux 開機的要點，請閱讀以下章節，取得部份背景資訊。本章節也敘述使用 GRUB 開機時，經常遇到的部份問題以及它們的解決方案。
  </para>
 </abstract></info>
 <indexterm> <primary>開機</primary> <secondary>GRUB </secondary></indexterm><indexterm> <primary>GRUB</primary></indexterm>
 
 <note os="sles;sled">
  <title>使用 UEFI 的機器上未安裝 GRUB</title>
  <para>
   依照慣例，GRUB 將會安裝在配有傳統 BIOS 的機器上與使用相容支援模組 (CSM) 的 UEFI (統一可擴充韌體介面) 機器上。未啟用 CSM 的 UEFI 機器會自動安裝 <systemitem>eLILO</systemitem> (如果 DVD1 開機成功)。如需詳細資訊，請參閱系統上 <filename>/usr/share/doc/packages/elilo/</filename> 中的 eLILO 文件。
  </para>
 </note>
 <para>
  本章節著重於開機管理以及開機載入器 GRUB 的組態。整個開機程序簡述於<xref linkend="cha-boot"/>。開機載入程式是機器 (BIOS) 與作業系統之間的介面 (<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>)。開機載入程式的組態會直接影響作業系統的開機。
 </para>
 <para>
  下列詞彙將在本章節中經常出現，而且可能需要說明：
 </para>
 <variablelist>
  <varlistentry>
   <term>MBR (主開機記錄)<indexterm> <primary>開機</primary><secondary>開機磁區</secondary></indexterm><indexterm><primary>MBR</primary></indexterm><indexterm><primary>主開機記錄</primary><see>MBR</see></indexterm><indexterm><primary>分割區</primary><secondary>分割區表格</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>主開機記錄 (MBR)</secondary></indexterm></term>
   <listitem>
    
    <para>
     MBR 的結構是由作業系統 (獨立會議) 所定義。前 446 位元組是保留給程式碼。它們通常包含一部分開機載入程式程式或作業系統選取器。接下來的 64 位元組為最多包含四項的分割區表提供空間。分割區表包含磁碟分割以及檔案系統類型相關資訊。作業系統需要此表格來處理硬碟。在 MBR 中使用傳統標準程式碼的情況下，只有一個分割區必須標示為<emphasis>作用中</emphasis>。MBR 的最後兩個位元組必須包含靜態的<quote>魔術編號</quote> (<literal>AA55</literal>)。包含不同值的 MBR 會被一些 BIOS 視為無效，所以開機時不列入考慮。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>開機磁區<indexterm><primary>開機</primary><secondary>開機磁區</secondary></indexterm><indexterm><primary>MBR</primary></indexterm><indexterm><primary>GRUB</primary><secondary>開機磁區</secondary></indexterm></term>
   <listitem>
    <para>
     開機磁區是除了擴充分割區以外，硬碟分割區的第一個磁區，它只會當成其他分割區的<quote>容器</quote>。這些開機磁區有 512 位元組的空間供程式碼使用，而這些程式碼是用來啟動各自分割區中安裝的作業系統。這適用於 DOS、Windows 和 OS/2 分割區格式的開機磁區，它們也包含檔案系統的部分重要基本資料。相反的，Linux 分割區的開機磁區一開始是空白，直到設定不同於 XFS 的檔案系統之後，才會寫入記錄。因此，Linux 分割區無法自行啟動，即使它包含核心以及有效的根檔案系統。開機磁區如果包含可以啟動系統的有效程式碼，則它的魔術編號與 MBR 的最後兩個位元組相同 (<literal>AA55</literal>)。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <section xml:id="sec-grub-basic">
  <title>使用 GRUB 開機</title><indexterm> <primary>GRUB</primary><secondary>開機</secondary></indexterm><indexterm><primary>安裝</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>開機</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>設定</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>指令</primary><secondary>grub</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>指令</secondary></indexterm>

  <para>
   GRUB 包含兩個階段。第一個階段包含 512 個位元組，其唯一的任務就是載入開機載入程式的第二個階段。接下來，會載入第二個階段。這個階段會包含開機載入程式的主要部分。
  </para>

  <para>
   某些組態會使用中繼階段 1.5，用來配置和載入適當檔案系統的階段 2。在適當情況下，這種方法在安裝或使用 YaST 初始設定 GRUB 時會是預設選項。
  </para>

  <para>
   第二個階段可以存取許多檔案系統。目前支援 ext2、ext3、ReiserFS、Minix 及 Winodws 使用的 DOS FAT 檔案系統。對於 XFS、UFS 以及 BSD 使用的 FFS，也支援到一定的程度。自 0.95 版開始，GRUB 也可以從包含符合 <quote>El Torito</quote> 規格的 ISO 9660 標準檔案系統的 CD 或 DVD 啟動。即使在系統啟動之前，GRUB 可以存取支援的 BIOS 磁碟機 (BIOS 偵測到的磁片或硬碟、CD 光碟機和 DVD 磁碟機) 的系統。因此，對 GRUB 組態檔案 (<filename>menu.lst</filename>) 所做的變更，將不需要重新安裝開機管理程式。啟動系統後，GRUB 會重新載入功能表檔案以及核心或起始 RAM 磁碟 (<literal>initrd</literal>) 的有效路徑和分割區資料，然後找這些檔案。
  </para>

  <para>
   GRUB 的實際組態以下方描述的四個檔案為基礎：
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/boot/grub/menu.lst</filename><indexterm><primary>GRUB</primary><secondary>menu.lst</secondary></indexterm></term>
    <listitem>
     <para>
      此檔案包含可以使用 GRUB 開機的分割區或作業系統，所有的相關資訊。如果沒有這段資訊，GRUB 指令行就會提示使用者提供如何繼續執行 (如需詳細資訊，請參閱<xref linkend="sec-grub-menu-change"/>)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/boot/grub/device.map</filename><indexterm><primary>GRUB</primary><secondary>device.map</secondary></indexterm></term>
    <listitem>
     <para>
      此檔案會從 GRUB 和 BIOS 表示法，將裝置名稱轉譯成 Linux 裝置名稱。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/grub.conf</filename><indexterm><primary>GRUB</primary><secondary>grub.conf</secondary></indexterm></term>
    <listitem>
     <para>
      此檔案包含 GRUB 外圍程序正確安裝開機載入程式時需要的指令、參數和選項。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/sysconfig/bootloader</filename> <indexterm> <primary>GRUB </primary> <secondary>sysconfig/bootloader</secondary></indexterm></term>
    <listitem>
     <para>
      此檔案由 perl-bootloader 程式庫 (在借助 YaST 設定開機載入程式時及每次安裝新的核心時使用) 讀取。它包含預設會新增到開機載入程式組態檔案的組態選項 (如核心參數)。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   可以透過多種方式控制 GRUB 現有組態啟動項目，可以從圖形功能表選取 (開頭顯示畫面)。組態會從檔案 <filename>menu.lst</filename> 載入。
  </para>

  <para>
   在 GRUB，開機前可以變更所有開機參數。例如，編輯功能表檔案發生的錯誤，可以用此方法更正。在出現某類輸入提示時也可以透過互動方式輸入開機指令。如需詳細資料，請參閱<xref linkend="sec-grub-menu-change"/>。GRUB 提供開機前，判斷核心和 <filename>initrd</filename> 二者位置的可能性。以此方法，您還可以為開機載入程式組態中不存在的項目，啟動安裝的作業系統。
  </para>

  <para>
   GRUB 事實上有兩個版本：一個是開機載入程式，一個是位於 <filename>/usr/sbin/grub</filename> 的一般 Linux 程式。後者稱為 <emphasis>GRUB 外圍程序</emphasis>。它可以在安裝系統中提供 GRUB 模擬功能，並可用來安裝 GRUB 或是在套用之前測試設定。這種將 GRUB 安裝成硬碟或磁片上的開機載入程式的功能，以指令 <command>setup</command> 的形式整合於 GRUB。Linux 載入時，可以在 GRUB 外圍程序使用此指令。
  </para>

  <section xml:id="sec-grub-menu">
   <title>檔案 <filename>/boot/grub/menu.lst</filename></title><indexterm> <primary>組態檔案</primary><secondary>menu.lst</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>開機功能表</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>menu.lst</secondary></indexterm>
   <para>
    圖形開頭顯示畫面以及開機功能表是以 GRUB 組態檔 <filename>/boot/grub/menu.lst</filename> 為基礎的，它包含可以透過功能表啟動的所有分割區或作業系統，全部的相關資訊。
   </para>
   <para>
    每次啟動系統時，GRUB 會從檔案系統載入功能表檔案。基於此因素，GRUB 不需要在每次變更檔案後，重新安裝。使用 YaST 開機載入器來修改 GRUB 組態，詳細資訊請參閱<xref linkend="sec-boot-yast2-config"/>。
   </para>
   <para>
    功能表檔案包含指令。語法相當簡單。每一行包含一個指令，後面是由像外圍程序中的空格所分開的選用參數。基於歷史因素，部份指令可以允許 <literal>=</literal> 放在第一個參數前面。註解是以井字號 (<literal>#</literal>) 開頭。
   </para>
   <para>
    若要識別功能表綜覽中的功能表項目，請為每一個項目設定 <literal>title</literal>。關鍵字 <literal>title</literal> 後面的文字 (包括任何空格) 將在功能表中顯示成可選取的選項。當這個功能表項目被選取時，就會執行下一個 <literal>title</literal> 指示的所有指令。
   </para>
   <para>
    最簡單的案例是重新導向至其他作業系統的開機載入程式。指令是 <literal>chainloader</literal>，而且引數通常是採用 GRUB 區塊表示法的其他分割區開機區塊。例如：
   </para>
<screen>chainloader (hd0,3)+1</screen>
   <para>
    關於 GRUB 中的裝置名稱，請參閱<xref linkend="sec-grub-devices"/>。這個範例會指定第一個硬碟中，第四個分割區的第一個區塊。
   </para>
   <para>
    使用指令 <literal>kernel</literal> 來指定核心影像。第一個引數是分割區中，核心影像的路徑。其他引數會傳送到指令行上的核心。
   </para>
   <para>
    如果核心沒有內建驅動程式來存取根分割區、或是這時是使用包含進階 HotPlug 功能的最新 Linux 系統，<filename>initrd</filename> 就必須以個別的 GRUB 指令來指定，它唯一的引數是 <filename>initrd</filename> 檔案路徑。因為 <filename>initrd</filename> 的載入位址是記錄於載入的核心影像，所以指令 <literal>initrd</literal> 必須立即接在 <literal>kernel</literal> 指令的後面。
   </para>
   <para>
    指令 <literal>root</literal> 會簡化核心和 initrd 檔案的指定。<literal>root</literal> 的唯一引數是裝置或分割區。這個裝置會用於所有一直到下一個 <literal>root</literal> 指令指定時才會出現明確指定裝置的所有核心、<filename>initrd</filename> 或其他檔案路徑。
   </para>
   <para>
    <literal>boot</literal> 指令會在每一個功能表項目最後暗示，所以它不需要寫入功能表檔案。不過，如果您使用互動式 GRUB 來開機，必須在最後輸入 <literal>boot</literal> 指令。指令本身沒有引數。它只是啟動載入的核心影像或指定的鏈結載入器。
   </para>
   <para>
    撰寫所有功能表項目之後，將其中一個定義為 <literal>default</literal> 項目。否則，會使用第一個 (項目 <literal>0</literal>) 做為預設項目。您也可以指定預設項目要在幾秒後啟動。<literal>timeout</literal> 和 <literal>default</literal> 通常在功能表項目前面。如需參考範例，請參閱<xref linkend="sec-grub-menu-example"/>。
   </para>
   <section xml:id="sec-grub-devices">
    <title>硬碟和分割區的命名慣例</title><indexterm> <primary>GRUB</primary><secondary>裝置名稱</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>分割區名稱</secondary></indexterm>
    <para>
     GRUB 用於硬碟和分割區的命名慣例與用於一般 Linux 裝置的命名慣例不同。它比較類似 BIOS 的簡易磁碟列舉方式，而且語法類似一些 BSD 衍生版本中所用的語法。在 GRUB 中，分割區的編號從 0 開始。這表示 (<filename>hd0,0</filename>) 是第一個硬碟的第一個分割區。與一般桌上型機器的 primary master 硬碟對應的 Linux 裝置名稱是 <filename>/dev/sda1</filename>。
    </para>
    <para>
     四個可能的主分割區會指定分割區編號 <literal>0</literal> 到 <literal>3</literal>。邏輯分割區是從 <literal>4</literal> 開始編號：
    </para>
<screen>(hd0,0)   first primary partition of the first hard disk
(hd0,1)   second primary partition
(hd0,2)   third primary partition
(hd0,3)   fourth primary partition (usually an extended partition)
(hd0,4)   first logical partition
(hd0,5)   second logical partition</screen>
    <para>
     由於獨立於 BIOS 裝置，GRUB 不會區分 PATA (IDE)、SATA、SCSI 和硬體 RAID 裝置。BIOS 或其他控制器識別的所有硬碟，會按照 BIOS 的開機順序編號。
    </para>
    <para>
     可惜的是，它通常無法將 Linux 裝置名稱正確對應至 BIOS 裝置名稱。它會透過演算法的協助來產生此對應，然後儲存至檔案 <filename>device.map</filename>，需要時可以編輯它。如需關於檔案 <filename>device.map</filename> 的資訊，請參閱<xref linkend="sec-grub-map"/>。
    </para>
    <para>
     完整 GRUB 路徑包含放在括號中的裝置名稱，以及指定分割區中檔案系統的檔案路徑。路徑開頭是一個斜線。例如，如果系統有一個 PATA (IDE) 硬碟，它的第一個分割區包含 Linux，則可以使用如下方式指定可開機核心：
    </para>
<screen>(hd0,0)/boot/vmlinuz</screen>
   </section>
   <section xml:id="sec-grub-menu-example">
    <title>功能表檔案範例</title>
    <para>
     以下範例顯示 GRUB 功能表檔案的結構。這個範例安裝會在 <filename>/dev/sda5</filename> 下建立 Linux 開機分割區，在 <filename>/dev/sda7</filename> 下建立根分割區，在 <filename>/dev/sda1</filename> 下進行 Windows 安裝。
    </para>
    
<screen>gfxmenu (hd0,4)/boot/message<co xml:id="grub-menu-example-gfxmenu"/>
color white/blue black/light-gray<co xml:id="grub-menu-example-color"/>
default 0<co xml:id="grub-menu-example-default"/>
timeout 8<co xml:id="grub-menu-example-timeout"/>

title linux<co xml:id="grub-menu-example-linux"/>
   root (hd0,4)
   kernel /boot/vmlinuz root=/dev/sda7 vga=791 resume=/dev/sda9
   initrd /boot/initrd

title windows<co xml:id="grub-menu-example-windows"/>
   rootnoverify (hd0,0)
   chainloader +1

title floppy<co xml:id="grub-menu-example-floppy"/>
   rootnoverify (hd0,0)
   chainloader (fd0)+1

title failsafe<co xml:id="grub-menu-example-failsafe"/>
   root (hd0,4)
   kernel /boot/vmlinuz.shipped root=/dev/sda7 ide=nodma \
   apm=off acpi=off vga=normal nosmp maxcpus=0 3 noresume
   initrd /boot/initrd.shipped</screen>
    <para>
     第一個區塊定義開頭顯示畫面的組態：
    </para>
    <calloutlist>
     <callout arearefs="grub-menu-example-gfxmenu">
      <para>
       背景影像 <literal>message</literal> 位於 <filename>/dev/sda5</filename> 分割區的 <filename>/boot</filename> 目錄中。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-color">
      <para>
       顏色配置：白色 (前景)、藍色 (背景)，黑色 (選中項目)，以及淺灰色 (選中項目的背景)。色彩配置對於開頭顯示畫面沒有作用，只對您可以存取而且可以自訂的 GRUB 功能表有作用 (您可以使用 <keycap>Esc</keycap>，結束開頭顯示畫面)。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-default">
      <para>
       依預設，啟動的是第一個 (<literal>0</literal>) 功能表項目 <literal>title linux</literal>。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-timeout">
      <para>
       沒有任何用者輸入，經過 8 秒後，GRUB 會自動啟動預設項目。若要停用自動開機，請刪除 <literal>timeout</literal>。如果設定為 <literal>timeout 0</literal>，GRUB 會馬上啟動預設項目。
      </para>
     </callout>
    </calloutlist>
    <para>
     第二個 (最大的) 區塊會列示各種可開機的作業系統。個別作業系統的區段會從 <literal>title</literal> 開始。
    </para>
    <calloutlist>
     <callout arearefs="grub-menu-example-linux">
      <para>
       第一個項目 (<literal>title linux</literal>) 負責啟動 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>。核心 (<literal>vmlinuz</literal>) 是位在第一個硬碟的第一個邏輯分割區 (開機分割區)。核心參數，例如根分割區和 VGA 模式，會在此添加。根分割區是根據 Linux 命名慣例 (<filename>/dev/sda7/</filename>) 指定的，因為此資訊由核心讀取，與 GRUB 無關。<literal>initrd</literal> 也是位在第一個硬碟的第一個邏輯分割區。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-windows">
      <para>
       第二個項目負責載入 Windows。Windows 是從第一個硬碟的第一個分割區啟動 (<filename>hd0,0</filename>)。指令 <literal>chainloader +1</literal> 會造成 GRUB 讀取、並執行指定分割區的第一個磁區。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-floppy">
      <para>
       下一個項目允許從磁片開機，無需修改 BIOS 設定。
      </para>
     </callout>
     <callout arearefs="grub-menu-example-failsafe">
      <para>
       開機選項 <literal>failsafe</literal> 會以選擇的核心參數來啟動 Linux，可以啟動發生問題的 Linux 系統。
      </para>
     </callout>
    </calloutlist>
    <para>
     功能表檔案可以在需要時變更。GRUB 會在下次啟動時使用修改的設定。使用 YaST 或選擇的編輯器，永久地編輯檔案。另一種方法是，使用 GRUB 的編輯功能，以互動方式暫時變更 (請參閱<xref linkend="sec-grub-menu-change"/>)。
    </para>
   </section>
   <section xml:id="sec-grub-menu-change">
    <title>在開機程序期間編輯功能表項目</title><indexterm> <primary>GRUB </primary> <secondary>功能表編輯器</secondary></indexterm>
    <para>
     在圖形化開機功能表中，可以使用方向鍵選取要啟動的作業系統。如果選取 Linux 系統，可以在開機提示時輸入其他啟動參數。若要直接編輯個別功能表項目，請按 <keycap>Esc</keycap> 結束開頭顯示畫面，然後跳到 GRUB 文字功能表，再按 <keycap>E</keycap>。用此方式所做的變更，只會套用到目前開機，因此不會永久變更。
    </para>
    <important>
     <title>開機程序期間的鍵盤配置</title>
     <para>
      US 鍵盤配置是啟動時唯一可以使用的鍵盤配置。請參閱<xref linkend="fig-trouble-install-keyboard-us"/>。
     </para>
    </important>
    <para>
     編輯功能表項目有利於修復無法再啟動的缺陷系統，因為開機載入程式錯誤的組態檔，可以手動輸入參數，便得以解決。在開機程序期間手動輸入參數，對於測試新設定但可避免損壞原始系統，有很大的幫助。
    </para>
    <para>
     啟用編輯模式之後，使用方向鍵選取功能表項目來編輯組態。若要讓組態變成可編輯狀態，請再按 <keycap>E</keycap> 一次。使用此方法，在對於開機程序產生負面影響之前編輯錯誤的分割區或路徑指定。按 <keycap>Enter</keycap>，結束編輯模式並返回功能表。然後按 <keycap>B</keycap> 來啟動此項目。底下的說明文字會顯示進一步可行的動作。
    </para>
    <para>
     若要永久地輸入變更的開機選項，然後傳送至核心，以 <systemitem class="username">root</systemitem> 身分開啟檔案 <filename>menu.lst</filename>，然後將各自的核心參數加入到現有的指令行，並以空格分隔：
    </para>
<screen>title linux
   root(hd0,0)
     kernel /vmlinuz root=/dev/sda3 <replaceable>additional parameter</replaceable>
   initrd /initrd</screen>
    <para>
     GRUB 會在下次啟動系統時，使用新參數。另一種方法是，使用 YaST 開機載入器模組進行這項變更。將新參數加入至現有的行，並用空格分開。
    </para>
   </section>
  </section>

  <section xml:id="sec-grub-map">
   <title>檔案 device.map</title><indexterm> <primary>GRUB </primary> <secondary>device.map</secondary></indexterm>
   <para>
    檔案 <filename>device.map</filename> 會將 GRUB 和 BIOS 裝置名稱對應至 Linux 裝置名稱。在包含 PATA (IDE) 和 SCSI 硬碟的混合系統中，GRUB 必須透過特定程序來確定開機順序，因為 GRUB 可能無法存取 BIOS 的開機順序資訊。GRUB 儲存分析的結果至檔案 <filename>/boot/grub/device.map</filename>。對於 BIOS 中的開機順序設定為 PATA 先於 SCSI 的系統，其範例 <filename>device.map</filename> 檔案如下所示︰
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/sda
(hd1)  /dev/sdb</screen>
   <para>
    或
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/disk-by-id/<replaceable>DISK1 ID</replaceable>
(hd1)  /dev/disk-by-id/<replaceable>DISK2 ID</replaceable></screen>
   <para>
    因為 PATA (IDE)、SCSI 和其他硬碟的順序取決於多種因素，並且 Linux 無法識別映射，所以檔案 <filename>device.map</filename> 中的順序可透過手動方式設定。如果您在啟動時發生問題，檢查此檔案中的順序是否對應至 BIOS 的順序，然後在需要時使用 GRUB 提示來暫時修改它。啟動 Linux 系統之後，檔案 <filename>device.map</filename> 可以透過 YaST 開機載入器或其他選擇的編輯器，永久性編輯。
   </para>
   <note os="sles">
    <title>最大硬碟數</title>
    <para>
     為了定址硬碟，GRUB 會使用 BIOS 服務。此作業是透過軟體岔斷 Int13h 來完成的。由於 Int13h 最多只能處理八個磁碟，因此，即使存在更多磁碟，GRUB 也只能從那些經由 Int13h 處理的磁碟開機 (多重路徑系統中常常會出現這種情況)。因此，安裝時建立的 <filename>device.map</filename> 檔案最多只能包含八個 Int13h 處理的磁碟。
    </para>
   </note>
   <para>
    在手動變更檔案 <filename>device.map</filename> 之後，請執行以下指令來重新安裝 GRUB。此指令會造成檔案 <filename>device.map</filename> 重新載入，並以 <filename>grub.conf</filename> 列示的指令執行：
   </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
  </section>

  <section xml:id="sec-grub-conf">
   <title>檔案 /etc/grub.conf</title><indexterm> <primary>組態檔案</primary><secondary>grub.conf</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>grub.conf</secondary></indexterm><indexterm><primary>設定</primary><secondary>GRUB</secondary></indexterm>
   <para>
    除了 <filename>menu.lst</filename> 和 <filename>device.map</filename> 之外，第三重要的 GRUB 組態檔案是 <filename>/etc/grub.conf</filename>。此檔案包含 GRUB 外圍程序正確安裝開機載入程式時需要的指令、參數和選項：
   </para>
<screen>setup --stage2=/boot/grub/stage2 --force-lba (hd0,1) (hd0,1)
   quit</screen>
   <para>
    此指令會告知 GRUB 自動將開機載入程式安裝到第一個硬碟上的第二個分割區 (hd0,1)，安裝時使用位於同一個分割區上的開機影像。從已掛接的檔案系統安裝 <option>stage2</option> 影像時必須使用 <filename>--stage2=/boot/grub/stage2</filename> 參數。部分 BIOS 的 LBA 支援實作錯誤，<option>--force-lba</option> 提供了忽略這些錯誤的解決方案。
   </para>
  </section>

  <section xml:id="sec-grub-sysconfig">
   <title>檔案 <filename>/etc/sysconfig/language</filename></title><indexterm> <primary>GRUB </primary> <secondary>sysconfig/bootloader</secondary></indexterm>
   <para>
    此組態檔案只在借助 YaST 設定開機載入程式時以及每次安裝新的核心時才使用。它可以由修改開機載入程式組態檔案 (例如 GRUB 中的 <filename>/boot/grub/menu.lst</filename>) 的 perl-bootloader 程式庫進行相應的評估。<filename>/etc/sysconfig/bootloader</filename> 不是特定於 GRUB 的組態檔案，其值會套用於 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上安裝的任何開機載入程式。
   </para>
   <note>
    <title>核心更新之後的開機載入程式組態</title>
    <para>
     每次安裝新的核心後，perl-bootloader 便會使用 <filename>/etc/sysconfig/bootloader</filename> 中指定的預設值寫入新的開機載入程式組態檔案 (例如針對 GRUB 寫入 <filename>/boot/grub/menu.lst</filename>)。如果要使用一組自定的核心參數，請務必根據需要調整 <filename>/etc/sysconfig/bootloader</filename> 中相關的預設值。
    </para>
   </note>
   <variablelist>
    <varlistentry>
     <term><literal>LOADER_TYPE</literal>
     </term>
     <listitem>
      <para>
       指定要在系統 (如 GRUB 或 LILO) 上安裝的開機載入程式。請勿直接修改 — 請依<xref linkend="pro-boot-yast2-config-loader"/> 中所述使用 GRUB 變更開機載入程式。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_VGA / FAILSAFE_VGA / XEN_VGA</literal>
     </term>
     <listitem>
      <para>
       開機時使用之 framebuffer 的螢幕解析度和色彩深度使用核心參數 <literal>vga</literal> 進行設定。這些值定義要用於預設開機項目、Failsafe 和 XEN 項目的解析度和色彩深度。有效值包括：
      </para>
      <table>
       <title>螢幕解析度與色彩深度參照表</title>
       <tgroup cols="6">
        <thead>
         <row>
          <entry>
           <para/>
          </entry>
          <entry>
           <para>
            640x480
           </para>
          </entry>
          <entry>
           <para>
            800x600
           </para>
          </entry>
          <entry>
           <para>
            1024x768
           </para>
          </entry>
          <entry>
           <para>
            1280x1024
           </para>
          </entry>
          <entry>
           <para>
            1600x1200
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            8bit
           </para>
          </entry>
          <entry>
           <para>
            0x301
           </para>
          </entry>
          <entry>
           <para>
            0x303
           </para>
          </entry>
          <entry>
           <para>
            0x305
           </para>
          </entry>
          <entry>
           <para>
            0x307
           </para>
          </entry>
          <entry>
           <para>
            0x31C
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            15bit
           </para>
          </entry>
          <entry>
           <para>
            0x310
           </para>
          </entry>
          <entry>
           <para>
            0x313
           </para>
          </entry>
          <entry>
           <para>
            0x316
           </para>
          </entry>
          <entry>
           <para>
            0x319
           </para>
          </entry>
          <entry>
           <para>
            0x31D
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            16bit
           </para>
          </entry>
          <entry>
           <para>
            0x311
           </para>
          </entry>
          <entry>
           <para>
            0x314
           </para>
          </entry>
          <entry>
           <para>
            0x317
           </para>
          </entry>
          <entry>
           <para>
            0x31A
           </para>
          </entry>
          <entry>
           <para>
            0x31E
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            24bit
           </para>
          </entry>
          <entry>
           <para>
            0x312
           </para>
          </entry>
          <entry>
           <para>
            0x315
           </para>
          </entry>
          <entry>
           <para>
            0x318
           </para>
          </entry>
          <entry>
           <para>
            0x31B
           </para>
          </entry>
          <entry>
           <para>
            0x31F
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_APPEND / FAILSAFE_APPEND / XEN_KERNEL_APPEND</literal>
     </term>
     <listitem>
      <para>
       核心參數 (除 <literal>vga</literal> 之外) 會自動附加到開機載入程式組態檔案中的預設、Failsafe 和 XEN 開機項目。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>CYCLE_DETECTION / CYCLE_NEXT_ENTRY</literal>
     </term>
     <listitem>
      <para>
       設定是否使用開機循環偵測，以及若使用則應在重新開機循環 (如 <systemitem>Failsafe</systemitem>) 時將 <filename>/boot/grub/menu.lst</filename> 中的哪個替代項開機。如需詳細資訊，請參閱 <filename>/usr/share/doc/packages/bootcycle/README</filename>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="sec-grub-password">
   <title>設定啟動密碼</title><indexterm> <primary>GRUB </primary> <secondary>開機密碼</secondary></indexterm>
   <para>
    即使是在作業系統開機之前，GRUB 也支援對檔案系統的存取。沒有 root 許可權的使用者，在此時可以存取 Linux 系統中的檔案 (這些檔案在系統啟動後，他們並無法存取)。若要封鎖此類型的存取，或防止使用者啟動特定的作業系統，請設定開機密碼。
   </para>
   <important>
    <title>開機密碼和開頭顯示畫面</title>
    <para>
     如果您在 GRUB 使用開機密碼，將不會顯示一般的開頭顯示畫面。
    </para>
   </important>
   <para>
    按照以下方式，以使用者 <literal>root</literal> 的身分設定開機密碼：
   </para>
   <procedure>
    <step>
     <para>
      在 root 提示下，使用 grub-md5-crypt 將密碼加密：
     </para>
<screen># grub-md5-crypt
Password: ****
Retype password: ****
Encrypted: $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
    </step>
    <step>
     <para>
      將加密字串貼到檔案 <filename>menu.lst</filename> 的全域區段：
     </para>
<screen>gfxmenu (hd0,4)/message
color white/blue black/light-gray
default 0
timeout 8
password --md5 $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
     <para>
      現在，GRUB 指令只會在按 <keycap>P</keycap> 並輸入密碼後的開機提示中執行。不過，使用者仍然可以從開機功能表，啟動所有作業系統。
     </para>
    </step>
    <step>
     <para>
      要防止一或多個作業系統從開機功能表啟動，將項目 <literal>lock</literal> 新增至沒有密碼便不可以啟動的 <filename>menu.lst</filename> 每一個段落。例如：
     </para>
<screen>title linux
   kernel (hd0,4)/vmlinuz root=/dev/sda7 vga=791
   initrd (hd0,4)/initrd
   lock</screen>
     <para>
      重新啟動系統並從開機功能表選取 Linux 之後，將會顯示以下錯誤訊息：
     </para>
<screen>Error 32: Must be authenticated</screen>
     <para>
      按 <keycap>Enter</keycap> 進入功能表。然後按 <keycap>P</keycap>，進入密碼提示要求。輸入密碼並按 <keycap>Enter</keycap> 之後，應該就可啟動選取的作業系統 (本範例為 Linux)。
     </para>
    </step>
   </procedure>
  </section>
 </section>

 <xi:include href="grub_yast_i.xml" parse="xml"/>
 <section xml:id="sec-grub-entfernen">
  <title>解除安裝 Linux 開機載入程式</title><indexterm> <primary>解除安裝</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>解除安裝</primary><secondary>Linux</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>解除安裝</secondary></indexterm><indexterm><primary>Linux</primary><secondary>解除安裝</secondary></indexterm>

  <para>
   YaST 可以用來解除安裝 Linux 開機載入器，並將 MBR 還原回安裝 Linux 前的狀態。安裝時，YaST 會自動建立原始 MBR 的備份，並在需要時還原。
  </para>

  <para>
   若要解除安裝 GRUB，請啟動 YaST，然後按一下<menuchoice><guimenu>系統</guimenu><guimenu>開機載入程式</guimenu> </menuchoice>以啟動開機載入程式模組。選取<menuchoice> <guimenu>其他</guimenu><guimenu>還原硬碟的 MBR</guimenu> </menuchoice>，並以<guimenu>是，重新寫入</guimenu>進行確認。
  </para>
 </section>
 <xi:include href="grub_bootcd_i.xml" parse="xml"/>
 <section xml:id="sec-boot-screen">
  <title>圖形化 GRUB 畫面</title><indexterm> <primary>開機</primary><secondary>圖形</secondary></indexterm><indexterm><primary>主控台 </primary><secondary>圖形化</secondary></indexterm>

  <para>
   如果使用 <option>vga=<replaceable>值</replaceable></option> 選項做為核心參數，則圖形 SUSE 螢幕會顯示在第一個主控台上。如果您使用 YaST 來安裝，則會依照選取的解析度與顯示卡來自動啟動此選項。視需要，有三種方式可以停用 SUSE 畫面：
  </para>

  <variablelist>
   <varlistentry>
    <term>必要時停用 SUSE 畫面。</term>
    <listitem>
     <para>
      可以在指令行中輸入指令 <command>echo 0 &gt;/proc/splash</command> 以停用圖形式畫面。若要再次啟用它，請輸入 <command>echo 1 &gt;/proc/splash</command>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>預設停用 SUSE 畫面。</term>
    <listitem>
     <para>
      您可以新增核心參數 <option>splash=0</option> 到開機載入程式的組態。如需更多詳細資訊，請參閱<xref linkend="cha-grub"/>。但是，如果您想使用文字模式 (較早版本的預設值)，請設定 <option>vga=normal</option>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>完全停用 SUSE 畫面</term>
    <listitem>
     <para>
      編譯新的核心且關閉 <guimenu>框架緩衝區支援</guimenu>中的<guimenu>使用開機顯示畫面而非開機標幟</guimenu>選項。在核心中停用框架緩衝區支援，還會自動停用啟動畫面。
     </para>
     <warning>
      <title>不支援</title>
      <para>
       如果您使用自訂核心來執行，SUSE 將不會為您的系統提供任何支援。
      </para>
     </warning>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
 <section xml:id="sec-grub-probs">
  <title>疑難排解</title><indexterm> <primary>GRUB</primary><secondary>疑難排解</secondary></indexterm>

  <para>
   本節會介紹在使用 GRUB 開機時，經常遇到的問題以及可能解決方案的簡要說明。部份問題已經在<phrase os="sled;sles">知識庫 (網址為 <link xlink:href="http://www.suse.com/support"/>)</phrase> 的文章中做了說明。使用搜尋對話方塊尋找 <emphasis>GRUB</emphasis>、<emphasis>開機</emphasis>和<emphasis>開機載入程式</emphasis>這類的關鍵字。
  </para>

  <variablelist>
   <varlistentry>
    <term>GRUB 和 XFS</term>
    <listitem>
     <para>
      XFS 在分割區啟動區塊中，不會保留空間給 <filename>stage1</filename>。因此，不要將 XFS 分割區指定成開機載入程式的位置。您可以建立不是以 XFS 格式化的個別開機分割區來解決這個問題。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>GRUB 報告 GRUB Geom 錯誤<indexterm><primary>GRUB</primary><secondary>GRUB Geom 錯誤</secondary></indexterm></term>
    <listitem>
     <para>
      GRUB 會在系統啟動時檢查連接硬碟的位置。有時候，BIOS 會傳回不一致的資訊，而且 GRUB 會報告 GRUB 位置錯誤。若出現此情況，請更新 BIOS。
     </para>
     <para>
      如果 Linux 安裝在其他硬碟上，而且未註冊在 BIOS，GRUB 也會傳回此錯誤訊息。開機載入器的 <emphasis>stage1</emphasis> 可以正確找到和載入，不過 <emphasis>stage2</emphasis> 則找不到。將新磁碟登錄在 BIOS 就可以解決此問題。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>具有多個硬碟的系統無法開機</term>
    <listitem>
     <para>
      安裝時，YaST 可能已經判斷硬碟的開機順序錯誤。例如，GRUB 可能會將 PATA (IDE) 磁碟視為 <filename>hd0</filename>，將 SCSI 磁碟視為 <filename>hd1</filename>，即使 BIOS 中的開機順序與此相反 (即 SCSI <emphasis>先於</emphasis> PATA)。
     </para>
     <para>
      發生這種狀況時，請在開機程序透過 GRUB 指令行的協助來更正硬碟。在系統啟動之後，編輯 <filename>device.map</filename> 來永久套用新的對應。然後檢查檔案 <filename>/boot/grub/menu.lst</filename> 和 <filename>/boot/grub/device.map</filename> 中的 GRUB 裝置名稱，然後使用以下指令，重新安裝開機載入器：
     </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>從第二顆硬碟啟動 Windows</term>
    <listitem>
     <para>
      有些作業系統，例如 Windows，只可以從第一個硬碟啟動。在第一個硬碟以外的硬碟安裝類似作業系統時，會影響個別功能表項目的邏輯變更。
     </para>
<screen>...
title windows
   map (hd0) (hd1)
   map (hd1) (hd0)
   chainloader(hd1,0)+1
...</screen>
     <para>
      在此範例中，Windows 是從第二個硬碟啟動。基於此目的，硬碟的邏輯順序是使用 <literal>map</literal> 變更的。此變更不會影響 GRUB 功能表檔案中的邏輯。因此，第二個硬碟必須指定成 <literal>chainloader</literal>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
 <section xml:id="sec-grub-info">
  <title>更多資訊</title>

  <para>
   如需關於 GRUB 更進一步的資訊，請參閱 <link xlink:href="http://www.gnu.org/software/grub/"/>。另請參閱 <command>grub</command> info 頁面。<phrase os="sles;sled">您也可以在「技術資訊搜尋」中搜尋關鍵字<quote>GRUB </quote>，取得關於特殊問題的資訊，網址是 <link xlink:href="http://www.novell.com/support"/>。</phrase>
  </para>
 </section>
</chapter>
