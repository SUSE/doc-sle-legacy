<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="apache2.xml" id="cha.apache2">
 <title>Apache HTTP 服务器</title><indexterm class="startofrange" id="idx.apache2"><primary>Apache</primary></indexterm>
 <abstract>
  <para>
   根据 <ulink url="http://www.netcraft.com/"/> 上的调查，Apache HTTP 服务器 (Apache) 所占的市场份额超过了 50%，它是世界上使用最为广泛的一种 Web 服务器。由 Apache 软件基金会 (<ulink url="http://www.apache.org/"/>) 开发的 Apache 适用于大多数操作系统。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 包含 Apache 版本 2.2。本章将介绍如何安装、配置和设置 Web 服务器；如何使用 SSL、CGI 和其他模块；以及如何对 Apache 进行查错。
  </para>
 </abstract>
 <sect1 id="sec.apache2.quickstart">
  <title>快速入门</title><indexterm> <primary>Apache</primary> <secondary>快速入门</secondary> </indexterm>

  <para>
   借助本节内容，可快速设置并启动 Apache。您必须是 <systemitem class="username">root</systemitem> 用户才能安装和配置 Apache。
  </para>

  <sect2 id="sec.apache.quickstart.requirements">
   <title>要求</title>
   <para>
    在尝试设置 Apache Web 服务器之前，请确保满足以下要求：
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      计算机的网络配置正确。有关该主题的详细信息，请参见<xref linkend="cha.basicnet"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      通过与时间服务器同步来维护计算机的准确系统时间。这一点是必需的，因为 HTTP 协议的多个部分依赖于正确的时间。请参见<xref linkend="cha.netz.xntp"/>来了解该主题的更多信息。
     </para>
    </listitem>
    <listitem>
     <para>
      将安装最新的安全更新。如果存在疑问，请运行 YaST 联机更新。
     </para>
    </listitem>
    <listitem>
     <para>
      默认 Web 服务器端口 (<literal>80</literal>) 将在防火墙中打开。为此，请将 SuSEFirewall2 配置为允许外部区域中的服务 <guimenu>HTTP 服务器</guimenu>。这可以使用 YaST 完成。有关详细信息，请参见<xref linkend="sec.fire.SuSE.yast"/>。
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 id="sec.apache2.quickstart.installation">
   <title>安装</title><indexterm> <primary>Apache</primary> <secondary>安装</secondary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 默认不会安装到系统中。要用<quote>即装即用</quote>的标准预定义配置来安装它，请按如下所示继续：
   </para>
   <procedure>
    <title>用默认配置安装 Apache</title>
    <step performance="required">
     <para>
      启动 YaST，然后选择<menuchoice> <guimenu>软件</guimenu> <guimenu>软件管理</guimenu> </menuchoice>。
     </para>
    </step>
    <step performance="required">
     <para>
      选择<menuchoice> <guimenu>过滤器</guimenu> <guimenu>模式</guimenu> </menuchoice>，然后选择<guimenu>服务器功能</guimenu>中的 <guimenu>Web 和 LAMP 服务器</guimenu>。
     </para>
    </step>
    <step performance="required">
     <para>
      确认安装相关的包来完成安装进程。
     </para>
    </step>
   </procedure>
   <para>
    安装包括多处理模块 <systemitem>apache2-prefork</systemitem> 和 PHP5 模块。有关模块的详细信息，请参见<xref linkend="sec.apache2.modules"/>。
   </para>
  </sect2>

  <sect2 id="sect.apache.quickstart.start">
   <title>开始</title>
   <para>
    可以自动在引导时启动 Apache 或手动启动它。
   </para>
   <procedure>
    <title>自动启动 Apache</title>
    <step performance="required">
     <para>
      要确保 Apache 在引导期间自动在运行级别 <literal>3</literal> 和 <literal>5</literal> 启动，请执行以下命令：
     </para>
<screen>chkconfig -a apache2</screen>
    </step>
    <step performance="required">
     <para>
      或者启动 YaST，然后选择<menuchoice> <guimenu>系统</guimenu> <guimenu>系统服务（运行级别）</guimenu> </menuchoice>。
     </para>
    </step>
    <step performance="required">
     <para>
      搜索 <emphasis>apache2</emphasis> 并<guimenu>启用</guimenu>该服务。
     </para>
     <para>
      Web 服务器将立即启动。
     </para>
    </step>
    <step performance="required">
     <para>
      单击<guimenu>完成</guimenu>以保存更改。
     </para>
     <para>
      系统配置为在引导期间自动在运行级别 <literal>3</literal> 和 <literal>5</literal> 启动 Apache。
     </para>
    </step>
   </procedure>
   <para>
    有关 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的运行级别的详细信息和 YaST 运行级别编辑器的描述，请参见<xref linkend="sec.boot.runlevel.edit"/>。
   </para>
   <para>
    要使用外壳手动启动 Apache，请运行 <command>rcapache2 start</command>。
   </para>
   <procedure>
    <title>检查 Apache 是否正在运行</title>
    <para>
     如果在启动 Apache 时没有收到错误消息，这通常表示 Web 服务器正在运行。测试 Apache 是否正在运行：
    </para>
    <step performance="required">
     <para>
      启动浏览器，然后打开 <ulink url="http://localhost/"/>。
     </para>
     <para>
      如果 Apache 已启动并正在运行，您将看到一个测试页，指示<quote>它正在运行！</quote>。
     </para>
    </step>
    <step performance="required">
     <para>
      如果看不到此页面，请参见<xref linkend="sec.apache2.troubleeshooting"/>。
     </para>
    </step>
   </procedure>
   <para>
    既然 Web 服务器已在运行，因此可以添加您自己的文档、根据需要调整配置或通过安装模块来添加功能。
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.apache2.configuration">
  <title>配置 Apache</title><indexterm> <primary>Apache</primary> <secondary>配置</secondary> </indexterm>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了两个配置选项：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec.apache2.configuration.manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.apache2.configuration.yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手工配置可提供更详细的信息，但没有 YaST GUI 方便。
  </para>

  <important>
   <title>配置更改后重新装载或重启动 Apache</title>
   <para>
    大多数配置更改需要重新装载（有些还需要重启动）Apache 后才能生效。使用 <command>rcapache2 <option>reload</option></command> 或<xref linkend="sec.apache2.start_stop"/>中所述的某个重启动选项手动重新装载 Apache。
   </para>
   <para>
    如果用 YaST 配置 Apache，按<xref linkend="sec.apache2.configuration.yast.server_configuration"/>中所述将 <guimenu>HTTP 服务</guimenu>设置为<guimenu>已启用</guimenu>即可让上述操作自动完成。
   </para>
  </important>

  <sect2 id="sec.apache2.configuration.manually.configfiles">
   <title>Apache 配置文件</title><indexterm> <primary>Apache</primary> <secondary>配置</secondary><tertiary>文件</tertiary> </indexterm>
   <para>
    本部分概述了 Apache 配置文件。如果使用 YaST 进行配置，则不需要使用这些文件；但如果以后要切换到手动配置，则此信息可能有用。
   </para>
   <para>
    Apache 配置文件可在两个不同位置处获取：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec.apache2.configuration.manually.configfiles.etc_sysconfig_apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec.apache2.configuration.manually.configfiles.etc_apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec.apache2.configuration.manually.configfiles.etc_sysconfig_apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> 控制 Apache 的某些全局设置，例如要装载的模块、要包含的其他配置文件、启动服务器时应同时启动的标志，以及应添加到命令行的标志。此文件中的每个配置选项都有详细记录，因此在此不再描述。对于一般用途的 Web 服务器，<filename>/etc/sysconfig/apache2</filename> 中的设置应足以满足所有配置需要。
    </para>
   </sect3>
   <sect3 id="sec.apache2.configuration.manually.configfiles.etc_apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> 托管 Apache 的所有配置文件。下面描述了每个文件的用途。每个文件均包含几个配置选项（也称为<emphasis>指令</emphasis>）。这些文件中的每个配置选项都有详细记录，因此在此不再描述。
    </para>
    <para>
     Apache 配置文件按如下所示组织：
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv 
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>/etc/apache2/ 中的 Apache 配置文件</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        指定要用于不同语言的字符集。不要编辑此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        其他模块添加的配置文件。可在需要时将这些配置包含进虚拟主机配置。有关示例请参见 <filename>vhosts.d/vhost.template</filename>。如此操作后，可以为不同的虚拟主机提供不同的模块集。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        具有合理默认值的所有虚拟主机的全局配置。除了更改值之外，还可以使用虚拟主机配置来覆盖它们。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        定义 Apache 如何响应错误。要为所有虚拟主机自定义这些消息，请编辑此文件。否则在您的虚拟主机配置中覆盖这些指令。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        主 Apache 服务器配置文件。请勿更改此文件。它主要包含 include 语句和全局设置。重写此处列出的相关配置文件中的全局设置。更改您的虚拟主机配置中的特定于主机的设置（例如文档根目录）。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        将 Apache 绑定到特定的 IP 地址和端口。基于名称的虚拟主机也在此处配置。有关细节，请参见<xref linkend="sec.apache2.configuration.manually.vhost.named_vhosts"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        mime_magic 模块的数据帮助 Apache 自动确定 MIME 类型的未知文件。不要更改此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        MIME 类型可由系统识别（它实际上是一个指向 <filename>/etc/mime.types</filename> 的链接）。不要编辑此文件。如果需要添加此处没有列出的 MIME 类型，那么请将它们添加到 <filename>mod_mime-defaults.conf</filename>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        默认情况下安装的模块的配置文件。有关细节，请参见<xref linkend="sec.apache2.modules"/>。注意，可选模块的配置文件储存在目录 <filename>conf.d</filename> 中。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        包含不同 MPM（请参见<xref linkend="sec.apache2.modules.mpm"/>）的配置指令以及控制 Apache 性能的常规配置选项。在此处更改时，请对 Web 服务器进行合理的测试。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> 和 <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        全局 SSL 配置和 SSL 证书数据。有关细节，请参见<xref linkend="sec.apache2.ssl"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        从 <filename>/etc/sysconfig/apache2</filename> 自动生成的配置文件。请勿更改这些文件，而应编辑 <filename>/etc/sysconfig/apache2</filename>。不要在此目录中放置其他配置文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        指定运行 Apache 的用户和组 ID。不要更改此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        虚拟主机配置应位于此处。该目录包含使用和不使用 SSL 的虚拟主机的模板文件。该目录中以 <filename>.conf</filename> 结尾的所有文件均自动包含在 Apache 配置中。有关详细信息，请参见<xref linkend="sec.apache2.configuration.manually.vhost"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 id="sec.apache2.configuration.manually">
   <title>手动配置 Apache</title><indexterm class="startofrange" id="idx.apache2.configuration.manually"> <primary>Apache</primary> <secondary>配置</secondary> <tertiary>手动</tertiary> </indexterm>
   <para>
    手动配置 Apache 包括作为 <systemitem class="username">root</systemitem> 用户来编辑纯文本配置文件。
   </para>
   <sect3 id="sec.apache2.configuration.manually.vhost">
    <title>虚拟主机配置</title><indexterm> <primary>Apache</primary><secondary>配置</secondary><tertiary>虚拟主机</tertiary> </indexterm>
    <para>
     术语<emphasis>虚拟主机</emphasis>指的是 Apache 在一台物理计算机上为多个统一资源标识符 (URI) 提供服务的能力。这意味着在一个物理计算机上的一个 Web 服务器可以运行几个域（例如 www.example.com 和 www.example.net）。
    </para>
    <para>
     通常的做法是使用虚拟主机来节省管理精力（只需维护一个 Web 服务器即可）和硬件费用（每个域不需要专用的服务器）。虚拟主机可以是基于名称、基于 IP 或基于端口的。
    </para>
    <para>
     要列出所有现有虚拟主机，请使用命令 <command>httpd2 <option>-S</option></command>。这将输出一个列表，显示默认服务器和所有虚拟主机以及它们的 IP 地址和侦听端口。此外，该列表还针对每个虚拟主机包含一项，显示其在配置文件中的位置。
    </para>
    <para>
     可以通过 YaST（如<xref linkend="sec.apache2.configuration.yast.wizard.virtual_hosts"/>中所述）或通过手动编辑配置文件来配置虚拟主机。默认情况下，系统会根据 <filename>/etc/apache2/vhosts.d/</filename> 中每个虚拟主机一个配置文件的设置，为 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 做好准备。该目录中扩展名为 <filename>.conf</filename> 的所有文件均会自动包含到配置中。虚拟主机的基本模板将在目录 <filename>vhost.template</filename> 或 <filename>vhost-ssl.template</filename> 中提供，以用于带有 SSL 支持的虚拟主机。
    </para>
    <tip>
     <title>始终创建虚拟主机配置</title>
     <para>
      建议您始终创建虚拟主机配置文件，即使您的 Web 服务器仅主管一个域。这样不但可以将特定于域的配置保存在一个文件中，还可以只需移动、删除或重命名虚拟主机的配置文件就能始终回退到有效的基本配置。因此，还应该为每个虚拟主机创建单独的配置文件。
     </para>
     <para>
      使用基于名称的虚拟主机时，建议设置将在域名与虚拟主机配置不匹配时使用的默认配置。默认虚拟主机即最先装载其配置的虚拟主机。由于配置文件的装载顺序取决于文件名，因此请以下划线字符 (<literal>_</literal>) 作为默认虚拟主机配置的文件名开头，以确保最先装载它（例如：<filename>_default_vhost.conf</filename>）。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem> 块保存适用于特定域的信息。当 Apache 接收到客户端对某已定义虚拟主机的请求时，将使用此部分包含的指令。几乎所有指令均可用在虚拟主机环境中。请参见 <ulink url="http://httpd.apache.org/docs/2.2/mod/quickreference.html"/> 来获取有关 Apache 的配置指令的进一步信息。
    </para>
    <sect4 id="sec.apache2.configuration.manually.vhost.named_vhosts">
     <title>基于名称的虚拟主机</title>
     <para>
      使用基于名称的虚拟主机，每个 IP 地址能服务于多个网站。Apache 使用客户端发送的 HTTP 报头中的主机字段来将请求连接到某个虚拟主机声明中匹配的 <systemitem>ServerName</systemitem> 项。如果找不到匹配的 <systemitem>ServerName</systemitem>，则默认使用第一个指定的虚拟主机。
     </para>
     <para>
      指令 <systemitem>NameVirtualHost</systemitem> 告诉 Apache 在哪个 IP 地址以及（可选）哪个端口上侦听客户端发出的在 HTTP 报头中包含域名的请求。此选项是在配置文件 <filename>/etc/apache2/listen.conf</filename> 中配置的。
     </para>
     <para>
      第一个自变量是完全限定的域名，但建议使用 IP 地址。第二个自变量是可选的端口。默认情况下，使用端口 <systemitem>80</systemitem> 并通过 <systemitem>Listen</systemitem> 指令进行配置。
     </para>
     <para>
      IP 地址和端口号都可以使用通配符 <literal>*</literal> 来接收所有接口上的请求。IPv6 地址必须括在方括号中。
     </para>
     <example id="ex.apache2.virtual_hosts.name_based">
      <title>基于名称的 <systemitem>VirtualHost</systemitem> 项的变体</title>
<screen># NameVirtualHost <replaceable>IP-address</replaceable><replaceable>[:Port]</replaceable>
NameVirtualHost 192.168.3.100:80
NameVirtualHost 192.168.3.100
NameVirtualHost *:80
NameVirtualHost *
NameVirtualHost [2002:c0a8:364::]:80</screen>
     </example>
     <para>
      打开 <systemitem>VirtualHost</systemitem> 标记将使先前使用 <systemitem>NameVirtualHost</systemitem> 声明的 IP 地址（或全限定域名）在基于名称的虚拟主机配置中显示为参数。之前使用 <systemitem>NameVirtualHost</systemitem> 指令声明的端口号是可选的。
     </para>
     <para>
      允许使用通配符 <emphasis>*</emphasis> 代替 IP 地址。该语法仅当和 <systemitem>NameVirtualHost *</systemitem> 中的通配符一起使用时才有效。当使用 IPv6 地址时，地址必须括在方括号中。
     </para>
     <example id="ex.apache.directives.virtualhost.name_based">
      <title>基于名称的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 id="sec.apache2.configuration.manually.vhost.ip_vhosts">
     <title>基于 IP 的虚拟主机</title>
     <para>
      这种备选的虚拟主机配置要求为计算机设置多个 IP。Apache 的一个实例储存多个域，并为每个域指派一个不同的 IP。
     </para>
     <para>
      物理服务器必须为每个基于 IP 的虚拟主机指定一个 IP 地址。如果计算机没有多个网卡，也可以使用虚拟网络接口（IP 别名）。
     </para>
     <para>
      以下示例显示，Apache 在 IP 为 <systemitem class="ipaddress">192.168.3.100</systemitem> 且储存着其它两个 IP 为 <systemitem class="ipaddress">192.168.3.101</systemitem> 和 <systemitem class="ipaddress">192.168.3.102</systemitem> 的域的计算机上运行的情况。请为每个虚拟服务器指定一个单独的 <systemitem>VirtualHost</systemitem> 块。
     </para>
     <example id="ex.apache.directives.virtualhost.ip_based">
      <title>基于 IP 的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      在此，<systemitem>VirtualHost</systemitem> 指令只针对除 <systemitem>192.168.3.100</systemitem> 以外的接口。在也为 <systemitem>192.168.3.100</systemitem> 配置<systemitem>监听</systemitem>指令时，必须创建单独的、基于 IP 的虚拟主机才能答复对该接口的 HTTP 请求，否则应用在默认服务器配置 (<filename>/etc/apache2/default-server.conf</filename>) 中找到的指令。
     </para>
    </sect4>
    <sect4 id="sec.apache2.configuration.manually.vhost.basic_configuration">
     <title>基本虚拟主机配置</title>
     <para>
      每个虚拟主机配置中至少要有以下指令，这样才能设置虚拟主机。请参见 <filename>/etc/apache2/vhosts.d/vhost.template</filename> 获取更多选项。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         主机所在的全限定域名。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         Apache 应该为此主机提供文件的目录路径。出于安全考虑，在默认情况下禁止访问整个文件系统，所以必须在<systemitem>目录</systemitem>容器中显示地解锁此目录。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         服务器管理员的电子邮件地址。例如，此地址将显示在 Apache 创建的错误页面上。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         该虚拟主机的错误日志文件。尽管不必为每个虚拟主机创建单独的错误日志文件，但是通常建议执行此操作，因为这样能使错误调试变得容易些。<filename>/var/log/apache2/</filename> 是 Apache 日志文件的默认目录。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         该虚拟主机的访问日志文件。尽管不必为每个虚拟主机创建单独的访问日志文件，但是通常建议执行此操作，因为这样可单独分析每个主机的访问统计数字。<filename>/var/log/apache2/</filename> 是 Apache 日志文件的默认目录。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      综上所述，出于安全考虑，在默认情况下禁止访问整个文件系统。因此，明确对您放置了 Apache 应为其提供服务的文件所在的目录解除锁
定，例如 <systemitem>DocumentRoot</systemitem>：
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Order allow,deny
  Allow from all
&lt;/Directory&gt;</screen>
     <para>
      完整的配置文件外观如下所示：
     </para>
     <example id="ex.apache.directives.virtualhost.basic_configuration">
      <title>基本 <systemitem>VirtualHost</systemitem> 配置</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
    Order allow,deny
    Allow from all
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example><indexterm class="endofrange" startref="idx.apache2.configuration.manually"/>
    </sect4>
   </sect3>
  </sect2>



  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="apache2_yast_i.xml" parse="xml"/>


 </sect1>
 <sect1 id="sec.apache2.start_stop">
  <title>启动和停止 Apache</title><indexterm> <primary>Apache</primary><secondary>启动</secondary></indexterm><indexterm><primary>Apache</primary><secondary>停止</secondary></indexterm>

  <para>
   如果使用 YaST 配置（如<xref linkend="sec.apache2.configuration.yast"/>中所述），则 Apache 在引导时在运行级别 3 和 5 启动，在运行级别 0、1、2 和 6 停止。您可以使用 YaST 的运行级别编辑器或命令行工具 <command>chkconfig</command> 更改此行为。
  </para>

  <para>
   要在正在运行的系统上启动、停止或操作 Apache，请使用 init 脚本 <command>/usr/sbin/rcapache2</command>。有关 init 脚本的常规信息，请参见<xref linkend="sec.boot.init.skripte"/>。<command>rcapache2</command> 命令使用以下参数：
  </para>

  <variablelist>
   <varlistentry>
    <term><option>status</option>
    </term>
    <listitem>
     <para>
      请检查 Apache 是否已启动。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>start</option>
    </term>
    <listitem>
     <para>
      如果 Apache 未在运行，则启动它。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>startssl</option>
    </term>
    <listitem>
     <para>
      如果支持 SSL 的 Apache 未在运行，则启动它。有关 SSL 支持的详细信息，请参见<xref linkend="sec.apache2.ssl"/>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop</option>
    </term>
    <listitem>
     <para>
      通过终止父进程来停止 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart</option>
    </term>
    <listitem>
     <para>
      停止然后重启动 Apache。如果 Web 服务器没有预先运行，则启动它。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>try-restart</option>
    </term>
    <listitem>
     <para>
      仅当 Apache 已在运行时才停止并重启动它。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>reload</option> 或 <option>graceful</option>
    </term>
    <listitem>
     <para>
      停止 Web 服务器时，应建议所有生成的 Apache 进程在关闭之前首先完成它们的请求。每个进程终止时，会替换为一个新启动的进程，继而导致 Apache 完全<quote>重启动</quote>。
     </para>
     <tip>
      <title>在生产环境中重启动 Apache</title>
      <para>
       要激活 Apache 配置更改而不致使连接中断，请使用 <command>rcapache2 <option>reload</option></command> 命令。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>restart-graceful</option>
    </term>
    <listitem>
     <para>
      启动另一台用于立即处理所有进来的请求的 Web 服务器。Web 服务器的上一个实例将继续处理用 <systemitem>GracefulShutdownTimeout</systemitem> 配置的已定义时间段的所有现有请求。
     </para>
     <para>
      <command>rcapache2 <option>restart-graceful</option></command> 在升级到新版本或更改需要重启动的配置选项时很有用。使用此选项确保将服务器停机时间减至最短。
     </para>
     <para>
      需要设置 <systemitem>GracefulShutdownTimeout</systemitem>，否则 <option>restart-graceful</option> 将导致经常性重启动。如果设置为零，该服务器将无限期地等待，直至所有剩余请求都全部完成。
     </para>
     <para>
      如果原始 Apache 实例无法清除所有必需资源，则正常重启动可能会失败。这种情况下，该命令将执行正常停止。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>stop-graceful</option>
    </term>
    <listitem>
     <para>
      在使用 <systemitem>GracefulShutdownTimeout</systemitem> 配置已定义的时间段后停止 Web 服务器，以便确保可以完成现有请求。
     </para>
     <para>
      需要设置 <systemitem>GracefulShutdownTimeout</systemitem>，否则 <option>stop-graceful</option> 将导致经常性重启动。如果设置为零，该服务器将无限期地等待，直至所有剩余请求都全部完成。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>configtest</option> 或 <option>extreme-configtest</option>
    </term>
    <listitem>
     <para>
      在不影响运行的 Web 服务器的情况下检查配置文件的语法。由于此检查是在服务器每次启动、重新装载或重启动时强制执行的，所以通常不需要明确运行测试（如果发现配置错误，则 Web 服务器将不会启动、重新装载或重启动）。<option>extreme-configtest</option> 选项将以 <systemitem class="username">nobody</systemitem> 用户身份启动 Web 服务器，并实际装载该配置，因此可以检测出更多错误。请注意，尽管已装载此配置，但仍不能测试 SSL 设置，因为 <systemitem class="username">nobody</systemitem> 不能读取 SSL 证书。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>probe</option>
    </term>
    <listitem>
     <para>
      探测重装载的必要性（检查配置是否已更改）并向 <command>rcapache2</command> 命令建议应该使用的参数。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>server-status 和 full-server-status</option>
    </term>
    <listitem>
     <para>
      分别转储不全或完整状态屏幕。需要安装 lynx 或 w3m 并启用 <systemitem>mod_status</systemitem> 模块。此外，还必须将<literal>状态</literal>添加到文件 <filename>/etc/sysconfig/apache2</filename> 中的 <systemitem>APACHE_SERVER_FLAGS</systemitem>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>其他标志</title>
   <para>
    如果向 <command>rcapache2</command> 指定其他标志，则这些标志将传到 Web 服务器。
   </para>
  </tip>
 </sect1>
 <sect1 id="sec.apache2.modules">
  <title>安装、激活和配置模块</title><indexterm class="startofrange" id="idx.apache2.modules"> <primary>Apache</primary> <secondary>模块</secondary> </indexterm>

  <para>
   Apache 软件是以模块化方式构建的：除某些核心任务外的所有功能都是通过模块处理的。到目前为止，即使是 HTTP 也是由模块（http_core）处理的。
  </para>

  <para>
   Apache 模块可以在构建时编译进 Apache 二进制文件中或在运行时动态装载。请参见<xref linkend="sec.apache2.modules.activating"/>以获取有关如何动态装载模块的详细信息。
  </para>

  <para>
   Apache 模块可以划分为四个不同的类别：
  </para>

  <variablelist>
   <varlistentry>
    <term>基础模块</term>
    <listitem>
     <para>
      默认情况下，基础模块将编译到 Apache 中。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上的 Apache 中仅编译了 <systemitem>mod_so</systemitem>（装载其他模块时需要）和 <systemitem>http_core</systemitem>。所有其他对象都可用作共享对象：它们可在运行时被包含，而不是包含在服务器二进制文件本。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>扩展模块</term>
    <listitem>
     <para>
      通常，扩展模块包含在 Apache 软件包中，但一般不静态编译到服务器中。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，它们以共享对象方式提供，在运行时装载到 Apache 中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部模块</term>
    <listitem>
     <para>
      标注为外部的模块不包含在正式 Apache 发行版中。不过，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了其中的几个模块。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>多处理模块 (MPM)</term>
    <listitem>
     <para>
      MPM 负责接受和处理对 Web 服务器的请求，代表 Web 服务器软件的核心。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 id="sec.apache2.modules.installing">
   <title>模块安装</title><indexterm> <primary>Apache</primary> <secondary>模块</secondary><tertiary>安装</tertiary> </indexterm>
   <para>
    如果如<xref linkend="sec.apache2.quickstart.installation"/>中所述执行了默认安装，则表示已安装以下模块：所有基本和扩展模块、多处理模块 Prefork MPM 以及外部模块 <systemitem>mod_php5</systemitem> 和 <systemitem>mod_python</systemitem>。
   </para>
   <para>
    您可以启动 YaST，然后选择<menuchoice><guimenu>软件</guimenu> <guimenu>软件管理</guimenu></menuchoice>，来安装其他外部模块。现在请选择<menuchoice><guimenu>过滤器</guimenu><guimenu>搜索</guimenu></menuchoice>并搜索 <emphasis>apache</emphasis>。在其他包中，结果列表将包含所有可用的外部 Apache 模块。
   </para>
  </sect2>

  <sect2 id="sec.apache2.modules.activating">
   <title>激活和停用</title>
   <para>
    手动或用 YaST 激活或停用特定模块。在 YaST 中，需要使用<xref linkend="sec.apache2.configuration.yast.wizard"/>中所述的模块配置启用或禁用脚本语言模块（PHP5、Perl 和 Python）。可以按<xref linkend="sec.apache2.configuration.yast.server_configuration.modules"/>中所述启用或禁用所有其他模块。
   </para>
   <para>
    如果要手动激活或停用模块，则分别使用命令 <command>a2enmod <replaceable>mod_foo</replaceable></command> 或 <command>a2dismod</command><replaceable>mod_foo</replaceable>。<command>a2enmod -l</command> 将输出当前所有活动模块的列表。
   </para>
   <important>
    <title>包含外部模块的配置文件</title>
    <para>
     如果已经手动激活外部模块，则确保在所有虚拟主机配置中装载其配置文件。外部模块的配置文件位于 <filename>/etc/apache2/conf.d/</filename> 下，并且在默认情况下不装载。如果每个虚拟主机上都需要相同的模块，则可以从此目录包含 <filename>*.conf</filename>。否则包含各个文件。请参见 <filename>/etc/apache2/vhost.d/vhost.template</filename> 获取示例。
    </para>
   </important>
  </sect2>

  <sect2 id="sec.apache2.modules.base_extension">
   <title>基础模块和扩展模块</title><indexterm> <primary>Apache</primary><secondary>模块</secondary><tertiary>可用</tertiary> </indexterm>
   <para>
    Apache 文档中对所有基础模块和扩展模块均进行了详细的描述。此处仅提供大多数重要模块的简短描述。请参见 <ulink url="http://httpd.apache.org/docs/2.2/mod/">http://httpd.apache.org/docs/2.2/mod/</ulink> 以了解有关每个模块的详细信息。
   </para>
   
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       请求某个特定 MIME 类型（如 <systemitem>application/pdf</systemitem>）、带特定扩展名的文件（如 <filename>.rpm</filename>）或某个特定请求方法（如 <systemitem>GET</systemitem>）时，提供执行脚本的方法。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       提供 <systemitem>Alias</systemitem> 和 <systemitem>Redirect</systemitem> 指令，可使用这些指令将 URl 映射到特定目录（<systemitem>别名</systemitem>）或将请求的 URL 重定向到其他位置。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       身份验证模块提供不同的身份验证方法：使用 <systemitem>mod_auth_basic</systemitem> 的基本身份验证或使用 <systemitem>mod_auth_digest</systemitem> 的摘要身份验证。Apache 2.2 中的摘要身份验证仍处于试验阶段。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> 和 <systemitem>mod_auth_digest</systemitem> 必须与身份验证提供程序模块 <systemitem>mod_authn_*</systemitem>（例如，用于基于文本文件的身份验证的 <systemitem>mod_authn_file</systemitem>），以及授权模块 <systemitem>mod_authz_*</systemitem>（例如，用于用户授权的 <systemitem>mod_authz_user</systemitem>）结合使用。
      </para>
      <para>
       有关该主题的更多信息可以从<citetitle>Authentication HOWTO</citetitle>中获取，网址是 <ulink url="http://httpd.apache.org/docs/2.2/howto/auth.html"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       当不存在索引文件（例如 <filename>index.html</filename>）时，Autoindex 将生成目录列表。这些索引的外观是可配置的。默认情况下启用此模块。但是，在默认情况下，目录列表将通过<systemitem>选项</systemitem>指令禁用，覆盖虚拟主机配置中的此设置。此模块的默认配置文件位于 <filename>/etc/apache2/mod_autoindex-defaults.conf</filename> 处。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       执行 CGI 脚本时需要有 <systemitem>mod_cgi</systemitem>。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       可使用此模块配置 Apache，使其在传递给定文件类型之前实时压缩这些文件类型。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_dir</systemitem> 提供 <systemitem>DirectoryIndex</systemitem> 指令，它可用来配置在请求目录时自动传递的文件（默认使用 <filename>index.html</filename>）。当目录请求不包含尾部斜线时，它还能自动重定向到正确的 URL。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       控制传递到 CGI 脚本或 SSI 页面的环境。环境变量可设置或取消设置，或者从调用 httpd 进程的外壳传递。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       使用 <systemitem>mod_expires</systemitem>，便可通过发送 <systemitem>Expires</systemitem> 报头来控制代理和浏览器缓存刷新文档的频率。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem> 允许您使用服务器端包含 (SSI)，它能提供动态生成 HTML 页面的基本功能。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       在 http://localhost/server-info/ 下提供服务器配置的完整概述。出于安全考虑，始终应该限制对此 URL 的访问。默认情况下，仅允许 <systemitem class="domainname">localhost</systemitem> 访问此 URL。<systemitem>mod_info</systemitem> 是在 <filename>/etc/apache2/mod_info.conf</filename> 中配置的。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       使用此模块可配置 Apache 日志文件的外观。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       mime 模块负责根据文件名的扩展名（例如适用于 HTML 文档的 <systemitem>text/html</systemitem>）传递具有正确 MIME 报头的文件。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       对于内容协商是必需的。请参见 <ulink url="http://httpd.apache.org/docs/2.2/content-negotiation.html">http://httpd.apache.org/docs/2.2/content-negotiation.html</ulink> 获取更多信息。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_nss</systemitem>
     </term>
     <listitem>
      <para>
       使用 Mozilla 网络安全服务库通过 TLS 1.1 和 TLS 1.2 协议在 Web 服务器与客户端之间启用加密连接。有关详细信息，请参见<xref linkend="sec.apache2.nss"/>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       提供 <systemitem>mod_alias</systemitem> 的功能，但功能更全且更为灵活。使用 <systemitem>mod_rewrite</systemitem>，便可根据多个规则、请求报头等来重定向 URL。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       基于客户端的请求细节（如客户端发送的浏览器字符串或客户端的 IP 地址）来设置环境变量。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_speling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_speling 尝试自动更正 URL 中的印刷错误，例如大小写错误。</systemitem>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       在 Web 服务器和客户端之间启用加密连接。有关详细信息，请参见<xref linkend="sec.apache2.ssl"/>。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       在 http://localhost/server-status/ 下提供有关服务器活动和性能的信息。出于安全考虑，始终应该限制对此 URL 的访问。默认情况下，仅允许 <systemitem class="domainname">localhost</systemitem> 访问此 URL。<systemitem>mod_status</systemitem> 是在 <filename>/etc/apache2/mod_status.conf</filename> 中配置的
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem> 允许您在不同的用户和组下运行 CGI 脚本。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       在 <filename>~<replaceable>user</replaceable>/</filename> 下启用可用的特定于用户的目录。必须在配置中指定 <systemitem>UserDir</systemitem> 指令。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.apache2.modules.mpm">
   <title>多处理模块</title><indexterm> <primary>Apache</primary><secondary>模块</secondary><tertiary>多处理</tertiary> </indexterm>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了两个不同的多处理模块 (MPM) 来结合 Apache 使用：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec.apache2.modules.mpm.prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec.apache2.modules.mpm.worker"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec.apache2.modules.mpm.prefork">
    <title>Prefork MPM</title>
    <para>
     prefork MPM 实现非线程的预生成 Web 服务器。它使 Web 服务器在行为上类似于 Apache 版本 1.x。在该版本中，它隔离每个请求并通过派生单独的子进程来处理请求。这样，有问题的请求就不会影响其他请求，避免了 Web 服务器被锁定。
    </para>
    <para>
     此基于进程的方法 prefork MPM 虽然提供了稳定性，但比相应的 worker MPM 消耗更多的系统资源。prefork MPM 被视为是基于 Unix 操作系统的默认 MPM。
    </para>
    <important>
     <title>本文档中的 MPM</title>
     <para>
      本文档假设 Apache 使用 prefork MPM。
     </para>
    </important>
   </sect3>
   <sect3 id="sec.apache2.modules.mpm.worker">
    <title>Worker MPM</title>
    <para>
     worker MPM 提供一种多线程 Web 服务器。线程是一种<quote>更小</quote>的进程。线程相对于进程的优点是它占用较少的资源。worker MPM 并非仅生成子进程，还通过在服务器进程中使用线程来处理请求。预派生的子进程是多线程的。此方法相比 prefork MPM，使 Apache 消耗更少的系统资源，从而提高了 Apache 的执行效率。
    </para>
    <para>
     一个主要缺点是 worker MPM 的稳定性：如果一个线程损坏，进程的所有线程都会受影响。最严重的情况会导致服务器崩溃。特别是在负载很重的情况下，如果将通用网关接口 (CGI) 与 Apache 一起使用，则可能由于线程无法与系统资源通信而发生内部服务器错误。将 worker MPM 与 Apache 一起使用的另一个争议是并非所有可用的 Apache 模块都是线程安全的，因此它不能与 worker MPM 结合使用。
    </para>
    <warning>
     <title>将 PHP 模块与 MPM 一起使用</title>
     <para>
      并非所有可用的 PHP 模块都是线程安全的。强烈建议不要将 worker MPM 与 <systemitem>mod_php</systemitem> 一起使用。
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 id="sec.apache2.modules.external">
   <title>外部模块</title><indexterm> <primary>Apache</primary><secondary>模块</secondary><tertiary>外部</tertiary> </indexterm>
   <para>
    此处提供了 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 随附的所有外部模块的列表。
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       为 Apache 提供额外支持，以便对由 <systemitem>mod_php5</systemitem> 和 <systemitem>mod_perl</systemitem> 等模块处理的各个 CGI 脚本设置 AppArmor 限制。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_apparmor</systemitem> </member> <member> 更多信息：<xref linkend="part.aaa"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_auth_kerb</systemitem> 提供访问 Apache Web 服务器的 Kerberos 身份验证。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_auth_kerb</systemitem> </member> <member>更多信息：<ulink url="http://modauthkerb.sourceforge.net/configure.html"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       使用 <systemitem>mod_mono</systemitem> 允许您在服务器中运行 ASP.NET 页。
      </para>
      <simplelist>
       <member>包名：<systemitem>apache-mod_mono</systemitem> </member> <member>配置文件：<filename>/etc/apache2/conf.d/mod_mono.conf</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_perl</systemitem> 使您能够在嵌入的解释器中运行 Perl 脚本。服务器中嵌入的持久解释器能够避免启动外部解释器并且不会损失 Perl 启动时间。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_perl</systemitem> </member> <member> 配置文件：<filename>/etc/apache2/conf.d/mod_perl.conf</filename> </member> <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_perl</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHP 是一种服务器端、跨平台 HTML 嵌入式脚本编写语言。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_php5</systemitem> </member> <member> 配置文件：<filename>/etc/apache2/conf.d/php5.conf</filename> </member> <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_php5</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> 允许将 Python 嵌入到 Apache HTTP 服务器中以增强性能并使基于 Web 的应用程序的设计更为灵活。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_python</systemitem> </member> <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_python</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> 提供用于保护 Web 应用程序免受一系列攻击的 Web 应用程序防火墙。它可以实现对 HTTP 流量的监控和实时分析。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_security2</systemitem> </member> <member> 配置文件：<filename>/etc/apache2/conf.d/mod_security2.conf</filename> </member> <member>更多信息：<filename>/usr/share/doc/packages/apache2-mod_security2</filename></member><member>文档：<ulink url="http://modsecurity.org/documentation/"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec.apache2.modules.building_modules">
   <title>编译</title><indexterm> <primary>Apache</primary><secondary>模块</secondary><tertiary>构建</tertiary> </indexterm>
   <para>
    高级用户可以通过编写自定义模块来扩展 Apache。要开发 Apache 模块或编译第三方模块，就需要 <systemitem>apache2-devel</systemitem> 包以及相应的开发工具。<systemitem>apache2-devel</systemitem> 还包含 <command>apxs2</command> 工具，此工具是编译其他 Apache 模块所必需的。
   </para>
   <para>
    <command>apxs2</command> 允许从源代码编译和安装模块（包括对配置文件进行必要的更改），这将创建可在运行时装载入 Apache 的<emphasis>动态共享对象</emphasis> (DSO)。
   </para>
   <para>
    <command>apxs2</command> 二进制文件在 <filename>/usr/sbin</filename> 中：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename> — 适合用来构建可搭配任何 MPM 使用的扩展模块。安装位置为 <filename>/usr/lib/apache2</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename> — 适用于 prefork MPM 模块。安装位置为 <filename>/usr/lib/apache2-prefork</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename> — 适用于 worker MPM 模块。安装位置为 <filename>/usr/lib/apache2-worker</filename>。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    使用以下命令从源代码安装并激活模块：
   </para>
<screen>cd /path/to/module/source; apxs2 -cia
    <replaceable>mod_foo</replaceable>.c</screen>
   <para>
    其中，<option>-c</option> 编译该模块，<option>-i</option> 安装该模块，<option>-a</option> 激活该模块。<command>apxs2</command> 的其他选项在 <systemitem>apxs2(1)</systemitem> 手册页中有描述。
   </para><indexterm class="endofrange" startref="idx.apache2.modules"/>
  </sect2>
 </sect1>
 <sect1 id="sec.apache2.cgi">
  <title>使 CGI 脚本运行</title><indexterm> <primary>Apache</primary><secondary>CGI 脚本</secondary> </indexterm>

  <para>
   Apache 的通用网关接口 (CGI) 允许您使用程序或脚本（通常指 CGI 脚本）创建动态内容。可以用任何编程语言来编写 CGI 脚本。通常使用诸如 Perl 或 PHP 之类的脚本语言。
  </para>

  <para>
   为了使 Apache 能够递送由 CGI 脚本创建的内容，需要激活 <systemitem>mod_cgi</systemitem>。另外还需要 <systemitem>mod_alias</systemitem>。默认情况下启用这两种模块。请参见<xref linkend="sec.apache2.modules.activating"/>来获取有关激活模块的详细信息。
  </para>

  <warning>
   <title>CGI 安全性</title>
   <para>
    允许服务器执行 CGI 脚本是一项潜在的安全性漏洞。请参见<xref linkend="sec.apache2.security"/>以了解更多信息。
   </para>
  </warning>

  <sect2 id="sec.apache2.cgi.configuration">
   <title>Apache 配置</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，仅允许在目录 <filename>/srv/www/cgi-bin/</filename> 中执行 CGI 脚本。已配置此位置来执行 CGI 脚本。如果已经创建了虚拟主机配置（请参见<xref linkend="sec.apache2.configuration.manually.vhost"/>）并且想将脚本放置在特定于主机的目录中，必须解锁并配置此目录。
   </para>
   <example id="ex.apache2.cgi.configuration">
    <title>VirtualHost CGI 配置</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co id="co.apache2.cgi.script_alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co id="co.apache2.cgi.options"/>
 AddHandler cgi-script .cgi .pl<co id="co.apache2.cgi.handler"/>
 Order allow,deny<co id="co.apache2.cgi.order"/>
 Allow from all
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co.apache2.cgi.script_alias">
      <para>
       指示 Apache 在此目录中将所有文件作为 CGI 脚本处理。
      </para>
     </callout>
     <callout arearefs="co.apache2.cgi.options">
      <para>
       启用 CGI 脚本执行
      </para>
     </callout>
     <callout arearefs="co.apache2.cgi.handler">
      <para>
       指示服务器将扩展名为 .pl 和 .cgi 的文件视为 CGI 脚本。根据需要进行调整。
      </para>
     </callout>
     <callout arearefs="co.apache2.cgi.order">
      <para>
       <systemitem>Order</systemitem> 和 <systemitem>Allow</systemitem> 指令将控制默认访问状态以及 Allow 和 Deny 指令的评估顺序。在这种情况下，<quote>allow</quote>语句将在<quote>deny</quote>语句之前评估，并且启用通用访问。
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 id="sec.apache2.cgi.example_script">
   <title>运行示例脚本</title>
   <para>
    CGI 编程不同于“常规”编程，因为 CGI 程序和脚本前面必须有一个 MIME 类型的报头，例如 <literal>Content-type: text/html</literal>。此报头将发送到客户端，所以它知道所接收内容的类型。其次，脚本的输出必须是客户端（通常是 Web 浏览器）所知道的，比如 HTML（大多数情况）、纯文本或图像。
   </para>
   <para>
    在 <filename>/usr/share/doc/packages/apache2/test-cgi</filename> 下提供的简单测试脚本是 Apache 包的一部分。它将某些环境变量的内容输出为纯文本。将此脚本复制到 <filename>/srv/www/cgi-bin/</filename> 或您虚拟主机的脚本目录 (<filename>/srv/www/www.example.com/cgi-bin/</filename>) 中，并将它命名为 <filename>test.cgi</filename>。
   </para>
   <para>
    可通过 Web 服务器访问的文件应由用户 <systemitem class="username">root</systemitem> 拥有。有关更多信息，请参见<xref linkend="sec.apache2.security"/>。由于该 Web 服务器是由不同用户运行的，所以 CGI 脚本必须可被世界各地的用户执行和读取。更改为 CGI 目录并使用命令 <command>chmod 755 test.cgi</command> 来应用正确的权限。
   </para>
   <para>
    现在调用 <literal>http://localhost/cgi-bin/test.cgi</literal> 或 <literal>http://www.example.com/cgi-bin/test.cgi</literal>。应该能看到 <quote>CGI/1.0 测试脚本报告</quote>。
   </para>
  </sect2>

  <sect2 id="sec.apache2.cgi.troubleshooting">
   <title>CGI 查错</title>
   <para>
    如果没有看到测试程序的输出而是看到了错误消息，则请检查以下项：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI 查错</title>
    <listitem>
     <para>
      是否在更改配置后重装载了服务器？请检查 <command>rcapache2 probe</command>。
     </para>
    </listitem>
    <listitem>
     <para>
      如果已经配置了自定义 CGI 目录，那么该配置是否正确？如果不确定，请尝试默认 CGI 目录 <filename>/srv/www/cgi-bin/</filename> 中的脚本并用 <literal>http://localhost/cgi-bin/test.cgi</literal> 调用它。
     </para>
    </listitem>
    <listitem>
     <para>
      文件权限是否正确？更改为 CGI 目录并执行 <command>ls -l test.cgi</command>。它的输出应该以下面的字符串开头
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      确保脚本中没有编程错误。如果还未更改 <filename>test.cgi</filename>，则问题应该不大，但是如果正在使用您自己的程序，则始终要确保它们没有编程错误。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 id="sec.apache2.ssl">
  <title>使用 SSL 设置安全性 Web 服务器</title><indexterm class="startofrange" id="idx.apache2.ssl"> <primary>Apache</primary><secondary>SSL</secondary> </indexterm>

  <para>
   只要在 Web 服务器和客户端之间传送敏感数据（如信用卡信息），就需要具有带身份验证的安全的加密连接。<systemitem>mod_ssl</systemitem> 使用安全套接字层（SSL）和传输层安全（TLS）协议来为客户端和 Web 服务器之间的 HTTP 通信提供强有力的加密机制。使用 SSL/TSL 时，将在 Web 服务器和客户端之间建立专用连接。能够确保数据完整性，并且客户端和服务器能够彼此验证。
  </para>
  
  <para>
   基于此目的，服务器在回答对 URL 的任何请求之前，会发送一个 SSL 证书，其中包含证明服务器有效身份的信息。反过来，这保证了该服务器对于通信来说是唯一正确的终端。此外，证书使得在客户端和服务器之间建立起加密连接，确保在不泄露敏感的明文内容的情况下传输信息。
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> 不实施 SSL/TSL 协议本身，而是充当 Apache 和 SSL 库之间的接口。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，将使用 OpenSSL 库。OpenSSL 将自动随 Apache 安装。
  </para>
  <note>
   <title>高于 TLS 1.0 的 TLS 版本</title>
   <para>
    openssl 库支持的最高 TLS 版本为 1.0，不支持较新的 TLS 1.1 或 1.2 等版本。<systemitem>apache2-mod_nss</systemitem> 包中的 <systemitem>mod_nss</systemitem> 会使用 Mozilla 网络安全服务库提供 TLS 1.1 和 1.2。有关详细信息，请参见<xref linkend="sec.apache2.nss"/>。
   </para>
  </note>
  <para>
   将 <systemitem>mod_ssl</systemitem> 与 Apache 一起使用的最明显效果就是 URL 的前缀为 <literal>https://</literal>（而不是 <literal>http://</literal>）。
  </para>

  <tip>
   <title>示例证书</title>
   <para>
    安装包 <systemitem class="resource">apache2-example-certificates</systemitem> 时将提供一个假定公司<quote>Snake Oil</quote>的示例证书。
   </para>
  </tip>

  <sect2 id="sec.apache2.ssl.certificate">
   <title>创建 SSL 证书</title><indexterm> <primary>Apache</primary><secondary>SSL</secondary><tertiary>创建 SSL 证书</tertiary> </indexterm>
   <para>
    为了将 SSL/TSL 与 Web 服务器一起使用，需要创建 SSL 证书。在 Web 服务器和客户端之间授权时需要此证书，以便每一方都能明确地识别另一方。为了确保证书的完整性，证书必须由所有用户都信任的一方签署。
   </para>
   <para>
    您可创建三种类型的证书：<quote>虚设</quote>证书（仅用于测试）、自我签名证书（用于信任您的指定用户群）和由独立的、众所周知的证书颁发机构 (CA) 签署的证书。
   </para>
   <para>
    创建证书一般分为两步。首先，生成证书颁发机构的私用密钥，然后使用此密钥签署服务器证书。
   </para>
   <tip>
    <title>更多信息</title>
    <para>
     要想更多地了解 SSL/TSL 的概念和定义，请参见 <ulink url="http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.2/ssl/ssl_intro.html</ulink>。
    </para>
   </tip>
   <sect3 id="sec.apache2.ssl.certificate.dummy">
    <title>创建<quote>虚拟</quote>证书</title>
    <para>
     虚设证书的生成非常简单。只需调用脚本 <command>/usr/bin/gensslcert</command> 即可。它创建或重写下列文件。利用 <command>gensslcert</command> 的可选开关调整证书。调用 <command>/usr/bin/gensslcert <option>-h</option></command> 了解更多信息。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/root/.mkcert.cfg</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     还会将 <filename>ca.crt</filename> 的副本放在 <filename>/srv/www/htdocs/CA.crt</filename> 下以供下载。
    </para>
    <important>
     <title>仅供测试</title>
     <para>
      不能在生产系统上使用虚设证书。它只能用来测试。
     </para>
    </important>
   </sect3>
   <sect3 id="sec.apache2.ssl.certificate.custom">
    <title>创建自签署证书</title>
    <para>
     如果要为内部网或指定用户群设置安全的 Web 服务器，只需通过您自己的证书颁发机构 (CA) 来签署证书即可。
    </para>
    <para>
     创建自签署证书由 9 个交互的步骤组成。更改为目录 <filename>/usr/share/doc/packages/apache2</filename>，然后运行以下命令：<command>./mkcert.sh make <option>--no-print-directory /usr/bin/openssl /usr/sbin/ custom</option></command>。请勿从此目录外运行该命令。程序将提供一系列的提示，其中一部分需要用户输入。
    </para>
    <procedure id="pro.apache2.ssl.certificate.custom">
     <title>使用 <command>mkcert.sh</command> 创建自签署的证书</title>
     <step performance="required">
      <para>
       <literal>决定用于证书的签名算法 </literal>
      </para>
      <para>
       选择 RSA（<keycap>R</keycap>，默认值），因为一些旧的浏览器在使用 DSA 时存在问题。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>生成 CA 的 RSA 私用密钥（1024 位）</literal>
      </para>
      <para>
       不需要交互。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>生成 CA 的 X.509 证书签署请求</literal>
      </para>
      <para>
       在此处创建 CA 的判别名。这要求您回答几个问题，例如国家/地区名称或组织名称。输入有效数据，因为在此处输入的内容稍后会显示在证书中。无需回答所有问题。如果有问题不适用于您或者您不想回答，请使用<quote>.</quote>. 常用名就是 CA，请选择一个重要的名称，例如<replaceable>我的公司</replaceable> CA。
      </para>
      <important>
       <title>CA 的常用名</title>
       <para>
        CA 的常用名必须不同于服务器的常用名，因此请勿在此步骤中选择完全限定的主机名。
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>为自签署的 CA 生成 X.509 证书</literal>
      </para>
      <para>
       选择证书版本 <keycap>3</keycap>（默认值）。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>生成 SERVER 的 RSA 私用密钥（1024 位）</literal>
      </para>
      <para>
       不需要交互。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>生成 SERVER 的 X.509 证书签署请求</literal>
      </para>
      <para>
       为此处的服务器密钥创建判别名。问题与 CA 判别名的问题几乎相同。在此处输入的数据适用于 Web 服务器，而且可以与 CA 的数据不同。（例如，如果服务器在其他地方）
      </para>
      <important>
       <title>选择常用名</title>
       <para>
        在此处输入的常用名必须是安全服务器的全限定主机名（例如，www.example.com）。否则，在访问 Web 服务器时，浏览器将发出一条警告，指示在证书与服务器不匹配。
       </para>
      </important>
     </step>
     <step performance="required">
      <para>
       <literal>生成由 CA 签署的 X.509 证书</literal>
      </para>
      <para>
       选择证书版本 <keycap>3</keycap>（默认值）。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>使用通行口令加密 CA 的 RSA 私用密钥以确保安全性</literal>
      </para>
      <para>
       强烈建议使用口令加密 CA 的私用密钥，所以请选择 <keycap>Y</keycap> 并输入一个口令。
      </para>
     </step>
     <step performance="required">
      <para>
       <literal>使用通行口令加密服务器的 RSA 私用密钥以确保安全性</literal>
      </para>
      <para>
       使用口令加密服务器密钥要求您在每次启动 Web 服务器时输入此口令。这对于在引导时自动启动服务器或重启动 Web 服务器有点困难。因此，通常在回答此问题时选择 <keycap>N</keycap>。要了解在没有使用口令加密时您的密钥是不受保护的，并且保证只有授权个人才有权访问此密钥。
      </para>
      <important>
       <title>加密服务器密钥</title>
       <para>
        如果选择使用口令加密服务器密钥，则请在 <filename>/etc/sysconfig/apache2</filename> 中增加 <systemitem>APACHE_TIMEOUT</systemitem> 的值。否则，在启动之前您没有足够的时间输入通行口令，这样服务器将无法停止。
       </para>
      </important>
     </step>
    </procedure>
    <para>
     脚本结果页面上将出现一个储存它已经生成的证书和密钥的列表。与脚本输出结果不同的是，文件没有在本地目录  <filename>conf</filename> 中生成，而是在 <filename>/etc/apache2/</filename> 下的适当位置处生成。
    </para>
    <para>
     最后一步就是将 CA 证书文件从 <filename>/etc/apache2/ssl.crt/ca.crt</filename> 复制到用户可以访问的位置，从而将它合并到 Web 浏览器中已知、可信的 CA 的列表中。否则，浏览器将指示证书是由未知授权者发出的。证书的有效期为 1 年。
    </para>
    <important>
     <title>自我签名证书</title>
     <para>
      仅在 Web 服务器上使用自签署证书，此证书必须可由知道并相信您是证书授权者的人员访问。例如，不建议在公共商店使用此类证书。
     </para>
    </important>
   </sect3>
   <sect3 id="sec.apache2.ssl.certificate.official">
    <title>获取正式签署的证书</title>
    <para>
     签署证书的正式证书颁发机构有很多。证书是由值得信任的第三方签署的，所以可以完全相信。公共操作安全 Web 服务器通常具有正式签署的证书。
    </para>
    <para>
     最常见的正式 CA 是 Thawte (<ulink url="http://www.thawte.com/"/>) 或 Verisign (<ulink url="http://www.verisign.com"/>)。这些 CA 以及其他 CA 已合并到所有浏览器中，所以由这些证书颁发机构签署的证书将被浏览器自动接受。
    </para>
    <para>
     请求正式签署的证书时，无需向 CA 发送证书。相反，请发出证书签署请求 (CSR)。要创建 CSR，请调用脚本 <command>/usr/share/ssl/misc/CA.sh -newreq</command>。
    </para>
    <para>
     首先，脚本将询问加密 CSR 的口令。然后，会要求您输入判别名。这要求您回答几个问题，例如国家/地区名称或组织名称。输入有效的数据，在此处输入的所有内容稍后都会显示在证书中并检查。无需回答所有问题。如果有问题不适用于您或者您不想回答，请使用<quote>.</quote>. 常用名就是 CA，请选择一个重要的名称，例如<replaceable>我的公司</replaceable> CA。最后，必须输入询问口令和备用的公司名称。
    </para>
    <para>
     在调用脚本的目录中查找 CSR。文件名是 <filename>newreq.pem</filename>。
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec.apache2.ssl.configuration">
   <title>使用 SSL 配置 Apache</title><indexterm> <primary>Apache</primary><secondary>SSL</secondary><tertiary>使用 SSL 配置 Apache</tertiary> </indexterm>
   <para>
    Web 服务器端的 SSL 和 TLS 请求的默认端口是 443。在端口 80 上的<quote>普通</quote> Apache 侦听和端口 443 上支持 SSL/TLS 的 Apache 侦听之间没有冲突。事实上，HTTP 和 HTTPS 可以使用相同的 Apache 实例运行。通常使用一个虚拟主机将请求发送到端口 80 和端口 443 以区分虚拟服务器。
   </para>
   <important>
    <title>防火墙配置</title>
    <para>
     记住在端口 443 上为支持 SSL 的 Apache 打开防火墙。可以按<xref linkend="sec.fire.SuSE.yast"/>中的描述使用 YaST 来完成此操作。
    </para>
   </important>
   <para>
    在全局服务器配置中，SSL 模块默认情况下处于启用状态。如果它在您的主机上已禁用，请使用以下命令激活它：<command>a2enmod ssl</command>。要最终启用 SSL，需要使用标志<quote>SSL</quote>启动服务器。要执行此操作，请调用 <command>a2enflag SSL</command>。如果打算使用口令加密服务器证书，则还应增加 <filename>/etc/sysconfig/apache2</filename> 中 <systemitem>APACHE_TIMEOUT</systemitem> 的值，这样在 Apache 启动时，您就有足够的时间输入通行口令。重启动服务器可使这些更改生效。仅重装载是不够的。
   </para>
   <para>
    虚拟主机配置目录中包含模板 <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>，该模板带有详细记录的特定于 SSL 的指令。请参见<xref linkend="sec.apache2.configuration.manually.vhost"/>了解通用虚拟主机配置。
   </para>
   <para>
    要开始操作，请将模板复制到 <filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename> 并对其进行编辑。调整以下指令的值应该就足够了：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 id="sec.apache2.ssl.configuration.name-based">
    <title>基于名称的虚拟主机和 SSL</title>
    <para>
     默认情况下，不能在仅具有一个 IP 地址的服务器上运行多个启用了 SSL 的虚拟主机。基于名称的虚拟主机要求 Apache 了解已请求了哪些服务器名称。SSL 连接问题在于，此类请求只能在已建立 SSL 连接之后读取（通过使用默认虚拟主机）。因此用户将收到警告消息，指示证书与服务器名称不匹配。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了一个 SSL 协议扩展：服务器名称指示 (SNI)。该协议会在 SSL 协商过程中发送虚拟域的名称，从而解决了这一问题。这样服务器就能提前<quote>切换</quote>到正确的虚拟域，并向浏览器显示正确的证书。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上默认会启用 SNI。为了使基于名称的虚拟主机能够使用 SSL，可如<xref linkend="sec.apache2.configuration.manually.vhost.named_vhosts"/>中所述配置服务器（请注意，需要将端口 <literal>443</literal> 而不是端口 <literal>80</literal> 用于 SSL）。
    </para>
    <important>
     <title>SNI 浏览器支持</title>
     <para>
      客户端也必须支持 SNI。尽管大多数浏览器都支持 SNI，但一些用于移动硬件的浏览器以及 Windows* XP 上的 Internet Explorer 和 Safari 仍缺少 SNI 支持。有关详细信息，请参见<ulink url="http://en.wikipedia.org/wiki/Server_Name_Indication"/>。
     </para>
     <para>
      使用指令 <systemitem>SSLStrictSNIVHostCheck</systemitem> 配置如何处理不支持 SNI 的浏览器。在服务器配置中设置为 <literal>on</literal> 时，所有虚拟主机都将拒绝不支持 SNI 的浏览器。在 <systemitem>VirtualHost</systemitem> 指令中设置为 <literal>on</literal> 时，对此特定主机的访问将被拒。
     </para>
     <para>
      在服务器配置中设置为 <literal>off</literal> 时，服务器的行为类似于不支持 SNI。SSL 请求将由定义的<emphasis>第一个</emphasis>虚拟主机（端口 443）处理。
     </para>
    </important><indexterm class="endofrange" startref="idx.apache2.ssl"/>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.apache2.nss">
  <title>使用 NSS 设置安全 Web 服务器</title>
  <indexterm class="startofrange" id="idx.apache2.nss"> <primary>Apache</primary> <secondary>NSS</secondary> </indexterm>
  <para>
   <systemitem>mod_nss</systemitem> 模块使用传输层安全 (TLS) 协议 1.1 和 1.2 版本提供强加密，使用 <systemitem>mod_ssl</systemitem> 提供的 Apache 时则无法应用这两个协议版本。
  </para>
  <para>
   <systemitem>apache2</systemitem> 包中的 SSL/TLS 支持一般由 apache 模块 <systemitem>mod_ssl</systemitem> 提供，它使用 openssl 加密库来提供 SSL/TLS。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> 中使用的 openssl 库版本只支持 TLS 1.0 版。要提供 TLS 1.1 和 1.2 支持，只能使用与 SLE <phrase role="productname"><phrase os="sles;sled;slerte">11 SP4</phrase></phrase> 中的众多包不兼容的版本。另一种方法是使用 <systemitem>mozilla-nss</systemitem> 包所提供的 Mozilla 网络安全服务库。
  </para>
  <note>
   <title>SSLv2 支持</title>
   <para>
    <systemitem>mod_nss</systemitem> 不支持 SSLv2。如果您要求应用 SSLv2 协议，则需要使用 <systemitem>mod_ssl</systemitem>。
   </para>
  </note>
  <para>
   <systemitem>mod_ssl</systemitem> 和 <systemitem>mod_nss</systemitem> 可以同时初始化，但它们的协议处理程序（对于 <systemitem>mod_ssl</systemitem>，处理程序为 <literal>SSLEngine on</literal>，对于 <systemitem>mod_nss</systemitem> 为 <literal>NSSEngine on</literal>）无法在全局范围或者存在 <systemitem>VirtualHost</systemitem> 配置指令块的情况下同时运行。
  </para>
  <para>
   如果仅有一个 <systemitem>VirtualHost</systemitem> 部分的指令 <literal>NSSEngine</literal> 设置为 <literal>on</literal>，则它将优先于 Apache 侦听的一个端口的所有其他 <systemitem>VirtualHost</systemitem> 声明（可能在其环境中将 <literal>SSLEngine</literal> 设置为 <literal>on</literal>）。不可以在同一个 IP 地址和端口上同时针对不同的 VirtualHost 运行两个模块。如果您需要同时使用 <systemitem>mod_nss</systemitem> 和 <systemitem>mod_ssl</systemitem> 来支持加密连接，应该考虑使用多个 IP 地址，并且将服务器的加密模块配置为与其 IP 地址绑定。如果不需要同时使用两个密码模块，则建议您决定启用其中一个，而将另一个停用。
  </para>
  <para>
   由于 <systemitem>mmod_nss</systemitem> 对于服务器、CA 证书和私用密钥使用数据库格式，因此需要将基于 mod_ssl 的现有证书进行转换，以便用于 <systemitem>mmod_nss</systemitem>。<systemitem>apache2-mod_nss</systemitem> 包中包含用于执行此任务的 perl 脚本 <filename>/usr/sbin/mod_nss_migrate.pl</filename>。该脚本会新建数据库。
  </para>
  <para>
   要列出 NSS 数据库中所含的证书，请使用以下命令：
  </para>
  <screen>certutil -d /etc/apache2/mod_nss.d -L</screen>
  <para>
   有关 <command>certutil</command> NSS 数据库管理实用程序的详细信息，请使用 <command>certutil --help</command>。
  </para>
  <para>
   <systemitem>mod_nss</systemitem> 包自带的默认配置文件是 <filename>/etc/apache2/conf.d/mod_nss.conf</filename>。有关详细信息，请查看文件中的注释。
  </para>
  <indexterm class="endofrange" startref="idx.apache2.ssl"/>
 </sect1>
 <sect1 id="sec.apache2.security">
  <title>避免安全性问题</title><indexterm> <primary>Apache</primary><secondary>安全性</secondary> </indexterm>
  <para>
   对公共因特网开放的 Web 服务器需要不断加强管理。对于软件和意外的错误配置，安全问题似乎都是不可避免的。有关如何处理这些问题，在此有一些提示。
  </para>

  <sect2 id="sec.apache2.security.up-to-date">
   <title>最新软件</title>
   <para>
    在 Apache 软件中发现漏洞时，SUSE 将会发出安全忠告。其中包含修复漏洞的描述，用户应该尽快地依次采纳这些描述。SUSE 安全性声明可以从以下位置处获取：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>网页</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/securitysupport.html"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>邮件列表存档</title>
      <para>
       <ulink url="http://lists.opensuse.org/opensuse-security-announce/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>RSS 递送</title>
      <para>
       <ulink url="http://www.novell.com/linux/security/suse_security.xml"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec.apache2.security.permissions">
   <title>DocumentRoot 权限</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，默认情况下，<systemitem>DocumentRoot</systemitem> 目录 (<filename>/srv/www/htdocs</filename>) 和 CGI 目录 (<filename>/srv/www/cgi-bin</filename>) 的所有权属于 <systemitem>root</systemitem> 用户和组。您不能更改这些权限。如果任何用户都可写入这些目录，则任何用户都可以将文件放入这些目录中。之后，具有 <systemitem>wwwrun</systemitem> 权限（该权限允许用户随意访问文件系统资源）的 Apache 可能会执行这些文件。使用 <filename>/srv/www</filename> 的子目录可存放虚拟主机的 <systemitem>DocumentRoot</systemitem> 和 CGI 指令，并确保目录和文件属于用户和组 <systemitem class="username">root</systemitem>。
   </para>
  </sect2>

  <sect2 id="sec.apache2.security.filesystem">
   <title>文件系统访问权</title>
   <para>
    默认情况下，在 <filename>/etc/apache2/httpd.conf</filename> 中拒绝对整个文件系统的访问。不应该重写这些指令，而是要明确启用对 Apache 可读的所有目录的访问权。有关详细信息，请参见 <xref linkend="sec.apache2.configuration.manually.vhost.basic_configuration"/>. 如此操作后，请确保任何重要文件（例如口令或系统配置文件）均不能从外部读取。
   </para>
  </sect2>

  <sect2 id="sec.apache2.security.cgi">
   <title>CGI 脚本</title>
   <para>
    Perl、PHP、SSI 或任何其他编程语言中的交互脚本基本上可以运行任意命令，因此存在通常的安全性问题。从服务器执行的脚本只能从服务器管理员信任的源安装，允许用户运行他们拥有的所有脚本通常不是好的做法。还建议对所有脚本执行安全性审计。
   </para>
   <para>
    为了尽可能简化脚本的管理，通常会将 CGI 脚本的执行限制于特定目录而不是全局使用它们。指令 <systemitem>ScriptAlias</systemitem> 和 <systemitem>Option ExecCGI</systemitem> 用于配置。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的默认配置不允许随处执行 CGI 脚本。
   </para>
   <para>
    所有 CGI 脚本都会作为同一个用户运行，所以不同的脚本可能会彼此冲突。模块 suEXEC 允许您在不同的用户和组下运行 CGI 脚本。
   </para>
  </sect2>

  <sect2 id="sec.apache2.security.users">
   <title>用户目录</title>
   <para>
    启用用户目录（使用 <systemitem>mod_userdir</systemitem> 或 <systemitem>mod_rewrite</systemitem>）时，一定不要使用 <filename>.htaccess</filename> 文件，这些文件允许用户重写安全设置。至少应该使用指令 <systemitem>AllowOverRide</systemitem> 来限制用户的注册。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<filename>.htaccess</filename> 文件默认处于启用状态，但用户在使用 <systemitem>mod_userdir</systemitem>（请参见 <systemitem>/etc/apache2/mod_userdir.conf</systemitem> 配置文件）时不允许覆盖任何 <filename>Option</filename> 指令。
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.apache2.troubleeshooting">
  <title>查错</title><indexterm> <primary>Apache</primary><secondary>查错</secondary> </indexterm>

  <para>
   如果 Apache 不启动、网页不可访问或用户无法连接到 Web 服务器，那么找出问题的原因是很重要的。下面是几处查找错误描述的常见位置和需要检查的重要事项：
  </para>

  <variablelist>
   <varlistentry>
    <term><command>rcapache2</command> 的输出
    </term>
    <listitem>
     <para>
      不要使用二进制文件 <filename>/usr/sbin/httpd2</filename> 启动和停止 Web 服务器，而应使用 <command>rcapache2</command> 脚本（如<xref linkend="sec.apache2.start_stop"/>中所述）。它详细描述了错误，甚至还提供解决配置错误的提示。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>日志文件和详细程度</term>
    <listitem>
     <para>
      不管是致命错误还是非致命错误，都请检查 Apache 日志文件了解原因，主要是默认位于 <filename>/var/log/apache2/error_log</filename> 的错误日志文件。此外，如果需要日志文件记录得更详细一些，可以使用 <systemitem>LogLevel</systemitem> 指令来控制所记录消息的详细程度。
     </para>
     <tip>
      <title>简单测试</title>
      <para>
       使用命令 <command>tail -F /var/log/apache2/<replaceable>my_error_log</replaceable></command> 查看 Apache 日志消息。然后运行 <command>rcapache2 restart</command>。现在，请尝试连接浏览器并检查输出。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>防火墙和端口</term>
    <listitem>
     <para>
      常见错误之一是在服务器的防火墙配置中未打开针对 Apache 的端口。如果使用 YaST 配置 Apache，有一个单独的选项用于这个具体问题（请参见 <xref linkend="sec.apache2.configuration.yast"/>）。如果正在手工配置 Apache，则请通过 YaST 的防火墙模块打开 HTTP 和 HTTPS 的防火墙端口。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   如果借助于以上所有信息仍无法找到错误原因，请检查 <ulink url="http://httpd.apache.org/bug_report.html"/> 的联机 Apache 错误数据库。此外，可以通过 <ulink url="http://httpd.apache.org/userslist.html"/> 上的邮件列表联系 Apache 用户社区。建议使用的新闻组是 <ulink url="comp.infosystems.www.servers.unix"/>。
  </para>
 </sect1>
 <sect1 id="sec.apache2.more_information">
  <title>更多信息</title>

  <para>
   包 <systemitem>apache2-doc</systemitem> 中包含有关本地安装和参考的多种本地化版本的完整 Apache 手册。它在默认情况下是不安装的，最快的安装方法是使用命令 <command>zypper in apache2-doc</command>。一旦安装，Apache 手册便可从 <ulink url="http://localhost/manual/"/> 获取。还可在 Web 上的 <ulink url="http://httpd.apache.org/docs-2.2/"/> 访问它。特定于 SUSE 的配置提示可以在目录 <filename>/usr/share/doc/packages/apache2/README.*</filename> 中获得。
  </para>

  <sect2 id="sec.apache2.more_information.apache22">
   <title>Apache 2.2</title>
   <para>
    有关 Apache 2.2 中新功能的列表，请参见 <ulink url="http://httpd.apache.org/docs/2.2/new_features_2_2.html"/>。可以在 <ulink url="http://httpd.apache.org/docs-2.2/upgrading.html"/> 获得有关从版本 2.0 升级到 2.2 的信息。
   </para>
  </sect2>

  <sect2 id="sec.apache2.more_information.modules">
   <title>Apache 模块</title>
   <para>
    有关<xref linkend="sec.apache2.modules.external"/>中简述的外部 Apache 模块的更多信息，可在以下位置找到：
   </para>
   <variablelist>
    <varlistentry>
     <term>mod-apparmor</term>
     <listitem>
      <para>
       <ulink url="http://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mod-auth_kerb</term>
     <listitem>
      <para>
       <ulink url="http://modauthkerb.sourceforge.net/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mono</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.mono-project.com/Mod_mono"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://perl.apache.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <ulink url="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </sect2>

  <sect2 id="sec.apache2.more_information.cgi">
   <title>开发</title>
   <para>
    有关开发 Apache 模块和涉及 Apache Web 服务器项目的更多信息，可以从以下位置处获得：
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache 开发人员信息</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache 开发人员文档</term>
     <listitem>
      <para>
       <ulink url="http://httpd.apache.org/docs/2.2/developer/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>使用 Perl 和 C 编写 Apache 模块 </term>
     <listitem>
      <para>
       <ulink url="http://www.modperl.com/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

<?dbfo-need height="10em"?>



  <sect2 id="sec.apache2.more_information.miscellaneous_sources">
   <title>其他来源</title>
   <para>
    <phrase os="sles;sled">如果遇到特定于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 的问题，请查看“技术信息搜索”，网址为：<ulink url="http://www.novell.com/support"/>。</phrase><ulink url="http://httpd.apache.org/ABOUT_APACHE.html"/> 提供了对 Apache 历史的介绍。此页还解释此服务器为什么被称为 Apache。
   </para><indexterm class="endofrange" startref="idx.apache2"/>
  </sect2>
 </sect1>
</chapter>
