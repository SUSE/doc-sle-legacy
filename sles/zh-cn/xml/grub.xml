<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN"
"novdocx.dtd">
<!--
*********************************
Please see LICENSE.txt for this document's license.
*********************************
-->
<chapter xml:base="grub.xml" id="cha.grub">
 <title>引导加载程序 GRUB</title><indexterm> <primary>引导</primary> <secondary>GRUB </secondary></indexterm><indexterm> <primary>GRUB</primary></indexterm>
 <abstract>
  <para>
   本章介绍如何配置 <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 中使用的引导加载程序 GRUB (Grand Unified Bootloader)。系统中提供了一个特殊的 YaST 模块用于配置所有设置。如果您不熟悉在 Linux 中进行引导的相关内容，请阅读下面几节获得一些背景信息。本章还介绍了使用 GRUB 进行引导时经常遇到的一些问题和它们的解决方案。
  </para>
 </abstract>
 <note os="sles;sled">
  <title>使用 UEFI 的计算机上无 GRUB</title>
  <para>
   配有传统 BIOS 的计算机和使用兼容支持模块 (CSM) 的 UEFI（统一可扩展固件接口）计算机上都会例行安装 GRUB。在未启用 CSM 的 UEFI 计算机上，将自动安装 <systemitem>eLILO</systemitem>（假设 DVD1 已成功引导）。请参见系统上 <filename>/usr/share/doc/packages/elilo/</filename> 处的 eLILO 文档以了解细节。
  </para>
 </note>
 <para>
  本章主要介绍引导加载程序 GRUB 的引导管理和配置。<xref linkend="cha.boot"/> 中将引导过程作为一个整体进行了介绍。引导加载程序代表计算机 (BIOS) 和操作系统 (<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>) 之间的接口。引导加载程序的配置直接影响到操作系统的启动。
 </para>
 <para>
  本章经常出现以下术语，可能需要进行解释：
 </para>
 <variablelist>
  <varlistentry>
   <term>MBR（Master Boot Record，主引导记录）<indexterm> <primary>引导</primary><secondary>引导扇区</secondary></indexterm><indexterm><primary>MBR</primary></indexterm><indexterm><primary>主引导记录</primary> <see>MBR</see></indexterm><indexterm><primary>分区</primary><secondary>分区表</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>主引导记录 (MBR)</secondary></indexterm></term>
   <listitem>
    
    <para>
     MBR 的结构是由独立于操作系统的约定确定的。前 446 个字节为程序代码保留。它们通常保存部分引导加载程序或操作系统选择器。随后的 64 个字节为最多包含 4 项的分区表提供空间。分区表包含有关硬盘分区和文件系统类型的信息。操作系统需要使用此表来处理硬盘。如果 MBR 中有传统通用代码，则只应将一个分区标记为<emphasis>活动</emphasis>。MBR 的最后两个字节必须包含静态<quote>幻数</quote>(<literal>AA55</literal>)。一些 BIOS 会将包含不同值的 MBR 视为无效，因此引导时不会考虑此 MBR。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>引导扇区<indexterm><primary>引导</primary><secondary>引导扇区</secondary></indexterm><indexterm><primary>GRUB</primary></indexterm><indexterm><primary>MBR</primary><secondary>引导扇区</secondary></indexterm></term>
   <listitem>
    <para>
     引导扇区是硬盘分区（除扩展分区之外）上的前几个扇区，扩展分区只充当其他分区的<quote>容器</quote>。引导扇区具有 512 字节的空间，引导扇区储存用于引导安装在各个分区上的操作系统的代码。这适用于经过格式化的 DOS、Windows 和 OS/2 分区的引导扇区，这些扇区还包含文件系统的一些重要的基本数据。相比之下，Linux 分区的引导扇区在设置文件系统（而不是 XFS）之后最初是空的。因此，即使 Linux 分区包含内核和有效的 root 文件系统，它也不能通过自身进行引导。储存了引导系统的有效代码的引导扇区具有与 MBR 中的最后两个字节 (<literal>AA55</literal>) 相同的幻数。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <sect1 id="sec.grub.basic">
  <title>使用 GRUB 引导</title><indexterm> <primary>GRUB</primary><secondary>引导</secondary></indexterm><indexterm><primary>安装</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>引导</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>配置</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>命令</primary><secondary>grub</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>命令</secondary></indexterm>

  <para>
   GRUB 包括两个阶段。Stage 1 包括 512 字节，其唯一任务在于装载引导加载程序的第二阶段。随后，装载 stage 2。这一段包含引导加载程序的主要部分。
  </para>

  <para>
   在一些配置中，可以使用中间段 1.5，它能从适当的文件系统中找到并装载第二段。如果可能，将在安装时或使用 YaST 初始设置 GRUB 时默认选择此方法。
  </para>

  <para>
   Stage 2 可以访问多个文件系统。目前支持 ext2、ext3、ReiserFS、Minix，以及 Windows 使用的 DOS FAT 文件系统。在某种程度上还支持 BSD 系统使用的 、XFS、UFS 和 FFS。从版本 0.95 开始，GRUB 还能够从包含 ISO 9660 标准文件系统且符合<quote>El Torito</quote>规范的 CD 或 DVD 进行引导。即使是在引导系统之前，GRUB 也可以访问支持的 BIOS 磁盘设备（BIOS 检测到的软盘或硬盘、CD 驱动器和 DVD 驱动器）的文件系统。因此，对 GRUB 配置文件 (<filename>menu.lst</filename>) 进行更改不要求全新安装引导管理器。当引导系统时，GRUB 重装载菜单文件以及内核或初始 RAM 磁盘 (<literal>initrd</literal>) 的有效路径和分区数据，并对这些文件进行定位。
  </para>

  <para>
   GRUB 的实际配置是基于四个文件进行的，下面对这四个文件进行介绍：
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/boot/grub/menu.lst</filename><indexterm><primary>GRUB</primary><secondary>menu.lst</secondary></indexterm></term>
    <listitem>
     <para>
      此文件包含有关可通过 GRUB 进行引导的分区或操作系统的所有信息。没有这些信息，GRUB 命令行将提示用户如何继续（请参见<xref linkend="sec.grub.menu.change"/>获取详细信息）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/boot/grub/device.map</filename><indexterm><primary>GRUB</primary><secondary>device.map</secondary></indexterm></term>
    <listitem>
     <para>
      此文件将 GRUB 和 BIOS 符号中的设备名转换为 Linux 设备名。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/grub.conf</filename><indexterm><primary>GRUB</primary><secondary>grub.conf</secondary></indexterm></term>
    <listitem>
     <para>
      此文件包含 GRUB 外壳正确安装引导加载程序所需的命令、参数和选项。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/sysconfig/bootloader</filename> <indexterm> <primary>GRUB </primary> <secondary>sysconfig/bootloader</secondary></indexterm></term>
    <listitem>
     <para>
      此文件由使用 YaST 配置引导加载程序时以及每次安装新内核时所使用的 perl-bootloader 库读取。它包含配置选项（例如内核参数）。默认情况下，这些配置选项会添加到引导加载程序配置文件中。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   可以通过多种方式控制 GRUB 可以在图形菜单（启动屏幕）中选择现有配置的引导项。配置是从文件 <filename>menu.lst</filename> 装载的。
  </para>

  <para>
   在 GRUB 中，在引导前可以更改所有引导参数。例如，可以通过这种方式更正编辑菜单文件时出现的错误。还可以在输入提示符处以交互方式输入引导命令。有关详细信息，请参见<xref linkend="sec.grub.menu.change"/>。GRUB 能够在引导前确定内核和 <filename>initrd</filename> 的位置。通过这种方式，您甚至可以引导在引导加载程序配置中不存在任何项的已安装操作系统。
  </para>

  <para>
   GRUB 实际上以两个版本存在：作为引导加载程序，以及作为 <filename>/usr/sbin/grub</filename> 中的普通 Linux 程序。后者称为 <emphasis>GRUB 外壳</emphasis>。它在已安装系统中提供 GRUB 的仿真，并且可用来安装 GRUB 或在应用新设置之前对其进行测试。将 GRUB 作为引导加载程序安装在硬盘或软盘上的功能以 <command>setup</command> 命令的形式集成在 GRUB 中。当装载了 Linux 后在 GRUB shell 中可用。
  </para>

  <sect2 id="sec.grub.menu">
   <title>文件 <filename>/boot/grub/menu.lst</filename></title><indexterm> <primary>配置文件</primary><secondary>menu.lst</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>引导菜单</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>menu.lst</secondary></indexterm>
   <para>
    带有引导菜单的图形启动屏幕基于 GRUB 配置文件 <filename>/boot/grub/menu.lst</filename>，该文件包含有关可以通过菜单引导的所有分区或操作系统的所有信息。
   </para>
   <para>
    每次引导系统时，GRUB 都从文件系统装载菜单文件。出于此原因，不必每次更改文件后都重安装 GRUB。使用 YaST 引导加载程序修改 GRUB 配置，如<xref linkend="sec.boot.yast2.config"/>中所述。
   </para>
   <para>
    菜单文件中包含命令。语法非常简单。每行都包含一条命令，后跟可选参数，可选参数之间用空格隔开，就像在外壳中一样。出于历史原因，某些命令允许在第一个参数前使用 <literal>=</literal>。注释以井号 (<literal>#</literal>) 开头。
   </para>
   <para>
    若要在菜单概述中标识菜单项，请为每项设置一个 <literal>title</literal>。关键字 <literal>title</literal> 后的文本（包括任何空格）显示为菜单中的可选择选项。当选择此菜单项时，将执行下一个 <literal>title</literal> 前的所有命令。
   </para>
   <para>
    最简单的情况是重定向到其他操作系统的引导加载程序。命令是 <literal>chainloader</literal>，参数通常是 GRUB 中另一个分区的引导块 block notation。例如：
   </para>
<screen>chainloader (hd0,3)+1</screen>
   <para>
    GRUB 中的设备名在<xref linkend="sec.grub.devices"/>中有所解释。此示例指定第一个硬盘第四个分区中的第一个块。
   </para>
   <para>
    使用命令 <literal>kernel</literal> 指定内核映像。第一个参数是指向分区中内核映像的路径。命令行上的其他参数将被传递到内核。
   </para>
   <para>
    如果内核不具有访问根分区的内置驱动程序，或者使用了具有高级热插拨功能的最新 Linux 系统，则必须用单独的 GRUB 命令指定 <filename>initrd</filename>，该命令的唯一参数便是指向 <filename>initrd</filename> 文件的路径。因为 <filename>initrd</filename> 的装载地址会被写入装载的内核映像中，所以 <literal>initrd</literal> 命令必须紧接在 <literal>kernel</literal> 命令之后。
   </para>
   <para>
    命令 <literal>root</literal> 简化了内核和 initrd 文件的指定。<literal>root</literal> 的唯一参数是一个设备或分区。此设备用于所有内核、<filename>initrd</filename> 或下一个 <literal>root</literal> 命令前未显式指定设备的其他文件路径。
   </para>
   <para>
    每个菜单项的末尾都间接指定 <literal>boot</literal> 命令，因此无需将其写入菜单文件中。但是，如果以交互方式使用 GRUB 进行引导，则必须在最后输入 <literal>boot</literal> 命令。该命令本身没有参数。它只引导装载的内核映像或指定的链装载程序。
   </para>
   <para>
    在写入所有菜单项之后，将其中一项定义为 <literal>default</literal> 项。否则，将使用第一项（项 <literal>0</literal>）。您还可以指定在一段时间后引导默认项的超时值（以秒为单位）。<literal>timeout</literal> 和 <literal>default</literal> 通常在各菜单项前面。示例文件在 <xref linkend="sec.grub.menu.example"/> 中有所介绍。
   </para>
   <sect3 id="sec.grub.devices">
    <title>硬盘和分区的命名约定</title><indexterm> <primary>GRUB</primary><secondary>设备名</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>分区名</secondary></indexterm>
    <para>
     GRUB 用于硬盘和分区的命名约定不同于普通 Linux 设备使用的命名约定。它更类似于 BIOS 执行的简单磁盘枚举，而语法类似于一些 BSD 衍生程序中使用的语法。在 GRUB 中，分区的编号从 0 开始。它表示 (<filename>hd0,0</filename>) 是第一块硬盘的第一个分区。在普通台式机上，作为 Primary Master（第一个 IDE 控制器上的主设备）连接的硬盘所对应的 Linux 设备名为 <filename>/dev/sda1</filename>。
    </para>
    <para>
     4 个可能的主分区所分配的分区号为 <literal>}0</literal> 到 <literal>3</literal>。逻辑分区的编号从 <literal>4</literal> 开始：
    </para>
<screen>(hd0,0)   first primary partition of the first hard disk
(hd0,1)   second primary partition
(hd0,2)   third primary partition
(hd0,3)   fourth primary partition (usually an extended partition)
(hd0,4)   first logical partition
(hd0,5)   second logical partition</screen>
    <para>
     GRUB 依赖于 BIOS 设备，它不区分 PATA (IDE)、SATA、SCSI 和硬件 RAID 设备。BIOS 或其他控制器识别的所有硬盘将按照 BIOS 中显示的引导顺序进行编号。
    </para>
    <para>
     不过，通常不能将 Linux 设备名准确映射为 BIOS 设备名。它借助某种算法生成这一映射并将其保存到文件 <filename>device.map</filename> 中，可以根据需要对该文件进行编辑。有关文件 <filename>device.map</filename> 的信息在<xref linkend="sec.grub.map"/> 中有所介绍。
    </para>
    <para>
     完整的 GRUB 路径包含写在括号中的设备名和指向指定分区的文件系统中文件的路径。路径以斜线开头。例如，在具有一个 PATA (IDE) 硬盘（其第一个分区中包含 Linux）的系统上，可以按如下方式指定可引导内核：
    </para>
<screen>(hd0,0)/boot/vmlinuz</screen>
   </sect3>
   <sect3 id="sec.grub.menu.example">
    <title>示例菜单文件</title>
    <para>
     以下示例说明了 GRUB 菜单文件的结构。此示例安装包括 <filename>/dev/sda5</filename> 下的 Linux 引导分区、<filename>/dev/sda7</filename> 下的根分区和 <filename>/dev/sda1</filename> 下的 Windows 安装。
    </para>
    
<screen>gfxmenu (hd0,4)/boot/message<co id="grub.menu.example.gfxmenu"/>
color white/blue black/light-gray<co id="grub.menu.example.color"/>
default 0<co id="grub.menu.example.default"/>
timeout 8<co id="grub.menu.example.timeout"/>

title linux<co id="grub.menu.example.linux"/>
   root (hd0,4)
   kernel /boot/vmlinuz root=/dev/sda7 vga=791 resume=/dev/sda9
   initrd /boot/initrd

title windows<co id="grub.menu.example.windows"/>
   rootnoverify (hd0,0)
   chainloader +1

title floppy<co id="grub.menu.example.floppy"/>
   rootnoverify (hd0,0)
   chainloader (fd0)+1

title failsafe<co id="grub.menu.example.failsafe"/>
   root (hd0,4)
   kernel /boot/vmlinuz.shipped root=/dev/sda7 ide=nodma \
   apm=off acpi=off vga=normal nosmp maxcpus=0 3 noresume
   initrd /boot/initrd.shipped</screen>
    <para>
     第一块定义了启动屏幕的配置：
    </para>
    <calloutlist>
     <callout arearefs="grub.menu.example.gfxmenu">
      <para>
       背景图像 <literal>message</literal> 位于 <filename>/dev/sda5</filename> 分区的 <filename>/boot</filename> 目录中。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.color">
      <para>
       颜色模式：白色（前景）、蓝色（背景）、黑色（所选内容）、浅灰色（所选内容的背景）。颜色方案对启动屏幕没有任何影响，它只影响通过按 <keycap>Esc</keycap> 键退出启动屏幕后所访问的可自定义的 GRUB 菜单。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.default">
      <para>
       会默认引导第一个 (<literal>0</literal>) 菜单项 <literal>title linux</literal>。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.timeout">
      <para>
       如果 8 秒钟后无任何用户输入，GRUB 将自动引导默认项。要检测自动引导，请删除 <literal>timeout</literal> 行。如果设置 <literal>timeout 0</literal>，GRUB 将立即引导默认项。
      </para>
     </callout>
    </calloutlist>
    <para>
     第二块（也就是最大的块）列出了各个可引导的操作系统。各个操作系统的不同部分由 <literal>title</literal> 引出。
    </para>
    <calloutlist>
     <callout arearefs="grub.menu.example.linux">
      <para>
       第一项 (<literal>title linux</literal>) 负责引导 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>。内核 (<literal>vmlinuz</literal>) 位于第一块硬盘的第一个逻辑分区（引导分区）。内核参数（例如根分区和 VGA 方式）也被追加在此处。根分区是根据 Linux 命名约定 (<filename>/dev/sda7/</filename>) 指定的，因为此信息将由内核读取，与 GRUB 无关。<literal>initrd</literal> 也位于第一块硬盘的第一个逻辑分区中。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.windows">
      <para>
       第二项负责装载 Windows。Windows 将从第一块硬盘的第一个分区 (<filename>hd0,0</filename>) 引导。命令 <literal>chainloader +1</literal> 将导致 GRUB 读取并执行指定分区的第一个扇区。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.floppy">
      <para>
       下一项支持从软盘进行引导，而无需修改 BIOS 设置。
      </para>
     </callout>
     <callout arearefs="grub.menu.example.failsafe">
      <para>
       引导选项 <literal>failsafe</literal> 用一组内核参数启动 Linux，这些参数使 Linux 甚至可以在有问题的系统上引导。
      </para>
     </callout>
    </calloutlist>
    <para>
     您随时都可根据需要更改菜单文件。GRUB 会在下次引导时使用修改后的设置。使用 YaST 或所选的编辑器对文件进行永久编辑。或者，使用 GRUB 的编辑功能以交互方式临时进行更改（请参见<xref linkend="sec.grub.menu.change"/>）。
    </para>
   </sect3>
   <sect3 id="sec.grub.menu.change">
    <title>在引导过程中编辑菜单项</title><indexterm> <primary>GRUB</primary><secondary>菜单编辑器</secondary></indexterm>
    <para>
     在图形引导菜单中，使用箭头键选择要引导的操作系统。如果选择 Linux 系统，则可以在引导提示符处输入其他引导参数。若要直接编辑个别菜单项，请按 <keycap>Esc</keycap> 键退出启动屏幕并进入 GRUB 基于文本的菜单，然后按 <keycap>E</keycap> 键。通过这种方式进行的更改仅适用于当前引导，不会被永久采用。
    </para>
    <important>
     <title>引导过程中的键盘布局</title>
     <para>
      US 键盘布局是引导时唯一可用的键盘布局。请参见<xref linkend="fig.trouble.install.keyboard_us"/>。
     </para>
    </important>
    <para>
     编辑菜单条目简化了无法再进行引导的有问题系统的修复工作，因为可以通过手动输入参数规避引导加载程序中有问题的配置文件。在引导过程中手动输入参数还可用于测试新设置而避免损坏本机系统。
    </para>
    <para>
     在激活编辑方式后，可以使用箭头键选择要编辑其配置的菜单项。若要使配置可以编辑，请再次按 <keycap>E</keycap> 键。通过这种方式，可以编辑不正确的分区或路径指定，从而防止它们对引导进程产生负面影响。按 <keycap>Enter</keycap> 键退出编辑方式并返回菜单。随后按 <keycap>B</keycap> 键引导此项。可以进行的进一步操作显示在底部的帮助文本中。
    </para>
    <para>
     若要永久输入更改的引导选项并将它们传递到内核，则以 <systemitem class="username">root</systemitem> 用户身份打开文件 <filename>menu.lst</filename> 并将相应的内核参数追加到现有的行上，用空格分隔：
    </para>
<screen>title linux
   root(hd0,0)
     kernel /vmlinuz root=/dev/sda3 <replaceable>additional parameter</replaceable>
   initrd /initrd</screen>
    <para>
     GRUB 会在下次引导系统时自动采用新参数。或者，还可以通过 YaST 引导加载程序模块进行此更改。将新参数追加到现有的行上，用空格分隔。
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec.grub.map">
   <title>文件 device.map</title><indexterm> <primary>GRUB </primary> <secondary>device.map</secondary></indexterm>
   <para>
    文件 <filename>device.map</filename> 将 GRUB 和 BIOS 设备名映射为 Linux 设备名。在包含 PATA (IDE) 和 SCSI 硬盘的混合系统中，GRUB 必须通过特殊过程尝试确定引导顺序，因为 GRUB 不能访问 BIOS 上有关引导顺序的信息。GRUB 会将此分析的结果保存在文件 <filename>/boot/grub/device.map</filename> 中。BIOS 中的引导顺序设为 PATA 先于 SCSI 的系统的示例 <filename>device.map</filename> 文件可能如下所示：
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/sda
(hd1)  /dev/sdb</screen>
   <para>
    或
   </para>
<screen>(fd0)  /dev/fd0
(hd0)  /dev/disk-by-id/<replaceable>DISK1 ID</replaceable>
(hd1)  /dev/disk-by-id/<replaceable>DISK2 ID</replaceable></screen>
   <para>
    因为 PATA (IDE)、SCSI 和其他硬盘的顺序取决于各种因素，并且 Linux 无法标识映射，所以可以在文件 <filename>device.map</filename> 中手动设置顺序。如果在引导时遇到问题，请检查此文件中的顺序是否与 BIOS 中的顺序对应，并根据需要使用 GRUB 提示符对其进行临时修改。引导了 Linux 系统之后，便可以使用 YaST 引导加载程序模块或所选的编辑器对文件 <filename>device.map</filename> 进行永久编辑。
   </para>
   <note os="sles">
    <title>最大硬盘数量</title>
    <para>
     GRUB 使用 BIOS 服务对硬盘寻址。这是通过软件中断 Int13h 进行的。由于 Int13h 处理的最大磁盘数限制为 8 个，因此 GRUB 仅可从 Int13h 处理的这些磁盘中引导，即使存在更多磁盘也不例外（此情况通常出现在多路径系统上）。因此，安装期间创建的 <filename>device.map</filename> 文件将仅包含 Int13h 处理的最多 8 个磁盘。
    </para>
   </note>
   <para>
    在手工更改 <filename>device.map</filename> 之后，请执行以下命令重安装 GRUB。此命令导致重装载文件 <filename>device.map</filename> 并且执行 <filename>grub.conf</filename> 中列出的命令：
   </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
  </sect2>

  <sect2 id="sec.grub.conf">
   <title>文件 /etc/grub.conf</title><indexterm> <primary>配置文件</primary><secondary>grub.conf</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>grub.conf</secondary></indexterm><indexterm><primary>配置</primary><secondary>GRUB</secondary></indexterm>
   <para>
    除了 <filename>menu.lst</filename> 和 <filename>device.map</filename> 之外，第三个重要的 GRUB 配置文件就是 <filename>/etc/grub.conf</filename>。此文件包含 GRUB 外壳正确安装引导加载程序所需的命令、参数和选项：
   </para>
<screen>setup --stage2=/boot/grub/stage2 --force-lba (hd0,1) (hd0,1)
   quit</screen>
   <para>
    该命令告知 GRUB 使用位于第一个硬盘的第二个分区 (hd0,1) 上的引导映像将引导加载程序自动安装到同一分区上。需要 <option>--stage2=/boot/grub/stage2</option> 参数在已装入的文件系统中安装 <filename>stage2</filename> 映像。一些 BIOS 具有不正确的 LBA 支持实施，<option>--force-lba</option> 提供了解决方案以忽略这些故障。
   </para>
  </sect2>

  <sect2 id="sec.grub.sysconfig">
   <title>文件 <filename>/etc/sysconfig/bootloader</filename></title><indexterm> <primary>GRUB</primary> <secondary>sysconfig/bootloader</secondary></indexterm>
   <para>
    仅在使用 YaST 配置引导加载程序时以及每次安装新内核时会用到此配置文件。它由 perl-bootloader 库评估，此库会相应地修改引导加载程序配置文件（例如，对于 GRUB 为 <filename>/boot/grub/menu.lst</filename>）。<filename>/etc/sysconfig/bootloader</filename> 不是特定于 GRUB 的配置文件，其值会应用于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上安装的任何引导加载程序。
   </para>
   <note>
    <title>内核更新后的引导加载程序配置</title>
    <para>
     每次安装新内核时，perl-bootloader 都会使用 <filename>/etc/sysconfig/bootloader</filename> 中指定的默认值写入新的引导加载程序配置文件（例如，对于 GRUB 为 <filename>/boot/grub/menu.lst</filename>）。如果要使用自定义内核参数集，请确保根据需要调整 <filename>/etc/sysconfig/bootloader</filename> 中的相关默认值。
    </para>
   </note>
   <variablelist>
    <varlistentry>
     <term><literal>LOADER_TYPE</literal>
     </term>
     <listitem>
      <para>
       指定在系统上安装的引导加载程序（例如 GRUB 或 LILO）。不要修改，而是使用 YaST 更改引导加载程序，如<xref linkend="pro.boot.yast2.config.loader"/>中所述。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_VGA / FAILSAFE_VGA / XEN_VGA</literal>
     </term>
     <listitem>
      <para>
       引导期间使用的 framebuffer 的屏幕分辨率和颜色深度是通过内核参数 <literal>vga</literal> 配置的。这些值定义对于默认引导项、failsafe 和 XEN 项使用哪种分辨率和颜色深度。以下值为有效值：
      </para>
      <table>
       <title>屏幕分辨率和颜色深度参考</title>
       <tgroup cols="6">
        <thead>
         <row>
          <entry>
           <para/>
          </entry>
          <entry>
           <para>
            640x480
           </para>
          </entry>
          <entry>
           <para>
            800x600
           </para>
          </entry>
          <entry>
           <para>
            1024x768
           </para>
          </entry>
          <entry>
           <para>
            1280x1024
           </para>
          </entry>
          <entry>
           <para>
            1600x1200
           </para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>
            8bit
           </para>
          </entry>
          <entry>
           <para>
            0x301
           </para>
          </entry>
          <entry>
           <para>
            0x303
           </para>
          </entry>
          <entry>
           <para>
            0x305
           </para>
          </entry>
          <entry>
           <para>
            0x307
           </para>
          </entry>
          <entry>
           <para>
            0x31C
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            15bit
           </para>
          </entry>
          <entry>
           <para>
            0x310
           </para>
          </entry>
          <entry>
           <para>
            0x313
           </para>
          </entry>
          <entry>
           <para>
            0x316
           </para>
          </entry>
          <entry>
           <para>
            0x319
           </para>
          </entry>
          <entry>
           <para>
            0x31D
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            16bit
           </para>
          </entry>
          <entry>
           <para>
            0x311
           </para>
          </entry>
          <entry>
           <para>
            0x314
           </para>
          </entry>
          <entry>
           <para>
            0x317
           </para>
          </entry>
          <entry>
           <para>
            0x31A
           </para>
          </entry>
          <entry>
           <para>
            0x31E
           </para>
          </entry>
         </row>
         <row>
          <entry>
           <para>
            24bit
           </para>
          </entry>
          <entry>
           <para>
            0x312
           </para>
          </entry>
          <entry>
           <para>
            0x315
           </para>
          </entry>
          <entry>
           <para>
            0x318
           </para>
          </entry>
          <entry>
           <para>
            0x31B
           </para>
          </entry>
          <entry>
           <para>
            0x31F
           </para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEFAULT_APPEND / FAILSAFE_APPEND / XEN_KERNEL_APPEND</literal>
     </term>
     <listitem>
      <para>
       自动追加到引导加载程序配置文件中的默认值、故障安全以及 XEN 引导项的内核参数（<literal>vga</literal> 除外）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>CYCLE_DETECTION / CYCLE_NEXT_ENTRY</literal>
     </term>
     <listitem>
      <para>
       配置是否要使用引导周期检测，如果要使用，则配置在重引导周期要从 <filename>/boot/grub/menu.lst</filename> 引导的备用项（例如 <systemitem>Failsafe</systemitem>）。请参见 <filename>/usr/share/doc/packages/bootcycle/README</filename> 了解详细信息。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 id="sec.grub.password">
   <title>设置引导口令</title><indexterm> <primary>GRUB </primary> <secondary>引导口令</secondary></indexterm>
   <para>
    即使是在引导操作系统之前，GRUB 也支持对文件系统的访问。没有 root 权限的用户可以访问 Linux 系统中的文件，而一旦引导系统后，他们将无权访问这些文件。要阻止此类访问或防止用户引导某些操作系统，请设置引导口令。
   </para>
   <important>
    <title>引导口令和启动屏幕</title>
    <para>
     如果对 GRUB 使用引导口令，则不显示通常的启动屏幕。
    </para>
   </important>
   <para>
    以 <literal>root</literal> 用户身份按如下步骤设置引导口令：
   </para>
   <procedure>
    <step performance="required">
     <para>
      在 root 提示符处，使用 grub-md5-crypt 加密口令：
     </para>
<screen># grub-md5-crypt
Password: ****
Retype password: ****
Encrypted: $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
    </step>
    <step performance="required">
     <para>
      将经过加密的字符串粘贴到 <filename>menu.lst</filename> 文件的全局部分：
     </para>
<screen>gfxmenu (hd0,4)/message
color white/blue black/light-gray
default 0
timeout 8
password --md5 $1$lS2dv/$JOYcdxIn7CJk9xShzzJVw/</screen>
     <para>
      现在，只有在按 <keycap>P</keycap> 键并输入口令后，才可以在引导提示符处执行 GRUB 命令。但是，用户仍可以从引导菜单引导所有操作系统。
     </para>
    </step>
    <step performance="required">
     <para>
      要防止从引导菜单引导一个或多个操作系统，请将项 <literal>lock</literal> 添加到 <filename>menu.lst</filename> 中不输入口令就不能引导的每个部分。例如：
     </para>
<screen>title linux
   kernel (hd0,4)/vmlinuz root=/dev/sda7 vga=791
   initrd (hd0,4)/initrd
   lock</screen>
     <para>
      在重引导系统并从引导菜单中选择 Linux 项后，将显示以下错误消息：
     </para>
<screen>Error 32: Must be authenticated</screen>
     <para>
      按 <keycap>Enter</keycap> 键进入该菜单。然后按 <keycap>P</keycap> 键，系统将提示您输入口令。在输入口令并按 <keycap>Enter</keycap> 键之后，将引导所选的操作系统（在本例中为 Linux）。
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="grub_yast_i.xml" parse="xml"/>
 <sect1 id="sec.grub.entfernen">
  <title>卸载 Linux 引导加载程序</title><indexterm> <primary>卸装</primary><secondary>GRUB</secondary></indexterm><indexterm><primary>卸装</primary><secondary>Linux</secondary></indexterm><indexterm><primary>GRUB</primary><secondary>卸装</secondary></indexterm><indexterm><primary>Linux</primary><secondary>卸装</secondary></indexterm>

  <para>
   YaST 可用于卸载 Linux 引导加载程序并将 MBR 恢复为安装 Linux 之前的状态。在安装过程中，YaST 会自动创建原始 MBR 的备份副本，并根据请求进行恢复。
  </para>

  <para>
   要卸装 GRUB，请启动 YaST，然后单击<menuchoice> <guimenu>系统</guimenu> <guimenu>引导加载程序</guimenu> </menuchoice>启动引导加载程序模块。选择<menuchoice><guimenu>其他</guimenu><guimenu>恢复硬盘的主引导记录</guimenu></menuchoice>然后选择<guimenu>是，重写</guimenu>加以确认。
  </para>
 </sect1>
 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="grub_bootcd_i.xml" parse="xml"/>
 <sect1 id="sec.boot.screen">
  <title>图形 SUSE 屏幕</title><indexterm> <primary>引导</primary> <secondary>图形</secondary> </indexterm> <indexterm> <primary>控制台</primary> <secondary>图形</secondary> </indexterm>

  <para>
   如果将选项 <option>vga=<replaceable>value</replaceable></option> 用作内核参数，则会在第一个控制台上显示图形 SUSE 屏幕。如果您使用 YaST 进行安装，则将依照所选的分辨率和图形卡自动激活此选项。 可以根据需要通过三种方法禁用 SUSE 屏幕：
  </para>

  <variablelist>
   <varlistentry>
    <term>在必要时禁用 SUSE 屏幕。</term>
    <listitem>
     <para>
      在命令行上输入命令 <command>echo 0 &gt;/proc/splash</command> 以禁用图形屏幕。要将其再次激活，请输入 <command>echo 1 &gt;/proc/splash</command>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>默认禁用 SUSE 屏幕。</term>
    <listitem>
     <para>
      将内核参数 <option>splash=0</option> 添加到您的引导加载程序配置中。<xref linkend="cha.grub"/> 提供了有关此内容的详细信息。但是，如果您倾向于使用文本方式（这是早期版本中的默认方式），请设置 <option>vga=normal</option>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>完全禁用 SUSE 屏幕</term>
    <listitem>
     <para>
      编译新内核并禁用<guimenu>帧缓冲支持</guimenu>中的选项<guimenu>使用启动屏幕而不是引导徽标</guimenu>。在内核中禁用帧缓冲区支持也会自动禁用启动屏幕。
     </para>
     <warning>
      <title>无支持</title>
      <para>
       如果您使用自定义内核运行 SUSE，则它不能为系统提供任何支持。
      </para>
     </warning>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.grub.probs">
  <title>查错</title><indexterm> <primary>GRUB</primary><secondary>查错</secondary></indexterm>

  <para>
   本节列出使用 GRUB 进行引导的一些常见问题并提供可能解决方案的简短说明。在位于<phrase os="sled;sles">支持数据库 <ulink url="http://www.suse.com/support"/></phrase> 的文章中介绍了其中一些问题。用搜索对话框搜索 <emphasis>GRUB</emphasis>、<emphasis>boot</emphasis> 和 <emphasis>boot loader</emphasis> 之类的关键字。
  </para>

  <variablelist>
   <varlistentry>
    <term>GRUB 和 XFS</term>
    <listitem>
     <para>
      XFS 未在分区引导块中为 <filename>stage1</filename> 预留任何空间。因此，不要指定 XFS 分区作为引导加载程序的位置。此问题可以通过创建单独的引导分区（不使用 XFS 进行格式化）得到解决。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>GRUB 报告 GRUB Geom 错误<indexterm><primary>GRUB</primary><secondary>GRUB Geom 错误</secondary></indexterm></term>
    <listitem>
     <para>
      当引导系统时，GRUB 将检查连接的硬盘的磁盘空间。有时，BIOS 将返回不一致的信息，GRUB 将报告 GRUB Geom 错误。在此情况下，请更新 BIOS。
     </para>
     <para>
      如果将 Linux 安装在未在 BIOS 中注册的其它硬盘上，GRUB 也会返回此错误讯息。找到并正确装载了引导加载程序的 <emphasis>stage1</emphasis>，但未找到 <emphasis>stage2</emphasis>。可以通过在 BIOS 中注册新硬盘解决此问题。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>包含多个硬盘的系统不会进行引导</term>
    <listitem>
     <para>
      安装时，YaST 可能没有正确确定硬盘的引导顺序。例如，GRUB 可能将 PATA (IDE) 磁盘视为 <filename>hd0</filename>，将 SCSI 磁盘视为 <filename>hd1</filename>，尽管 BIOS 中的引导顺序是相反的（SCSI <emphasis>先于</emphasis> PATA）。
     </para>
     <para>
      在这种情况下，在引导进程中借助 GRUB 命令行对硬盘进行更正。在引导系统后，编辑 <filename>device.map</filename> 永久应用新映射。然后，检查 <filename>/boot/grub/menu.lst</filename> 和 <filename>/boot/grub/device.map</filename> 文件中的 GRUB 设备名，并使用以下命令重安装引导加载程序：
     </para>
<screen>grub --batch &lt; /etc/grub.conf</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>从第二块硬盘引导 Windows</term>
    <listitem>
     <para>
      某些操作系统（例如 Windows）只能从第一块硬盘进行引导。如果这样的操作系统安装在第一块硬盘之外的硬盘上，您可以影响相应菜单项的逻辑更改。
     </para>
<screen>...
title windows
   map (hd0) (hd1)
   map (hd1) (hd0)
   chainloader(hd1,0)+1
...</screen>
     <para>
      在此示例中，将从第二块硬盘启动 Windows。出于此目的，请使用 <literal>map</literal> 更改硬盘的逻辑顺序。此更改不会影响 GRUB 菜单文件中的逻辑。因此，必须为 <literal>chainloader</literal> 指定第二块硬盘。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.grub.info">
  <title>更多信息</title>

  <para>
   <ulink url="http://www.gnu.org/software/grub/"/> 上提供了有关 GRUB 的大量信息。还请参见 <command>grub</command> 信息页面。<phrase os="sles;sled">您也可以在“Technical Information Search”（技术信息搜索，网站为 <ulink url="http://www.novell.com/support"/>）中搜索关键字<quote>GRUB</quote>来获取有关特殊问题的信息。</phrase>
  </para>
 </sect1>
</chapter>
